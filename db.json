{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":0},{"_id":"source/img/allProto.png","path":"img/allProto.png","modified":1,"renderable":0},{"_id":"source/img/ci-pipe.jpg","path":"img/ci-pipe.jpg","modified":1,"renderable":0},{"_id":"source/img/prototype.png","path":"img/prototype.png","modified":1,"renderable":0},{"_id":"source/img/ci-token.jpg","path":"img/ci-token.jpg","modified":1,"renderable":0},{"_id":"source/img/proto.png","path":"img/proto.png","modified":1,"renderable":0},{"_id":"source/img/view.png","path":"img/view.png","modified":1,"renderable":0},{"_id":"source/img/webpack-bundle-a-js.jpg","path":"img/webpack-bundle-a-js.jpg","modified":1,"renderable":0},{"_id":"source/img/webpack-bundle-b-js.jpg","path":"img/webpack-bundle-b-js.jpg","modified":1,"renderable":0},{"_id":"source/img/wx.png","path":"img/wx.png","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/images/uploads/avatar.png","path":"images/uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186398},{"_id":"source/404.html","hash":"51b5f8983b53a8ff3f88a7bd6e73cf8313ecf0a4","modified":1559783186398},{"_id":"source/README.md","hash":"93bf2807f643ef336162f10db70307c1ce0f95b0","modified":1559783186400},{"_id":"source/.DS_Store","hash":"d0571b32cb5c1c40ddc89d5075638f920e9ef440","modified":1575424608366},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1559783186537},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1559783186538},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1559783186538},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1559783186540},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1559783186540},{"_id":"themes/next/_config.yml","hash":"8623db21a369eb443408c65e8dbc1b1f7199e148","modified":1575967666339},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1559783186617},{"_id":"source/_posts/Docker快速入门.md","hash":"5a4ccc31c7bec14777d7b2c2b5c4c8942b4fbe29","modified":1575366399102},{"_id":"source/_posts/Gitlab-CI初探.md","hash":"fe650fe01d7cc951d8bddb7d8d32b9bb8c331afb","modified":1571273192225},{"_id":"source/_posts/HTTP缓存——304与200-from-cache.md","hash":"73eaebeeb7aa5cda7a9a7900e7010370ce32cf0f","modified":1559783186404},{"_id":"source/_posts/JavaScript之Web-Worker.md","hash":"0b527cc7e7f7f2924a8ee1cc276244461f3bb3d4","modified":1559783186405},{"_id":"source/_posts/JavaScript之函数记忆.md","hash":"185def205ac2f85d7038c747cb390b998cf87965","modified":1559783186406},{"_id":"source/_posts/JavaScript之原型与原型链.md","hash":"60318754ec46cc75c5ec941a4d3089df4705ff13","modified":1559783186407},{"_id":"source/_posts/JavaScript之实现一个简单的Vue.md","hash":"9a4ea7da6c48c1cab81540b343d2c340c52402c7","modified":1559783186409},{"_id":"source/_posts/JavaScript之节流与防抖.md","hash":"f945ace8478ccf700afbaee5c39d9e1673516630","modified":1559783186411},{"_id":"source/_posts/JavaScript之实现一个简单的promise.md","hash":"3904b083dfe84da73ca54a9d73f3183d2a63991f","modified":1559783186410},{"_id":"source/_posts/JavsScript之浅拷贝与深拷贝.md","hash":"05a09e0236b69911ac0ac9326c354a937a22a13c","modified":1559783186412},{"_id":"source/_posts/MySQL基础.md","hash":"80ac1a2f4a28b65f2c97c97d3583d7fec90f7075","modified":1559783186413},{"_id":"source/_posts/Koa源码系列之koa-compose.md","hash":"905c0f5e107a0dd703fea1325d8442d9586d9799","modified":1576053559768},{"_id":"source/_posts/canvas微信红包照片.md","hash":"f789a21d81a7e4dfae4013f762cf759dbd77bcab","modified":1559783186417},{"_id":"source/_posts/gulp.md","hash":"fbcd7891064ee115b44f9a2be329510a9bb0ecdc","modified":1559783186418},{"_id":"source/_posts/Node-Koa2-Mysql-搭建简易博客.md","hash":"3d33eb58bca66e71b286fdc33fa2c3e8cc2d6b9b","modified":1559783186415},{"_id":"source/_posts/node项目服务器部署-新手教程.md","hash":"dfc23731d43cbf069dd56c3eacd274d2750e4b6d","modified":1559783186419},{"_id":"source/_posts/nodejs微信支付之扫码支付.md","hash":"6f5402a7291c15268876e68f0ec842df52230ee8","modified":1559783186419},{"_id":"source/_posts/redis简易教程以及使用nodejs连接redis.md","hash":"a8e1a97149e05065e926abbfb2816a66dc046017","modified":1559783186421},{"_id":"source/_posts/webpack系列之初探.md","hash":"b4dc1cbd4ccdac04c1769f499361aefaa68e2030","modified":1561907080701},{"_id":"source/_posts/Vue之vuex源码分析.md","hash":"817c93ad9bca27bf571f94176252f00f0e185df5","modified":1571213224733},{"_id":"source/_posts/使用-Vue2-js-Node-js-搭建一个小型的全栈项目.md","hash":"9a51cb762bbb2a92915220ad0e5350c5548903db","modified":1559783186421},{"_id":"source/_posts/读zepto源码，封装自己的zepto库-（三）.md","hash":"084dcedc5addc59a4850df4d79413bf074ae591c","modified":1559783186422},{"_id":"source/_posts/读zepto源码，封装自己的zepto库（一）.md","hash":"f47357542a777589efabf6c64078d1da0e88fe81","modified":1559783186422},{"_id":"source/_posts/webpack系列之编写一个loader.md","hash":"756d50d11540db002bc61ed1b70f98596018fdc6","modified":1562549399622},{"_id":"source/_posts/读zepto源码，封装自己的zepto库（二）.md","hash":"262d048d54460a5b36f63ea3ec2ce9fe36e6b01b","modified":1559783186424},{"_id":"source/_posts/webpack系列之输出文件分析.md","hash":"9395e539bea91ae8494ef776c894fb7e941a762e","modified":1564221536269},{"_id":"source/categories/index.md","hash":"73fa43522b683982b8b5b8dee5f6e06c2234191b","modified":1559783186426},{"_id":"source/_posts/webpack系列之编写一个plugin.md","hash":"a9df71416955466bdbdd8d6d3e2a0f70ef33efa6","modified":1562549360031},{"_id":"source/about/index.md","hash":"d1eb150d0d2b3b9f33743ae5027564c1954d15bc","modified":1575365547493},{"_id":"source/img/alipay.png","hash":"bb3b05100bee3aec948f9125a4dcf5df2d349420","modified":1571190412000},{"_id":"source/img/allProto.png","hash":"5e91ce18ff762aea1bc714ee768adc23ddf71c1b","modified":1571190412000},{"_id":"source/img/ci-pipe.jpg","hash":"4186495594e694be1d9bc7949254080114598613","modified":1571190412000},{"_id":"source/img/prototype.png","hash":"23e6c9f3193ca4c7d801ba4dc8b66a370fac2ba5","modified":1571190412000},{"_id":"source/img/ci-token.jpg","hash":"9f851f5d8bea8fc0ad2f0f343815461b2c352993","modified":1571190412000},{"_id":"source/img/proto.png","hash":"dec23a5fdfc9f4bb5e358731b20caac12cdb58a9","modified":1571190412000},{"_id":"source/img/copy.md","hash":"8a4ad75527426bc92137c34fc0592c624626f086","modified":1559783186430},{"_id":"source/img/view.png","hash":"cbb0787f40355159c1c55b47f76e6673197f2bd9","modified":1571190412000},{"_id":"source/img/webpack-bundle-a-js.jpg","hash":"c92c0a6336cccdc62b6db0e21233bdb7a8a46869","modified":1571190412000},{"_id":"source/img/webpack-bundle-b-js.jpg","hash":"92723941be30769a2d2ee79f8179170ec59e0f31","modified":1571190412000},{"_id":"source/img/wx.png","hash":"7fc17035dcf5f806cdea033c83fc99fef24257e0","modified":1571190412000},{"_id":"source/tags/index.md","hash":"664ee8a9ee76c227ed96f8be0f6341d07d7ddb68","modified":1559783186437},{"_id":"source/tags/index-1.md","hash":"0cb1eb60ffc1c30850d9f5807ab7fae47901ae03","modified":1559783186437},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1559783186542},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1559783186543},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1559783186544},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1559783186542},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1559783186544},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1559783186545},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1559783186549},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1559783186550},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1559783186548},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1559783186551},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1559783186552},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1559783186553},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1559783186554},{"_id":"themes/next/layout/_layout.swig","hash":"0f547afe52721ffcbbc32bbf18d1041f1b546685","modified":1559783186556},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1559783186611},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1559783186611},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1559783186612},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1559783186613},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1559783186613},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1559783186618},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1559783186614},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1559783186616},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1559783186619},{"_id":"source/img/.DS_Store","hash":"a6e594b3270854771e8baef05043ba28504dbab6","modified":1575365582240},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1559783186918},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1559783186919},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1559783186920},{"_id":"source/img/favicon.ico","hash":"88db38279623c68632592cc356251e42c46c2273","modified":1559783186432},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186778},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1559783186558},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559783186555},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1559783186557},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559783186555},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1559783186560},{"_id":"themes/next/layout/_macro/post.swig","hash":"6f3c6078b9dbc238ccf86fb228c24c0b94f67d47","modified":1559783186559},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4b029551ddb44c53f895e96cf8ff5ffbe02322fb","modified":1559783186561},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1559783186562},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e3a771629ff5ded6f61bebf63375829c56e85276","modified":1559783186564},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1559783186567},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1559783186568},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1559783186563},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1559783186569},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1559783186577},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1559783186568},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1559783186573},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1559783186578},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1559783186585},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1559783186602},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1559783186604},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1559783186603},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1559783186602},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1559783186604},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1559783186605},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1559783186620},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1559783186621},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1559783186621},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1559783186622},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1559783186624},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1559783186625},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1559783186624},{"_id":"themes/next/source/css/main.styl","hash":"94648cb9ab05e5e1c961c35d1478e3fecd7ac293","modified":1559783186777},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1559783186782},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1559783186783},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1559783186786},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1559783186788},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1559783186789},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1559783186793},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1559783186793},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1559783186795},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1559783186791},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559783186795},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559783186796},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1559783186797},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1559783186798},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1559783186799},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186581},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186582},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186711},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186712},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186714},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186749},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559783186769},{"_id":"themes/next/source/images/avatar.png","hash":"88db38279623c68632592cc356251e42c46c2273","modified":1559783186785},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1559783186565},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1559783186566},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1559783186571},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1559783186571},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1559783186572},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1559783186574},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1559783186573},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1559783186576},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1559783186576},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1559783186584},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1559783186579},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1559783186587},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"16cb23818909f57dac1a5ada66869971c33d7bd8","modified":1559783186588},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1559783186586},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1559783186588},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1559783186589},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1559783186590},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1559783186591},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1559783186592},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1559783186592},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1559783186593},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1559783186594},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1559783186595},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1559783186596},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1559783186597},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1559783186598},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1559783186598},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1559783186600},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1559783186600},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1559783186601},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1559783186608},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1559783186609},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1559783186610},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1559783186609},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1559783186710},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1559783186712},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1559783186713},{"_id":"themes/next/source/css/_my/mycss.styl","hash":"9423d208b68cb82c5b5f2554169ccb3bea052e44","modified":1559783186715},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1559783186746},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1559783186758},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1559783186763},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1559783186804},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1559783186805},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1559783186808},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1559783186807},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1559783186806},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1559783186809},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1559783186810},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1559783186810},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1559783186812},{"_id":"themes/next/source/js/src/utils.js","hash":"c976214b8bbaa9512b886bf3687e94696f705e33","modified":1559783186814},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1559783186812},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1559783186827},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"8a791b367e1f921ab21b370b3351cfd4e61ad9f8","modified":1559783186832},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1559783186833},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1559783186836},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1559783186835},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1559783186855},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1559783186856},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1559783186857},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1559783186856},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1559783186858},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1559783186850},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1559783186851},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1559783186852},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1559783186851},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1559783186874},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1559783186877},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1559783186879},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1559783186881},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1559783186883},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1559783186885},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1559783186883},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1559783186888},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1559783186887},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1559783186889},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1559783186890},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1559783186891},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1559783186894},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1559783186892},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1559783186894},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1559783186893},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1559783186895},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1559783186896},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1559783186897},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1559783186897},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1559783186898},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1559783186899},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1559783186900},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1559783186903},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1559783186909},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1559783186910},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1559783186916},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1559783186914},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1559783186915},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1559783186875},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1559783186607},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1559783186607},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1559783186629},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1559783186629},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1559783186701},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1559783186631},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1559783186632},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1559783186633},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1559783186663},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1559783186703},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1559783186684},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1559783186706},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1559783186708},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1559783186707},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1559783186705},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1559783186719},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1559783186717},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1559783186718},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1559783186719},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1559783186721},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1559783186720},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1559783186722},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1559783186727},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1559783186728},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1559783186729},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1559783186730},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1559783186731},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1559783186733},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1559783186736},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1559783186736},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1559783186735},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1559783186737},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1559783186738},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1559783186811},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1559783186826},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1559783186825},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1559783186837},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1559783186839},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1559783186838},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1559783186839},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1559783186840},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1559783186841},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1559783186847},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1559783186849},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1559783186848},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1559783186860},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1559783186859},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1559783186861},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1559783186853},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1559783186854},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1559783186907},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1559783186908},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1559783186822},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1559783186824},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559783186872},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559783186873},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1559783186912},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1559783186634},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1559783186636},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1559783186637},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1559783186635},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1559783186638},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1559783186640},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1559783186639},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1559783186641},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1559783186642},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1559783186644},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1559783186661},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1559783186645},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1559783186659},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1559783186664},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1559783186662},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1559783186667},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1559783186667},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1559783186668},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1559783186669},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1559783186669},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1559783186670},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1559783186671},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1559783186672},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1559783186673},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1559783186673},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1559783186674},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1559783186675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1559783186676},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f12523d491c031891693d02c12f2391d27ccb66d","modified":1559783186677},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1559783186665},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1559783186678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1559783186679},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1559783186666},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1559783186681},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1559783186683},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1559783186682},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1559783186680},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1559783186683},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1559783186686},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1559783186687},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1559783186688},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1559783186689},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1559783186691},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1559783186690},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1559783186692},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1559783186692},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1559783186693},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1559783186694},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1559783186694},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1559783186695},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1559783186699},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1559783186696},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1559783186697},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559783186725},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1559783186724},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559783186732},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1559783186818},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1559783186817},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1559783186821},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1559783186820},{"_id":"themes/next/source/images/uploads/avatar.png","hash":"05c61be4e35208bdab9c1ca99b2b42955284ca70","modified":1559783186801},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1559783186843},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1559783186842},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1559783186844},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1559783186843},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1559783186845},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1559783186846},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1559783186863},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559783186865},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1559783186870},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1559783186830},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1559783186905},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1559783186868}],"Category":[{"name":"Docker","_id":"ck411ns8q000559x34jkx2onj"},{"name":"工具","_id":"ck411ns8x000b59x3lti9bdrg"},{"name":"javascript","_id":"ck411ns92000f59x3bkwxzhqy"},{"name":"教程","parent":"ck411ns8q000559x34jkx2onj","_id":"ck411ns99000q59x3krzo9r9a"},{"name":"自动化","parent":"ck411ns8x000b59x3lti9bdrg","_id":"ck411ns9h001959x3kfvuoe6x"},{"name":"HTTP","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9n001k59x32vt3xbux"},{"name":"promise","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9q001q59x3j81t2pfi"},{"name":"canvas","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9t001w59x3zaueg2hu"},{"name":"gulp","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9v002459x35roahnbw"},{"name":"node","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9w002b59x3i8qg3g9g"},{"name":"redis","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9z002m59x373zoq52i"},{"name":"webpack","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa0002u59x36pzc7zsj"},{"name":"vue","parent":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa2003559x3oucvdp8o"},{"name":"教程","parent":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsae003t59x3opt7on8e"},{"name":"微信支付","parent":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsaf004059x3nzlrlyds"},{"name":"node","parent":"ck411ns9z002m59x373zoq52i","_id":"ck411nsag004559x33i7zgorb"},{"name":"vue","parent":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsah004a59x3a9ugl8q3"},{"name":"egg","parent":"ck411nsaf004059x3nzlrlyds","_id":"ck411nsai004e59x3f09uosdw"},{"name":"教程","parent":"ck411nsag004559x33i7zgorb","_id":"ck411nsaj004j59x3ldwvkjwe"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your-site-url\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your-site-url\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","date":"2019-06-06T01:06:26.398Z","updated":"2019-06-06T01:06:26.398Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck411ns7i000059x38t1w157a","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your-site-url\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your-site-url\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>"},{"title":"categories","date":"2017-06-28T01:49:25.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-28 09:49:25\ntype: \"categories\"\n---\n\n","updated":"2019-06-06T01:06:26.426Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck411ns8n000259x34nwg87tq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","date":"2017-06-28T01:49:34.000Z","type":"about","_content":"\n## wclimb\n---\n\n> web前端开发工程师\n> 以下均为原创\n\n* Github： https://github.com/wclimb\n* Koa2-blog： http://blog.wclimb.site (博客项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=Koa2-blog&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* vue-video： http://video.wclimb.site (手机端vue项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=vue-video&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* video-admin： http://vue.wclimb.site (vue项目后台管理)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=video-admin&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* wat： https://github.com/wclimb/wat (轻量级vue ui插件，功能还在增加)\n* react-video： http://react.wclimb.site (手机端react项目)\n* Swipe： http://www.wclimb.site/swipe (轮播插件)\n* pagination： http://www.wclimb.site/pagination (分页插件)\n* validation： http://www.wclimb.site/validation (表单验证插件)\n* lazyLoad： http://www.wclimb.site/lazyLoad (图片懒加载插件)\n* funsChat： http://chat.wclimb.site (node聊天室)\n\n## 技术栈\n\n```js\n{\n  name: 'wclimb',\n  age: 25, // +1 其实是拒绝的\n  gender: '男',\n  Github: 'https://github.com/wclimb',\n  blog: 'http://www.wclimb.site/',\n  email: 'wclimb1994@gmail.com',\n  skills: [\n    ['HTML', 'JavaScript', 'jQuery', 'Zepto', 'CSS3', 'ES6', 'Node'],\n    ['Vue', 'vuex', 'vue-router'],\n    ['React', 'redux', 'react-router'],\n    ['gulp', 'webpack'],\n    ['sass', 'less'],\n    ['git'],\n    ['express', 'koa', 'egg'],\n    ['mysql', 'mongoDB', 'sequelize'],\n    ['小程序', 'mpvue', '微信公众号'],\n    ['linux', 'Docker'],\n  ],\n  description: '喜欢新事物，关注前端动态，对新的技术有追求。',\n}\n```\n## QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n## 个人小程序\n\n小程序因为资源空间和https证书到期暂时没有续期，所以暂停访问吧。\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n待完善......\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-06-28 09:49:34\ntype: \"about\"\n---\n\n## wclimb\n---\n\n> web前端开发工程师\n> 以下均为原创\n\n* Github： https://github.com/wclimb\n* Koa2-blog： http://blog.wclimb.site (博客项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=Koa2-blog&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* vue-video： http://video.wclimb.site (手机端vue项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=vue-video&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* video-admin： http://vue.wclimb.site (vue项目后台管理)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=video-admin&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n* wat： https://github.com/wclimb/wat (轻量级vue ui插件，功能还在增加)\n* react-video： http://react.wclimb.site (手机端react项目)\n* Swipe： http://www.wclimb.site/swipe (轮播插件)\n* pagination： http://www.wclimb.site/pagination (分页插件)\n* validation： http://www.wclimb.site/validation (表单验证插件)\n* lazyLoad： http://www.wclimb.site/lazyLoad (图片懒加载插件)\n* funsChat： http://chat.wclimb.site (node聊天室)\n\n## 技术栈\n\n```js\n{\n  name: 'wclimb',\n  age: 25, // +1 其实是拒绝的\n  gender: '男',\n  Github: 'https://github.com/wclimb',\n  blog: 'http://www.wclimb.site/',\n  email: 'wclimb1994@gmail.com',\n  skills: [\n    ['HTML', 'JavaScript', 'jQuery', 'Zepto', 'CSS3', 'ES6', 'Node'],\n    ['Vue', 'vuex', 'vue-router'],\n    ['React', 'redux', 'react-router'],\n    ['gulp', 'webpack'],\n    ['sass', 'less'],\n    ['git'],\n    ['express', 'koa', 'egg'],\n    ['mysql', 'mongoDB', 'sequelize'],\n    ['小程序', 'mpvue', '微信公众号'],\n    ['linux', 'Docker'],\n  ],\n  description: '喜欢新事物，关注前端动态，对新的技术有追求。',\n}\n```\n## QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n## 个人小程序\n\n小程序因为资源空间和https证书到期暂时没有续期，所以暂停访问吧。\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n待完善......\n\n\n\n","updated":"2019-12-03T09:32:27.493Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck411ns8p000459x3gp10qald","content":"<h2 id=\"wclimb\"><a href=\"#wclimb\" class=\"headerlink\" title=\"wclimb\"></a>wclimb</h2><hr>\n<blockquote>\n<p>web前端开发工程师<br>以下均为原创</p>\n</blockquote>\n<ul>\n<li>Github： <a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb</a></li>\n<li>Koa2-blog： <a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a> (博客项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=Koa2-blog&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>vue-video： <a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://video.wclimb.site</a> (手机端vue项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=vue-video&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>video-admin： <a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://vue.wclimb.site</a> (vue项目后台管理)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=video-admin&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>wat： <a href=\"https://github.com/wclimb/wat\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wat</a> (轻量级vue ui插件，功能还在增加)</li>\n<li>react-video： <a href=\"http://react.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://react.wclimb.site</a> (手机端react项目)</li>\n<li>Swipe： <a href=\"http://www.wclimb.site/swipe\">http://www.wclimb.site/swipe</a> (轮播插件)</li>\n<li>pagination： <a href=\"http://www.wclimb.site/pagination\">http://www.wclimb.site/pagination</a> (分页插件)</li>\n<li>validation： <a href=\"http://www.wclimb.site/validation\">http://www.wclimb.site/validation</a> (表单验证插件)</li>\n<li>lazyLoad： <a href=\"http://www.wclimb.site/lazyLoad\">http://www.wclimb.site/lazyLoad</a> (图片懒加载插件)</li>\n<li>funsChat： <a href=\"http://chat.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://chat.wclimb.site</a> (node聊天室)</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">25</span>, <span class=\"comment\">// +1 其实是拒绝的</span></span><br><span class=\"line\">  gender: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">  Github: <span class=\"string\">'https://github.com/wclimb'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'http://www.wclimb.site/'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'wclimb1994@gmail.com'</span>,</span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"string\">'HTML'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'jQuery'</span>, <span class=\"string\">'Zepto'</span>, <span class=\"string\">'CSS3'</span>, <span class=\"string\">'ES6'</span>, <span class=\"string\">'Node'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Vue'</span>, <span class=\"string\">'vuex'</span>, <span class=\"string\">'vue-router'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'React'</span>, <span class=\"string\">'redux'</span>, <span class=\"string\">'react-router'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'gulp'</span>, <span class=\"string\">'webpack'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'sass'</span>, <span class=\"string\">'less'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'git'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'express'</span>, <span class=\"string\">'koa'</span>, <span class=\"string\">'egg'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'mysql'</span>, <span class=\"string\">'mongoDB'</span>, <span class=\"string\">'sequelize'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'小程序'</span>, <span class=\"string\">'mpvue'</span>, <span class=\"string\">'微信公众号'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'linux'</span>, <span class=\"string\">'Docker'</span>],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  description: <span class=\"string\">'喜欢新事物，关注前端动态，对新的技术有追求。'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h2><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p>小程序因为资源空间和https证书到期暂时没有续期，所以暂停访问吧。<br><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"><br>待完善……</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wclimb\"><a href=\"#wclimb\" class=\"headerlink\" title=\"wclimb\"></a>wclimb</h2><hr>\n<blockquote>\n<p>web前端开发工程师<br>以下均为原创</p>\n</blockquote>\n<ul>\n<li>Github： <a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb</a></li>\n<li>Koa2-blog： <a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a> (博客项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=Koa2-blog&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>vue-video： <a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://video.wclimb.site</a> (手机端vue项目)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=vue-video&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>video-admin： <a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://vue.wclimb.site</a> (vue项目后台管理)<iframe src=\"https://ghbtns.com/github-btn.html?user=wclimb&repo=video-admin&type=watch&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe></li>\n<li>wat： <a href=\"https://github.com/wclimb/wat\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wat</a> (轻量级vue ui插件，功能还在增加)</li>\n<li>react-video： <a href=\"http://react.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://react.wclimb.site</a> (手机端react项目)</li>\n<li>Swipe： <a href=\"http://www.wclimb.site/swipe\">http://www.wclimb.site/swipe</a> (轮播插件)</li>\n<li>pagination： <a href=\"http://www.wclimb.site/pagination\">http://www.wclimb.site/pagination</a> (分页插件)</li>\n<li>validation： <a href=\"http://www.wclimb.site/validation\">http://www.wclimb.site/validation</a> (表单验证插件)</li>\n<li>lazyLoad： <a href=\"http://www.wclimb.site/lazyLoad\">http://www.wclimb.site/lazyLoad</a> (图片懒加载插件)</li>\n<li>funsChat： <a href=\"http://chat.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://chat.wclimb.site</a> (node聊天室)</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">25</span>, <span class=\"comment\">// +1 其实是拒绝的</span></span><br><span class=\"line\">  gender: <span class=\"string\">'男'</span>,</span><br><span class=\"line\">  Github: <span class=\"string\">'https://github.com/wclimb'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'http://www.wclimb.site/'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'wclimb1994@gmail.com'</span>,</span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"string\">'HTML'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'jQuery'</span>, <span class=\"string\">'Zepto'</span>, <span class=\"string\">'CSS3'</span>, <span class=\"string\">'ES6'</span>, <span class=\"string\">'Node'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'Vue'</span>, <span class=\"string\">'vuex'</span>, <span class=\"string\">'vue-router'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'React'</span>, <span class=\"string\">'redux'</span>, <span class=\"string\">'react-router'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'gulp'</span>, <span class=\"string\">'webpack'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'sass'</span>, <span class=\"string\">'less'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'git'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'express'</span>, <span class=\"string\">'koa'</span>, <span class=\"string\">'egg'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'mysql'</span>, <span class=\"string\">'mongoDB'</span>, <span class=\"string\">'sequelize'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'小程序'</span>, <span class=\"string\">'mpvue'</span>, <span class=\"string\">'微信公众号'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'linux'</span>, <span class=\"string\">'Docker'</span>],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  description: <span class=\"string\">'喜欢新事物，关注前端动态，对新的技术有追求。'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h2><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p>小程序因为资源空间和https证书到期暂时没有续期，所以暂停访问吧。<br><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"><br>待完善……</p>\n"},{"_content":"## Koa2-blog\n\nNode+Koa2+Mysql 搭建简易博客\n\n## 预览地址\n\nhttp://blog.wclimb.site\n\n## 写在前面\n\n本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\nps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！\n\n## 演示效果\n\n![img](http://www.wclimb.site/cdn/blog.gif)\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- koa `v2.3.0`\n- mysql `v5.7.0`\n\n## 准备工作\n\n文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 http://es6.ruanyifeng.com/ \n\n如果你已经配置好node和mysql可以跳过\n\n```\n$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本\n```\n下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456\n\n```\n进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\n\n```\n然后开启mysql\n```\n$ mysql -u root -p\t\n\n```\n输入密码之后创建`database`(数据库)，`nodesql`是我们创建的数据库\n```\n$ create database nodesql;\n```\n记住sql语句后面一定要跟`;`符号，接下来看看我们创建好的数据库列表\n\n```\n$ show databases;\n```\n![img](http://www.wclimb.site/cdn/database.png)\n\n启用创建的数据库\n```\n$ use nodesql;\n```\n查看数据库中的表\n<!-- more -->\n```\n$ show tables;\n```\n显示`Empty set (0.00 sec)`，因为我们还没有建表，稍后会用代码建表\n注释：\n这是后面建表之后的状态\n![img](http://www.wclimb.site/cdn/tables.png)\n\n## 目录结构\n\n![img](http://www.wclimb.site/cdn/item.png)\n\n- config 存放默认文件\n- lib 存放操作数据库文件\n- middlewares 存放判断登录与否文件\n- public 存放样式文件\n- routes 存放路由文件\n- views 存放模板文件\n- index 程序主文件\n- package.json 包括项目名、作者、依赖等等\n\n首先我们创建koa2-blog文件夹，然后`cd koa2-blog`\n```\n 接着使用 `npm init` 来创建package.json\n```\n接着安装包，安装之前我们使用[cnpm](https://npm.taobao.org/)安装 \n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n```\n$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs --save\n```\n各模块用处\n\n1. `koa node`框架\n2. `koa-bodyparser` 表单解析中间件\n3. `koa-mysql-session`、`koa-session-minimal` 处理数据库的中间件\n4. `koa-router` 路由中间件\n5. `koa-static` 静态资源加载中间件\n6. `ejs` 模板引擎\n7. `md5` 密码加密\n8. `moment` 时间中间件\n9. `mysql` 数据库\n10. `koa-views` 模板呈现中间件\n\n在文件夹里面新建所需文件\n\n![img](http://www.wclimb.site/cdn/view.png)\n\n\n## 首先配置config\n\n我们新建`default.js`文件 \n\n```\nconst config = {\n  // 启动端口\n  port: 3000,\n\n  // 数据库配置\n  database: {\n    DATABASE: 'nodesql',\n    USERNAME: 'root',\n    PASSWORD: '123456',\n    PORT: '3306',\n    HOST: 'localhost'\n  }\n}\n\nmodule.exports = config\n\n```\n这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用\n\n## 配置index.js文件\n`index.js`\n\n```js\nvar Koa=require('koa');\nvar path=require('path')\nvar bodyParser = require('koa-bodyparser');\nvar ejs=require('ejs');\nvar session = require('koa-session-minimal');\nvar MysqlStore = require('koa-mysql-session');\nvar config = require('./config/default.js');\nvar router=require('koa-router')\nvar views = require('koa-views')\nvar koaStatic = require('koa-static')\nvar app=new Koa()\n\n\n// session存储配置\nconst sessionMysqlConfig= {\n  user: config.database.USERNAME,\n  password: config.database.PASSWORD,\n  database: config.database.DATABASE,\n  host: config.database.HOST,\n}\n\n// 配置session中间件\napp.use(session({\n  key: 'USER_SID',\n  store: new MysqlStore(sessionMysqlConfig)\n}))\n\n\n// 配置静态资源加载中间件\napp.use(koaStatic(\n  path.join(__dirname , './public')\n))\n\n// 配置服务端模板渲染引擎中间件\napp.use(views(path.join(__dirname, './views'), {\n  extension: 'ejs'\n}))\n\n// 使用表单解析中间件\napp.use(bodyParser())\n\n// 使用新建的路由文件\n// app.use(require('./routers/signin.js').routes())\napp.use(require('./routers/signup.js').routes())\n// app.use(require('./routers/posts.js').routes())\n// app.use(require('./routers/signout.js').routes())\n\n// 监听在3000端口\napp.listen(3000)\n\nconsole.log(`listening on port ${config.port}`)\n```\n我们使用`koa-session-minimal``koa-mysql-session`来进行数据库的操作\n使用`koa-static`配置静态资源，目录设置为`public`\n使用`ejs`模板引擎\n使用`koa-bodyparser`来解析提交的表单信息\n使用`koa-router`做路由\n\n之前我们配置了default.js，我们就可以在这里使用了\n首先引入进来 var config = require('./config/default.js');\n然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。\n\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n\n## 配置lib的mysql.js文件\n\n\n关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数`query`，通过返回promise的方式以便可以方便用`.then()`来获取数据库返回的数据，然后我们定义了三个表的字段，通过`createTable`来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。\n\n> 这里只介绍注册用户insertData，后续的可以自行查看，都差不多\n\n\n```js\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users(name,pass) values(?,?);\"\n  return query( _sql, value )\n}\n```\n我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name和pass，就是用户名和密码，后面values(?,?)意思很简单，你有几个值就写几个问号，最后调用`query`函数把sql语句传进去\n\n\nlib/mysql.js\n```js\nvar mysql = require('mysql');\nvar config = require('../config/default.js')\n\nvar pool  = mysql.createPool({\n  host     : config.database.HOST,\n  user     : config.database.USERNAME,\n  password : config.database.PASSWORD,\n  database : config.database.DATABASE\n});\n\nlet query = function( sql, values ) {\n\n  return new Promise(( resolve, reject ) => {\n    pool.getConnection(function(err, connection) {\n      if (err) {\n        resolve( err )\n      } else {\n        connection.query(sql, values, ( err, rows) => {\n\n          if ( err ) {\n            reject( err )\n          } else {\n            resolve( rows )\n          }\n          connection.release()\n        })\n      }\n    })\n  })\n\n}\n\nusers=\n`create table if not exists users(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n pass VARCHAR(40) NOT NULL,\n PRIMARY KEY ( id )\n);`\n\nposts=\n`create table if not exists posts(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n title VARCHAR(40) NOT NULL,\n content  VARCHAR(40) NOT NULL,\n uid  VARCHAR(40) NOT NULL,\n moment  VARCHAR(40) NOT NULL,\n comments  VARCHAR(40) NOT NULL DEFAULT '0',\n pv  VARCHAR(40) NOT NULL DEFAULT '0',\n PRIMARY KEY ( id )\n);`\n\ncomment=\n`create table if not exists comment(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n content VARCHAR(40) NOT NULL,\n postid VARCHAR(40) NOT NULL,\n PRIMARY KEY ( id )\n);`\n\nlet createTable = function( sql ) {\n  return query( sql, [] )\n}\n\n// 建表\ncreateTable(users)\ncreateTable(posts)\ncreateTable(comment)\n\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users(name,pass) values(?,?);\"\n  return query( _sql, value )\n}\n// 发表文章\nlet insertPost = function( value ) {\n  let _sql = \"insert into posts(name,title,content,uid,moment) values(?,?,?,?,?);\"\n  return query( _sql, value )\n}\n// 更新文章评论数\nlet updatePostComment = function( value ) {\n  let _sql = \"update posts set  comments=? where id=?\"\n  return query( _sql, value )\n}\n\n// 更新浏览数\nlet updatePostPv = function( value ) {\n  let _sql = \"update posts set  pv=? where id=?\"\n  return query( _sql, value )\n}\n\n// 发表评论\nlet insertComment = function( value ) {\n  let _sql = \"insert into comment(name,content,postid) values(?,?,?);\"\n  return query( _sql, value )\n}\n// 通过名字查找用户\nlet findDataByName = function (  name ) {\n  let _sql = `\n    SELECT * from users\n      where name=\"${name}\"\n      `\n  return query( _sql)\n}\n// 通过文章的名字查找用户\nlet findDataByUser = function (  name ) {\n  let _sql = `\n    SELECT * from posts\n      where name=\"${name}\"\n      `\n  return query( _sql)\n}\n// 通过文章id查找\nlet findDataById = function (  id ) {\n  let _sql = `\n    SELECT * from posts\n      where id=\"${id}\"\n      `\n  return query( _sql)\n}\n// 通过评论id查找\nlet findCommentById = function ( id ) {\n  let _sql = `\n    SELECT * FROM comment where postid=\"${id}\"\n      `\n  return query( _sql)\n}\n\n// 查询所有文章\nlet findAllPost = function (  ) {\n  let _sql = `\n    SELECT * FROM posts\n      `\n  return query( _sql)\n}\n// 更新修改文章\nlet updatePost = function(values){\n  let _sql=`update posts set  title=?,content=? where id=?`\n  return query(_sql,values)\n}\n// 删除文章\nlet deletePost = function(id){\n  let _sql=`delete from posts where id = ${id}`\n  return query(_sql)\n}\n// 删除评论\nlet deleteComment = function(id){\n  let _sql=`delete from comment where id = ${id}`\n  return query(_sql)\n}\n// 删除所有评论\nlet deleteAllPostComment = function(id){\n  let _sql=`delete from comment where postid = ${id}`\n  return query(_sql)\n}\n// 查找\nlet findCommentLength = function(id){\n  let _sql=`select content from comment where postid in (select id from posts where id=${id})`\n  return query(_sql)\n}\n\n\n\nmodule.exports={\n  query,\n  createTable,\n  insertData,\n  findDataByName,\n  insertPost,\n  findAllPost,\n  findDataByUser,\n  findDataById,\n  insertComment,\n  findCommentById,\n  updatePost,\n  deletePost,\n  deleteComment,\n  findCommentLength,\n  updatePostComment,\n  deleteAllPostComment,\n  updatePostPv\n}\n```\n下面是我们建的表\n\n| users   | posts    |  comment  |\n| :----: | :----:   | :----: |\n|   id    |   id    |   id    |\n|   name    |   name    |   name    |\n|   pass    |   title    |   content    |\n|         | content      |   postid    |\n|         | uid      |       |\n|         | moment      |       |\n|         | comments      |       |\n|        | pv      |       |      |\n\n* id主键递增\n* name: 用户名\n* pass：密码\n* title：文章标题\n* content：文章内容和评论\n* uid：发表文章的用户id \n* moment：创建时间\n* comments：文章评论数\n* pv：文章浏览数\n* postid：文章id\n\n\n现在感觉有点枯燥，那我们先来实现一下注册吧\n\n## 实现注册页面\n\nrouters/singup.js \n\n```js\nvar router=require('koa-router')();\n\n// GET '/signup' 注册页\n\nrouter.get('/signup',async (ctx,next)=>{\n await ctx.render('signup',{\t\t\n })\n})\n\nmodule.exports=router\n```\n使用get方式得到'/signup'页面，然后渲染signup模板，这里我们还没有在写signup.ejs\n\nviews/signup.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n</body>\n</html>\n```\n我们先安装supervisor\n\n```\n$ cnpm i supervisor\n```\nsupervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序\n```\nsupervisor --harmony index\n```\n现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭\n\n## 完善注册功能\n\n首先我们来完善一下样式吧，稍微美化一下\n\npublic/index.css\n\n```css\nbody,header,ul,li,p,div,html,span,h3,a{\n\tmargin: 0;\n\tpadding: 0;\n\tcolor: #333;\n}\nbody{\n\tmargin-bottom: 20px;\n}\na{\n\ttext-decoration: none;\n}\nheader{\n\twidth: 60%;\n\tmargin: 20px auto;\n\tdisplay: -webkit-flex;\n\tdisplay: -moz-flex;\n\tdisplay: -ms-flex;\n\tdisplay: -o-flex;\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n.user_name{\n\tfont-size: 20px;\n}\n.has_user{\n\t\n}\n.has_user a,.has_user span,.none_user a{\n\tpadding: 5px 15px;\n\tbackground: #5FB878;\n\tborder-radius: 15px;\n\tcolor: #fff;\n\tcursor: pointer;\n}\n.posts{\n\tlist-style: none;\n\twidth: 60%;\n\tmargin: 0 auto;\n}\n.posts li{\n\tmargin-top: 10px;\n\tborder: 1px solid #ccc;\n\tborder-radius: 5px;\n\tposition: relative;\n\tpadding-bottom: 50px;\n}\nh3{\n\tdisplay: inline-block;\n\tpadding: 5px 10px;\n\tbackground: #1E9FFF;\n\tcolor: #fff;\n\tborder-radius: 10px;\n}\n.post_title p,.post_content p{\n\tmargin: 10px 0;\n\tbackground: #eee;\n\tpadding: 10px 20px;\n\tborder: 1px solid #ddd;\n\tborder-radius: 4px;\n}\n.post_time{\n\tposition: absolute;\n\tbottom: 5px;\n\tright: 10px;\n}\n\n.post_3{\n\tposition: absolute;\n\tbottom: 5px;\n\tleft: 10px;\n}\n.post_3 p{\n\tdisplay: inline-block;\n\tmargin-left: 5px;\n}\n.post_title{\n\tpadding: 10px 20px;\n}\n.post_content{\n\tpadding: 0 20px;\n}\n.spost{\n\twidth: 60%;\n\tmargin:0 auto;\n\tborder: 1px solid #ddd;\n\tposition: relative;\n\tpadding-bottom: 40px;\n}\n.spost_user{\n\tposition: absolute;\n\tleft: 20px;\n\tbottom: 5px;\n}\n.edit{\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 5px;\n}\n.edit p{\n\tdisplay: inline-block;\n\tmargin-left: 10px;\t\n}\n.comment_wrap{\n\twidth: 60%;\n\tmargin:20px auto;\t\n}\n.submit{\n\tdisplay: block;\n\twidth: 90px;\n\theight: 35px;\n\tline-height: 35px;\n\ttext-align: center;\n\tborder-radius: 10px;\n\tbackground: #5FB878;\n\tcursor: pointer;\n\tcolor: #fff;\n\tfloat: right;\n\tmargin-top: 20px;\n}\n.cmt_content{\n\tbackground: #eee;\n\tpadding: 20px ;\n\tposition: relative;\n}\n.cmt_name{\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 5px;\n}\n.cmt_name a{\n\tmargin-left: 10px;\n}\n.cmt_content{\n\tmargin-top: 10px;\n}\n.form{\n\tmargin:0 auto;\n\twidth: 50%;\n\tmargin-top: 20px;\n}\ntextarea{\n\twidth: 100%;\n\theight: 200px;\n\tpadding-left: 20px;\n\tfont-size: 20px;\n}\n.container{\n\twidth: 60%;\n\tmargin: 0 auto;\n}\ninput{\n\tdisplay: block;\n\twidth: 100%;\n\theight: 40px;\n\tpadding-left: 20px;\n\tfont-size: 20px;\n}\n.create label{\n\tdisplay: block;\n\tmargin: 10px 0;\n}\n.comment_wrap form{\n\twidth: 100%;\n}\n.delete_comment,.delete_post{\n\tcursor: pointer;\n}\n.delete_comment:hover,.delete_post:hover{\n\tcolor: #f60;\n}\na:hover{\n\tcolor: #f60;\n}\n```\n\n我们再把模板引擎的header和footer独立出来\n\n/views/header.ejs\n顺便引入index.css和jq\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n<body>\n\n```\n/views/footer.ejs\n\n```\n\t\n</body>\n</html>\n```\n\n修改views/signup.ejs \n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n<% include footer %>\n```\n\n修改routers/signup.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js');\n// 加密\nvar md5=require('md5')\n\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n\n\n// POST '/signup' 注册页\nrouter.post('/signup',async (ctx,next)=>{\n\tconsole.log(ctx.request.body)\n\tvar user={\n\t\tname:ctx.request.body.name,\n\t\tpass:ctx.request.body.password,\n\t\trepeatpass:ctx.request.body.repeatpass\n\t}\n\tawait userModel.findDataByName(user.name)\n\t\t\t.then(result=>{\n\t\t\t\t// var res=JSON.parse(JSON.stringify(reslut))\n\t\t\t\tconsole.log(result)\n\n\t\t\t\tif (result.length){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthrow Error('用户存在')\n\t\t\t\t\t}catch (error){\n\t\t\t\t\t\t//处理err\n\t\t\t\t\t\tconsole.log(error)\t\n\t\t\t\t\t}\t\t\t\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:1\n\t\t\t\t\t};;\t\t\t\t\n\t\t\t\t}else if (user.pass!==user.repeatpass || user.pass==''){\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:2\n\t\t\t\t\t};\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:3\n\t\t\t\t\t};\n\t\t\t\t\tconsole.log('注册成功')\n\t\t\t\t\t// ctx.session.user=ctx.request.body.name\n\t\t\t \t\tuserModel.insertData([ctx.request.body.name,md5(ctx.request.body.password)])\n\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t})\n\n})\n\n\nmodule.exports=router\n```\n- 我们使用md5实现密码加密\n- 使用我们之前说的`bodyParse`来解析提交的数据，通过`ctx.request.body`得到\n- 我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中\n- ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后`msg.data=1`的时候就代表用户存在，`msg.data`出现在后面的`signup.ejs`模板ajax请求中\n\n我们使用ajax来提交数据，方便来做成功错误的处理\n\n## 模板引擎ejs\n\n我们使用的是ejs，语法可以见[ejs官网](https://www.npmjs.com/package/ejs)\n\n之前我们写了这么一段代码\n```js\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n```\n这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了\nejs的常用标签为：\n\n- `<% code %>`：运行 JavaScript 代码，不输出\n- `<%= code %>`：显示转义后的 HTML内容\n- `<%- code %>`：显示原始 HTML 内容\n\n`<%= code %>`和`<%- code %>`的区别在于，<%= code %>不管你写什么都会原样输出，比如code为 `<strong>hello</strong>`的时候 `<%= code %>` 会显示`<strong>hello</strong>`\n而`<%- code %>`则显示加粗的hello\n\n修改/views/signup.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\t\n\t</div>\n\t<script>\n\t\t$('.submit').click(()=>{\n\t\t\tconsole.log($('.form').serialize())\n\t\t\t$.ajax({\n\t            url: \"/signup\",\n\t            data: $('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg.data == 1) {\n\t               \t\t\n\t               \t\t$('.error').text('用户名存在')\n\t               \t\t$('input').val('')\n\t               \t\tfade('.error')\n\t               }\n\t               else if (msg.data == 2){\n\t               \t\t$('.error').text('请输入重复的密码')\n\t               \t\tfade('.error')\n\t               \t\t\n\t               }\n\t               else if(msg.data == 3){\n\t               \t\t$('.success').text('注册成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t               \t\t\twindow.location.href=\"/signin\"\n\t\t  \n\t               \t\t},1000)\n\t               }\t              \n\t                //console.log($('.ui.error.message').text);\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\t\t\n\t\t})\n\t</script>\n<% include footer %>\n```\n这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中\n\n\t\t\n修改/views/header.ejs\n\n>  我们之前在/routers/signup.js get '/signup' 中 向模板传递了session参数  session:ctx.session,存取的就是用户的信息，包括用户名、登录之后的id等，之所以可以通过ctx.session获取到，因为我们在后面登录的时候已经赋值 如ctx.session.user=res[0]['name']\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa-blog</title>\n</head>\n<body>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\tuser：\n\t\t\t<% if(session.user){ %>\n\t\t\t\t <%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t未登录\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">\n\t\t\t<div class=\"error\"></div>\n\t\t\t<div class=\"success\"></div>\n\t\t</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a  href=\"/signup\">注册</a>\n\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\t<script>\n\t\tfunction fade(data){\n\t\t\tif ($(data).css('display')!=='none') {\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n       \t\telse{\n       \t\t\t$(data).show()\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n\t\t}\n\t</script>\n```\n我们可以看到，如果不存在用户，则只显示`全部文章` `注册` `登录` ,如果session.user存在则有登出的按钮\n\n我们可以看到当状态data为 3 的时候window.location.href=\"/signin\"\n为了方便跳转，我们先简单实现一下signin页面\n\n修改 /routers/signin.js\n\n```js\nvar router=require('koa-router')();\n\n// get '/signin'登录页面\nrouter.get('/signin',async (ctx,next)=>{\n\tawait ctx.render('signin',{\n\t\tsession:ctx.session,\n\t})\n})\nmodule.exports=router\n```\n\n修改 /views/signin.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\n\t</div>\n<% include footer %>\n```\n\n修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下\n\n```js\napp.use(require('./routers/signin.js').routes())\n\n```\n现在注册一下来看看效果吧\n```\n$ supervisor --harmony index\n```\n![img](/img/signup.png)\n\n我们怎么查看我们注册好的账号和密码呢？打开mysql控制台\n\n```\n$ select * from users;\n```\n这样刚刚我们注册的用户信息都出现了\n![img](/img/users.png)\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n## 登录页面\n\n修改signin\nrouters/signin.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js')\n// 加密\nvar md5=require('md5')\n\n// get '/signin'登录页面\nrouter.get('/signin',async (ctx,next)=>{\n\tawait ctx.render('signin',{\n\t\tsession:ctx.session,\n\t})\n})\n// post '/signin'登录页面\nrouter.post('/signin',async (ctx,next)=>{\n\tconsole.log(ctx.request.body)\n\tvar name=ctx.request.body.name;\n\tvar pass=ctx.request.body.password;\n\t\n\t// 这里先查找用户名存在与否，存在则判断密码正确与否，不存在就返回false\n\tawait userModel.findDataByName(name)\n\t \t.then(result =>{\n\t\t \t// console.log(reslut)\n\t\t\tvar res=JSON.parse(JSON.stringify(result))\n\t\t\tif (name === res[0]['name'] && md5(pass) === res[0]['pass']) {\n\t\t\t\tctx.body='true'\n\t\t\t\t// ctx.flash.success='登录成功!';\n\t\t\t\tctx.session.user=res[0]['name']\n\t\t\t\tctx.session.id=res[0]['id']\n\t\t\t\tconsole.log('ctx.session.id',ctx.session.id)\n\t\t\t\t// ctx.redirect('/posts')\n\t\t\t\tconsole.log('session',ctx.session)\n\t\t\t\tconsole.log('登录成功')\n\t\t\t}\t\t\t\t\n\t\t }).catch(err=>{\n\t\t \tctx.body='false'\n\t\t \tconsole.log('用户名或密码错误!')\n\t\t \t// ctx.redirect('/signin')\n\t\t })\n})\n\nmodule.exports=router\n```\n我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密\n我们可以看到登录成功返回的结果是`result` 然后处理一下 var res=JSON.parse(JSON.stringify(result))\n为什么呢？\n因为返回的结果是这样的一个数组：id：4 name：rrr  pass：...\n[ RowDataPacket { id: 4, name: 'rrr', pass: '44f437ced647ec3f40fa0841041871cd' } ]\n\n修改views/signin.ejs\nsignin.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\n\t</div>\n\t<script>\n\t\t$('.submit').click(()=>{\n\t\t\tconsole.log($('.form').serialize())\n\t\t\t$.ajax({\n\t            url: \"/signin\",\n\t            data: $('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (!msg) {\n\t               \t\t$('.error').text('用户名或密码错误')\n\t               \t\t$('input').val('')\n\t               \t\tfade('.error')\n\t               }\n\t               else{\n\t               \t\t$('.success').text('登录成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.href=\"/posts\"\n\t               \t\t},1000)    \t\n\t               }      \n\t                //console.log($('.ui.error.message').text);\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t\t\n\t\t})\n\t\t\n\t</script>\n<% include footer %>\n```\n我们增加了ajax请求，在routers/singin.js里，我们设置如果登录失败就返回false，登录成功返回true\n```\nctx.body='false'\nctx.body='true'\n```\n那我们登录成功后要做跳转，可以看到`window.location.href=\"/posts\"`跳转到posts页面\n\n## 全部文章\n\n修改routers/posts.js\n\nposts.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js')\n// 时间中间件\nvar moment=require('moment')\n\n// get '/'页面\nrouter.get('/',async (ctx,next)=>{\n\tctx.redirect('/posts')\n})\n// get '/posts'页面\nrouter.get('/posts',async (ctx,next)=>{\n\tawait ctx.render('posts',{\n\t\tsession:ctx.session\n\t})\n\t\n})\nmodule.exports=router\n```\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉\n\n修改 views/posts.ejs\n\n```\n<% include header %>\n\n\tposts\n\n<% include footer %>\n```\n现在看看登录成功之后的页面吧\n\n接下来我们事先登出页面\n\n## 登出页面\n\n修改 router/signout.js\nsignout.js\n\n```js\nvar router=require('koa-router')();\n\nrouter.get('/signout',async (ctx,next)=>{\n\tctx.session=null;\n\tconsole.log('登出成功')\n\tctx.body='true'\n\t\n})\n\nmodule.exports=router\n```\n把session设置为null即可\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉，现在把注释的路由全部取消注释就对了\n\n\n然后修改 views/header.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa-blog</title>\n</head>\n<body>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\tuser：\n\t\t\t<% if(session.user){ %>\n\t\t\t\t <%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t未登录\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">\n\t\t\t<div class=\"error\"></div>\n\t\t\t<div class=\"success\"></div>\n\t\t</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a  href=\"/signup\">注册</a>\n\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\t<script>\n\t\tfunction fade(data){\n\t\t\tif ($(data).css('display')!=='none') {\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n       \t\telse{\n       \t\t\t$(data).show()\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n\t\t}\n\t\t$('.signout').click(()=>{\n\t\t\t$.ajax({\n\t            url: \"/signout\",\n\t            type: \"GET\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg) {\n\t               \t\t$('.success').text('登出成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.href=\"/posts\"\n\t               \t\t},1000)      \t\n\t               }\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t})\n\t</script>\n```\n增加点击登出后的ajax 的提交，成功之后回到posts页面\n\n## 发表文章\n\n修改router/posts\n在后面增加\n```js\n// get '/create'\nrouter.get('/create',async (ctx,next)=>{\n\tawait ctx.render('create',{\n\t\tsession:ctx.session,\n\t})\n})\n\n// psot '/create'\nrouter.post('/create',async (ctx,next)=>{\n\t\n\tconsole.log(ctx.session.user)\t\n\tvar title=ctx.request.body.title\n\tvar content=ctx.request.body.content\n\tvar id=ctx.session.id\n\tvar name=ctx.session.user\n\tvar time=moment().format('YYYY-MM-DD HH:mm')\n\tconsole.log([name,title,content,id,time])\n\t// 这里我们向数据库插入用户名、标题、内容、发表文章用户的id、时间，成功返回true，失败为false\n\tawait userModel.insertPost([name,title,content,id,time])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\n})\n```\n\n修改 views/create.ejs\n\ncreate.ejs\n\n```html\n<% include header %>\n<div class=\"container\">\n\t<form method=\"post\" class=\"form create\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"\" type=\"text\" name=\"title\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\"></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">发表</div>\n\t</form>\n</div>\t\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: \"/create\",\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\t$('.success').text('发表成功')\n               \t\tfade('.success')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }else{\n                  $('.success').text('发表失败')\n                  fade('.success')\n                  setTimeout(()=>{\n                    window.location.reload()\n                  },1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\t\t\n\t})\n</script>\n<% include footer %>\n```\n现在看看能不能发表吧\n\n即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据\n\n接下来\n\n修改 routers/posts.js\n\n修改 get '/posts'\n\n```js\nrouter.get('/posts',async (ctx,next)=>{\n\t\n\t// 这里我们先通过查找有没有类似/posts?author=XXX 的连接跳转，如果有就执行下面这句话，把用户名取下来，由于用户名存在中文，所以我们进行解码\n\tif (ctx.request.querystring) {\n\t\tconsole.log('ctx.request.querystring',decodeURIComponent(ctx.request.querystring.split('=')[1]))\n\t\tawait userModel.findDataByUser(decodeURIComponent(ctx.request.querystring.split('=')[1]))\n\t\t\t.then(result=>{\n\t\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\t\tconsole.log(res)\n\t\t\t})\n\t\tawait ctx.render('posts',{\n\t\t\t\tsession:ctx.session,\n\t\t\t\tposts:res\t\n\t\t\t})\n\t}else{\n\t\t// 如果连接是正常的 如 /posts 则我们获取的是全部文章的列表，所以通过findAllPost查找全部文章并向模板传递数据posts， posts的值为res\n\t\tawait userModel.findAllPost()\n\t\t\t.then(result=>{\n\t\t\t\tconsole.log(result)\n\t\t\t\tres=JSON.parse(JSON.stringify(result)) \n\t\t\t\tconsole.log('post',res)\n\t\t\t})\n\t\tawait ctx.render('posts',{\n\t\t\tsession:ctx.session,\n\t\t\tposts:res\t\n\t\t})\n\t}\n})\n\n```\nif (ctx.request.querystring) {}这部分我们先不用管，后面会说。只需要看else后面的代码我们查找我们发表的全部文章然后将获取到的值定义为posts，传给模板posts.ejs，这样就可以渲染出来了\n\n修改 Views/posts.ejs\n\nposts.ejs\n\n```html\n<% include header %>\n\t<ul class=\"posts\">\n\t\t<% posts.forEach(function(res){ %>\n\t\t\t<li>\n\t\t\t\t<div class=\"post_3\">\n\t\t\t\t\t<p class=\"post_user\"><a href=\"/posts?author=<%= res['name'] %>\">作者: <%= res['name'] %></a></p>\n\t\t\t\t\t<p class=\"post_comments\">评论数：<%= res['comments'] %></p>\n\t\t\t\t\t<p class=\"post_pv\">浏览数：<%= res['pv'] %></p>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"/posts/<%= res['id'] %>\">\n\t\t\t\t\t<div class=\"post_title\">\n\t\t\t\t\t\t<h3>title</h3>\n\t\t\t\t\t\t<p><%= res['title'] %></p>\n\t\t\t\t\t</div>\t\n\t\t\t\t\t<div class=\"post_content\">\n\t\t\t\t\t\t<h3>content</h3>\n\t\t\t\t\t\t<p><%= res['content'] %></p>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\t\t\n\t\t\t\t<p class=\"post_time\">发表时间：<%= res['moment'] %></p>\n\t\t\t</li>\n\t\t<% }) %>\t\n\t</ul>\n<% include footer %>\n```\n现在看看posts页面有没有文章出现了\n\n我们看到是所有的文章，但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？\n\n修改 routers/posts.js\n\n在posts.js后面增加\n\n```js\nrouter.get('/posts/:postId',async (ctx,next)=>{\n\tconsole.log(ctx.params.postId)\n\t// 通过文章id查找返回数据，然后增加pv 浏览 +1 \n\tawait userModel.findDataById(ctx.params.postId)\n\t\t.then(result=>{\n\t\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\t\tres_pv=parseInt(JSON.parse(JSON.stringify(result))[0]['pv'])\n\t\t\t\tres_pv+=1\n\t\t\t\tconsole.log(res)\n\t\t\t})\n\t\n\t// 渲染模板，并传递三个数据\t\t\n\tawait ctx.render('sPost',{\n\t\t\t\tsession:ctx.session,\n\t\t\t\tposts:res\n\t\t\t})\n})\n```\n\n现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增\n\n我们通过userModel.findDataById 文章的id来查找数据库\n我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能\n\n## 单篇文章页\n\n修改 views/sPost.ejs\n\nsPost.ejs\n\n```html\n<% include header %>\t\n\t<div class=\"spost\">\n\t\t<p class=\"spost_user\">author: <a href=\"/posts?author=<%= posts[0]['name'] %>\"><%= posts[0]['name'] %></a></p>\n\t\t<div class=\"post_title\">\n\t\t\t<h3>title</h3>\n\t\t\t<p><a href=\"/posts/<%= posts[0]['id'] %>\"><%= posts[0]['title'] %></a></p>\n\t\t</div>\n\t\t<div class=\"post_content\">\n\t\t\t<h3>content</h3>\n\t\t\t<p><%= posts[0]['content'] %></p>\n\t\t</div>\n\t\t<div class=\"edit\">\n\t\t\t<% if(session && session.user===  posts[0]['name']  ){ %>\n\t\t\t<p><a href=\"<%= posts[0]['id'] %>/edit\">编辑</a></p>\n\t\t\t<p><a class=\"delete_post\" >删除</a></p>\n\t\t\t<% } %>\n\t\t\t<script>\n\t\t\t\t$('.delete_post').click(()=>{\n\t\t\t\t\t$.ajax({\n\t\t\t\t\t\turl:\"<%= posts[0]['id'] %>/remove\",\n\t\t\t\t\t\ttype:'GET',\n\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\tsuccess:function(msg){\n\t\t\t\t\t\t\tif (msg.data==1) {\n\t\t\t\t\t\t\t\t$('.success').text('删除文章成功')\n               \t\t\t\t\tfade('.success')\n               \t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t               \t\twindow.location.href=\"/posts\"\t\n               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t}else if(msg.data==2){\n\t\t\t\t\t\t\t\t$('.error').text('删除文章失败')\n               \t\t\t\t\tfade('.error');\n               \t\t\t\t\tsetTimeout(()=>{\n\t               \t\t\t\t\twindow.location.reload()\n               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t</script>\n\t\t</div>\n\t</div>\n\t<div class=\"comment_wrap\">\n\t\t<h3>comment</h3>\n\t\t<div class=\"comment_list\">\n\t\t\t<% comments.forEach(function(res){ %>\n\t\t\t\t<div class=\"cmt_lists\">\n\t\t\t\t\t<p></p>\n\t\t\t\t\t<p class=\"cmt_content\">\n\t\t\t\t\t\tcontent: <%= res['content'] %>\n\t\t\t\t\t\t<span class=\"cmt_name\">\n\t\t\t\t\t\t\tBy: <%= res['name'] %>\n\t\t\t\t\t\t\t<% if(session && session.user ===  res['name']  ){ %>\n\t\t\t\t\t\t\t\t<a class=\"delete_comment\"> 删除</a>\n\t\t\t\t\t\t\t<% } %>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<script>\n\t\t\t\t\t$('.delete_comment').click(()=>{\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\turl:\"<%= posts[0]['id'] %>/comment/<%= res['id'] %>/remove\",\n\t\t\t\t\t\t\ttype:'GET',\n\t\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\t\tsuccess:function(msg){\n\t\t\t\t\t\t\t\tif (msg.data==1) {\n\t\t\t\t\t\t\t\t\t$('.success').text('删除留言成功')\n\t               \t\t\t\t\tfade('.success')\n\t               \t\t\t\t\tsetTimeout(()=>{\n\t\t               \t\t\t\t\twindow.location.reload()\n\t               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t\t}else if(msg.data==2){\n\t\t\t\t\t\t\t\t\t$('.error').text('删除留言失败')\n\t               \t\t\t\t\tfade('.error');\n\t               \t\t\t\t\tsetTimeout(()=>{\n\t\t               \t\t\t\t\twindow.location.reload()\n\t               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror:function(){\n\t\t\t\t\t\t\t\talert('异常')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t</script>\n\t\t\t<% }) %>\n\t\t</div>\t\n\t\t<% if(session.user){ %>\n\t\t<form class=\"form\" method=\"post\" action=\"/<%= posts[0]['id'] %>\">\n\t\t\t<textarea name=\"content\" id=\"\"></textarea>\n\t\t\t<div class=\"submit\">发表留言</div>\n\t\t</form>\n\t\t<% } %>\n\t</div>\n\t<script>\n\t\t$('.submit').click(function(){\n\t\t\t$.ajax({\n\t            url: '/'+document.URL.slice(document.URL.lastIndexOf('/')+1),\n\t            data:$('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg) {\n\t               \t\t$('.success').text('发表留言成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.reload()\n\t               \t\t},1000)  \t\n\t               }\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t})\n\t</script>\t\n<% include footer %>\n\n```\n现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户发表的文章列表，我们之前在 get '/posts' 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了应该处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了`ctx.request.querystring` 获取到的是：`author=XXX`\n\n注：这里我们处理了，通过判断 `session.user ===  res['name']` 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的`<a href=\"\"></a>`标签\n\n\n## 编辑文章、删除文章、评论、删除评论\n\n> 评论\n\n修改routers/posts.js \n\n在post.js 后面增加\n\n```js\nrouter.post('/:postId',async (ctx,next)=>{\n\tvar name=ctx.session.user\n\tvar content=ctx.request.body.content\n\tvar postId=ctx.params.postId\n\t\n\t// 插入评论的用户名，内容和文章id\n\tawait userModel.insertComment([name,content,postId])\n\t// 先通过文章id查找，然后评论数+1\n\tawait userModel.findDataById(postId)\n\t\t\t.then(result=>{\n\t\t\t\tres_comments=parseInt(JSON.parse(JSON.stringify(result))[0]['comments'])\n\t\t\t\tres_comments+=1\n\t\t\t})\n\t// 更新评论数 res_comments\n\tawait userModel.updatePostComment([res_comments,postId])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\t\n})\n```\n现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此\n\n> 删除评论\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\nrouter.get('/posts/:postId/comment/:commentId/remove',async (ctx,next)=>{\n\t\n\tvar postId=ctx.params.postId\n\tvar commentId=ctx.params.commentId\n\tawait userModel.findDataById(postId)\n\t\t\t.then(result=>{\n\t\t\t\tres_comments=parseInt(JSON.parse(JSON.stringify(result))[0]['comments'])\n\t\t\t\tconsole.log('res',res_comments)\n\t\t\t\tres_comments-=1\n\t\t\t\tconsole.log(res_comments)\n\t\t\t})\n\tawait userModel.updatePostComment([res_comments,postId])\n\tawait userModel.deleteComment(commentId)\n\t\t.then(()=>{\n\t\t\t ctx.body={\n\t\t\t \tdata:1\n\t\t\t }\n\t\t}).catch(()=>{\n\t\t\t  ctx.body={\n\t\t\t \tdata:2\n\t\t\t }\n\t\t})\n})\n```\n现在试试删除评论的功能吧\n\n> 删除文章\n\n只有自己发表的文字删除的文字才会显示出来，才能被删除，\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\nrouter.get('/posts/:postId/remove',async (ctx,next)=>{\n\t\n\tvar postId=ctx.params.postId\n\t\n\tawait userModel.deleteAllPostComment(postId)\n\tawait userModel.deletePost(postId)\n\t\t.then(()=>{\n\t\t\t ctx.body={\n\t\t\t \tdata:1\n\t\t\t }\t\n\t\t}).catch(()=>{\n\t\t\tctx.body={\n\t\t\t \tdata:2\n\t\t\t }\n\t\t})\n\t\n})\n```\n现在试试删除文章的功能吧\n\n> 编辑文字\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// get '/posts/:postId/edit'\nrouter.get('/posts/:postId/edit',async (ctx,next)=>{\n\tvar name=ctx.session.user\n\tvar postId=ctx.params.postId\n\t\n\tawait userModel.findDataById(postId)\n\t\t.then(result=>{\n\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\tconsole.log('修改文章',res)\n\t\t})\n\tawait ctx.render('edit',{\n\t\t\tsession:ctx.session,\n\t\t\tposts:res\n\t\t})\n})\n// post '/posts/:postId/edit'\nrouter.post('/posts/:postId/edit',async (ctx,next)=>{\n\tvar title=ctx.request.body.title\n\tvar content=ctx.request.body.content\n\tvar id=ctx.session.id\n\tvar postId=ctx.params.postId\n\t\t\n\tawait userModel.updatePost([title,content,postId])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\n})\n```\n\n修改views/edit.js \n\n```html\n<% include header %>\n<div class=\"container\">\n\t<form class=\"form create\" method=\"post\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"标题\" type=\"text\" name=\"title\" value=\"<%= posts[0]['title'] %>\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\">\n\t\t\t\t<%= posts[0]['content'] %>\n\t\t\t</textarea>\n\t\t</div>\n\t\t<!-- <input type=\"submit\" value=\"修改\"> -->\n\t\t<div class=\"submit\">修改</div>\n\t</form>\n</div>\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: document.URL,\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\t$('.success').text('修改成功')\n               \t\tfade('.success')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\n\t})\n</script>\n<% include footer %>\n```\n\n现在试试编辑文字然后修改提交吧\n\n## 结语 \n\n至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的\n\n所有的代码都在 https://github.com/wclimb/Koa2-blog 里面，如果觉得不错就star一下吧。有问题可以提问哟\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^","source":"img/copy.md","raw":"## Koa2-blog\n\nNode+Koa2+Mysql 搭建简易博客\n\n## 预览地址\n\nhttp://blog.wclimb.site\n\n## 写在前面\n\n本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\nps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！\n\n## 演示效果\n\n![img](http://www.wclimb.site/cdn/blog.gif)\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- koa `v2.3.0`\n- mysql `v5.7.0`\n\n## 准备工作\n\n文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 http://es6.ruanyifeng.com/ \n\n如果你已经配置好node和mysql可以跳过\n\n```\n$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本\n```\n下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456\n\n```\n进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\n\n```\n然后开启mysql\n```\n$ mysql -u root -p\t\n\n```\n输入密码之后创建`database`(数据库)，`nodesql`是我们创建的数据库\n```\n$ create database nodesql;\n```\n记住sql语句后面一定要跟`;`符号，接下来看看我们创建好的数据库列表\n\n```\n$ show databases;\n```\n![img](http://www.wclimb.site/cdn/database.png)\n\n启用创建的数据库\n```\n$ use nodesql;\n```\n查看数据库中的表\n<!-- more -->\n```\n$ show tables;\n```\n显示`Empty set (0.00 sec)`，因为我们还没有建表，稍后会用代码建表\n注释：\n这是后面建表之后的状态\n![img](http://www.wclimb.site/cdn/tables.png)\n\n## 目录结构\n\n![img](http://www.wclimb.site/cdn/item.png)\n\n- config 存放默认文件\n- lib 存放操作数据库文件\n- middlewares 存放判断登录与否文件\n- public 存放样式文件\n- routes 存放路由文件\n- views 存放模板文件\n- index 程序主文件\n- package.json 包括项目名、作者、依赖等等\n\n首先我们创建koa2-blog文件夹，然后`cd koa2-blog`\n```\n 接着使用 `npm init` 来创建package.json\n```\n接着安装包，安装之前我们使用[cnpm](https://npm.taobao.org/)安装 \n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n```\n$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs --save\n```\n各模块用处\n\n1. `koa node`框架\n2. `koa-bodyparser` 表单解析中间件\n3. `koa-mysql-session`、`koa-session-minimal` 处理数据库的中间件\n4. `koa-router` 路由中间件\n5. `koa-static` 静态资源加载中间件\n6. `ejs` 模板引擎\n7. `md5` 密码加密\n8. `moment` 时间中间件\n9. `mysql` 数据库\n10. `koa-views` 模板呈现中间件\n\n在文件夹里面新建所需文件\n\n![img](http://www.wclimb.site/cdn/view.png)\n\n\n## 首先配置config\n\n我们新建`default.js`文件 \n\n```\nconst config = {\n  // 启动端口\n  port: 3000,\n\n  // 数据库配置\n  database: {\n    DATABASE: 'nodesql',\n    USERNAME: 'root',\n    PASSWORD: '123456',\n    PORT: '3306',\n    HOST: 'localhost'\n  }\n}\n\nmodule.exports = config\n\n```\n这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用\n\n## 配置index.js文件\n`index.js`\n\n```js\nvar Koa=require('koa');\nvar path=require('path')\nvar bodyParser = require('koa-bodyparser');\nvar ejs=require('ejs');\nvar session = require('koa-session-minimal');\nvar MysqlStore = require('koa-mysql-session');\nvar config = require('./config/default.js');\nvar router=require('koa-router')\nvar views = require('koa-views')\nvar koaStatic = require('koa-static')\nvar app=new Koa()\n\n\n// session存储配置\nconst sessionMysqlConfig= {\n  user: config.database.USERNAME,\n  password: config.database.PASSWORD,\n  database: config.database.DATABASE,\n  host: config.database.HOST,\n}\n\n// 配置session中间件\napp.use(session({\n  key: 'USER_SID',\n  store: new MysqlStore(sessionMysqlConfig)\n}))\n\n\n// 配置静态资源加载中间件\napp.use(koaStatic(\n  path.join(__dirname , './public')\n))\n\n// 配置服务端模板渲染引擎中间件\napp.use(views(path.join(__dirname, './views'), {\n  extension: 'ejs'\n}))\n\n// 使用表单解析中间件\napp.use(bodyParser())\n\n// 使用新建的路由文件\n// app.use(require('./routers/signin.js').routes())\napp.use(require('./routers/signup.js').routes())\n// app.use(require('./routers/posts.js').routes())\n// app.use(require('./routers/signout.js').routes())\n\n// 监听在3000端口\napp.listen(3000)\n\nconsole.log(`listening on port ${config.port}`)\n```\n我们使用`koa-session-minimal``koa-mysql-session`来进行数据库的操作\n使用`koa-static`配置静态资源，目录设置为`public`\n使用`ejs`模板引擎\n使用`koa-bodyparser`来解析提交的表单信息\n使用`koa-router`做路由\n\n之前我们配置了default.js，我们就可以在这里使用了\n首先引入进来 var config = require('./config/default.js');\n然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。\n\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n\n## 配置lib的mysql.js文件\n\n\n关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数`query`，通过返回promise的方式以便可以方便用`.then()`来获取数据库返回的数据，然后我们定义了三个表的字段，通过`createTable`来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。\n\n> 这里只介绍注册用户insertData，后续的可以自行查看，都差不多\n\n\n```js\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users(name,pass) values(?,?);\"\n  return query( _sql, value )\n}\n```\n我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name和pass，就是用户名和密码，后面values(?,?)意思很简单，你有几个值就写几个问号，最后调用`query`函数把sql语句传进去\n\n\nlib/mysql.js\n```js\nvar mysql = require('mysql');\nvar config = require('../config/default.js')\n\nvar pool  = mysql.createPool({\n  host     : config.database.HOST,\n  user     : config.database.USERNAME,\n  password : config.database.PASSWORD,\n  database : config.database.DATABASE\n});\n\nlet query = function( sql, values ) {\n\n  return new Promise(( resolve, reject ) => {\n    pool.getConnection(function(err, connection) {\n      if (err) {\n        resolve( err )\n      } else {\n        connection.query(sql, values, ( err, rows) => {\n\n          if ( err ) {\n            reject( err )\n          } else {\n            resolve( rows )\n          }\n          connection.release()\n        })\n      }\n    })\n  })\n\n}\n\nusers=\n`create table if not exists users(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n pass VARCHAR(40) NOT NULL,\n PRIMARY KEY ( id )\n);`\n\nposts=\n`create table if not exists posts(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n title VARCHAR(40) NOT NULL,\n content  VARCHAR(40) NOT NULL,\n uid  VARCHAR(40) NOT NULL,\n moment  VARCHAR(40) NOT NULL,\n comments  VARCHAR(40) NOT NULL DEFAULT '0',\n pv  VARCHAR(40) NOT NULL DEFAULT '0',\n PRIMARY KEY ( id )\n);`\n\ncomment=\n`create table if not exists comment(\n id INT NOT NULL AUTO_INCREMENT,\n name VARCHAR(100) NOT NULL,\n content VARCHAR(40) NOT NULL,\n postid VARCHAR(40) NOT NULL,\n PRIMARY KEY ( id )\n);`\n\nlet createTable = function( sql ) {\n  return query( sql, [] )\n}\n\n// 建表\ncreateTable(users)\ncreateTable(posts)\ncreateTable(comment)\n\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users(name,pass) values(?,?);\"\n  return query( _sql, value )\n}\n// 发表文章\nlet insertPost = function( value ) {\n  let _sql = \"insert into posts(name,title,content,uid,moment) values(?,?,?,?,?);\"\n  return query( _sql, value )\n}\n// 更新文章评论数\nlet updatePostComment = function( value ) {\n  let _sql = \"update posts set  comments=? where id=?\"\n  return query( _sql, value )\n}\n\n// 更新浏览数\nlet updatePostPv = function( value ) {\n  let _sql = \"update posts set  pv=? where id=?\"\n  return query( _sql, value )\n}\n\n// 发表评论\nlet insertComment = function( value ) {\n  let _sql = \"insert into comment(name,content,postid) values(?,?,?);\"\n  return query( _sql, value )\n}\n// 通过名字查找用户\nlet findDataByName = function (  name ) {\n  let _sql = `\n    SELECT * from users\n      where name=\"${name}\"\n      `\n  return query( _sql)\n}\n// 通过文章的名字查找用户\nlet findDataByUser = function (  name ) {\n  let _sql = `\n    SELECT * from posts\n      where name=\"${name}\"\n      `\n  return query( _sql)\n}\n// 通过文章id查找\nlet findDataById = function (  id ) {\n  let _sql = `\n    SELECT * from posts\n      where id=\"${id}\"\n      `\n  return query( _sql)\n}\n// 通过评论id查找\nlet findCommentById = function ( id ) {\n  let _sql = `\n    SELECT * FROM comment where postid=\"${id}\"\n      `\n  return query( _sql)\n}\n\n// 查询所有文章\nlet findAllPost = function (  ) {\n  let _sql = `\n    SELECT * FROM posts\n      `\n  return query( _sql)\n}\n// 更新修改文章\nlet updatePost = function(values){\n  let _sql=`update posts set  title=?,content=? where id=?`\n  return query(_sql,values)\n}\n// 删除文章\nlet deletePost = function(id){\n  let _sql=`delete from posts where id = ${id}`\n  return query(_sql)\n}\n// 删除评论\nlet deleteComment = function(id){\n  let _sql=`delete from comment where id = ${id}`\n  return query(_sql)\n}\n// 删除所有评论\nlet deleteAllPostComment = function(id){\n  let _sql=`delete from comment where postid = ${id}`\n  return query(_sql)\n}\n// 查找\nlet findCommentLength = function(id){\n  let _sql=`select content from comment where postid in (select id from posts where id=${id})`\n  return query(_sql)\n}\n\n\n\nmodule.exports={\n  query,\n  createTable,\n  insertData,\n  findDataByName,\n  insertPost,\n  findAllPost,\n  findDataByUser,\n  findDataById,\n  insertComment,\n  findCommentById,\n  updatePost,\n  deletePost,\n  deleteComment,\n  findCommentLength,\n  updatePostComment,\n  deleteAllPostComment,\n  updatePostPv\n}\n```\n下面是我们建的表\n\n| users   | posts    |  comment  |\n| :----: | :----:   | :----: |\n|   id    |   id    |   id    |\n|   name    |   name    |   name    |\n|   pass    |   title    |   content    |\n|         | content      |   postid    |\n|         | uid      |       |\n|         | moment      |       |\n|         | comments      |       |\n|        | pv      |       |      |\n\n* id主键递增\n* name: 用户名\n* pass：密码\n* title：文章标题\n* content：文章内容和评论\n* uid：发表文章的用户id \n* moment：创建时间\n* comments：文章评论数\n* pv：文章浏览数\n* postid：文章id\n\n\n现在感觉有点枯燥，那我们先来实现一下注册吧\n\n## 实现注册页面\n\nrouters/singup.js \n\n```js\nvar router=require('koa-router')();\n\n// GET '/signup' 注册页\n\nrouter.get('/signup',async (ctx,next)=>{\n await ctx.render('signup',{\t\t\n })\n})\n\nmodule.exports=router\n```\n使用get方式得到'/signup'页面，然后渲染signup模板，这里我们还没有在写signup.ejs\n\nviews/signup.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n</body>\n</html>\n```\n我们先安装supervisor\n\n```\n$ cnpm i supervisor\n```\nsupervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序\n```\nsupervisor --harmony index\n```\n现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭\n\n## 完善注册功能\n\n首先我们来完善一下样式吧，稍微美化一下\n\npublic/index.css\n\n```css\nbody,header,ul,li,p,div,html,span,h3,a{\n\tmargin: 0;\n\tpadding: 0;\n\tcolor: #333;\n}\nbody{\n\tmargin-bottom: 20px;\n}\na{\n\ttext-decoration: none;\n}\nheader{\n\twidth: 60%;\n\tmargin: 20px auto;\n\tdisplay: -webkit-flex;\n\tdisplay: -moz-flex;\n\tdisplay: -ms-flex;\n\tdisplay: -o-flex;\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n.user_name{\n\tfont-size: 20px;\n}\n.has_user{\n\t\n}\n.has_user a,.has_user span,.none_user a{\n\tpadding: 5px 15px;\n\tbackground: #5FB878;\n\tborder-radius: 15px;\n\tcolor: #fff;\n\tcursor: pointer;\n}\n.posts{\n\tlist-style: none;\n\twidth: 60%;\n\tmargin: 0 auto;\n}\n.posts li{\n\tmargin-top: 10px;\n\tborder: 1px solid #ccc;\n\tborder-radius: 5px;\n\tposition: relative;\n\tpadding-bottom: 50px;\n}\nh3{\n\tdisplay: inline-block;\n\tpadding: 5px 10px;\n\tbackground: #1E9FFF;\n\tcolor: #fff;\n\tborder-radius: 10px;\n}\n.post_title p,.post_content p{\n\tmargin: 10px 0;\n\tbackground: #eee;\n\tpadding: 10px 20px;\n\tborder: 1px solid #ddd;\n\tborder-radius: 4px;\n}\n.post_time{\n\tposition: absolute;\n\tbottom: 5px;\n\tright: 10px;\n}\n\n.post_3{\n\tposition: absolute;\n\tbottom: 5px;\n\tleft: 10px;\n}\n.post_3 p{\n\tdisplay: inline-block;\n\tmargin-left: 5px;\n}\n.post_title{\n\tpadding: 10px 20px;\n}\n.post_content{\n\tpadding: 0 20px;\n}\n.spost{\n\twidth: 60%;\n\tmargin:0 auto;\n\tborder: 1px solid #ddd;\n\tposition: relative;\n\tpadding-bottom: 40px;\n}\n.spost_user{\n\tposition: absolute;\n\tleft: 20px;\n\tbottom: 5px;\n}\n.edit{\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 5px;\n}\n.edit p{\n\tdisplay: inline-block;\n\tmargin-left: 10px;\t\n}\n.comment_wrap{\n\twidth: 60%;\n\tmargin:20px auto;\t\n}\n.submit{\n\tdisplay: block;\n\twidth: 90px;\n\theight: 35px;\n\tline-height: 35px;\n\ttext-align: center;\n\tborder-radius: 10px;\n\tbackground: #5FB878;\n\tcursor: pointer;\n\tcolor: #fff;\n\tfloat: right;\n\tmargin-top: 20px;\n}\n.cmt_content{\n\tbackground: #eee;\n\tpadding: 20px ;\n\tposition: relative;\n}\n.cmt_name{\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 5px;\n}\n.cmt_name a{\n\tmargin-left: 10px;\n}\n.cmt_content{\n\tmargin-top: 10px;\n}\n.form{\n\tmargin:0 auto;\n\twidth: 50%;\n\tmargin-top: 20px;\n}\ntextarea{\n\twidth: 100%;\n\theight: 200px;\n\tpadding-left: 20px;\n\tfont-size: 20px;\n}\n.container{\n\twidth: 60%;\n\tmargin: 0 auto;\n}\ninput{\n\tdisplay: block;\n\twidth: 100%;\n\theight: 40px;\n\tpadding-left: 20px;\n\tfont-size: 20px;\n}\n.create label{\n\tdisplay: block;\n\tmargin: 10px 0;\n}\n.comment_wrap form{\n\twidth: 100%;\n}\n.delete_comment,.delete_post{\n\tcursor: pointer;\n}\n.delete_comment:hover,.delete_post:hover{\n\tcolor: #f60;\n}\na:hover{\n\tcolor: #f60;\n}\n```\n\n我们再把模板引擎的header和footer独立出来\n\n/views/header.ejs\n顺便引入index.css和jq\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n<body>\n\n```\n/views/footer.ejs\n\n```\n\t\n</body>\n</html>\n```\n\n修改views/signup.ejs \n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n<% include footer %>\n```\n\n修改routers/signup.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js');\n// 加密\nvar md5=require('md5')\n\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n\n\n// POST '/signup' 注册页\nrouter.post('/signup',async (ctx,next)=>{\n\tconsole.log(ctx.request.body)\n\tvar user={\n\t\tname:ctx.request.body.name,\n\t\tpass:ctx.request.body.password,\n\t\trepeatpass:ctx.request.body.repeatpass\n\t}\n\tawait userModel.findDataByName(user.name)\n\t\t\t.then(result=>{\n\t\t\t\t// var res=JSON.parse(JSON.stringify(reslut))\n\t\t\t\tconsole.log(result)\n\n\t\t\t\tif (result.length){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthrow Error('用户存在')\n\t\t\t\t\t}catch (error){\n\t\t\t\t\t\t//处理err\n\t\t\t\t\t\tconsole.log(error)\t\n\t\t\t\t\t}\t\t\t\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:1\n\t\t\t\t\t};;\t\t\t\t\n\t\t\t\t}else if (user.pass!==user.repeatpass || user.pass==''){\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:2\n\t\t\t\t\t};\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tctx.body={\n\t\t\t\t\t\tdata:3\n\t\t\t\t\t};\n\t\t\t\t\tconsole.log('注册成功')\n\t\t\t\t\t// ctx.session.user=ctx.request.body.name\n\t\t\t \t\tuserModel.insertData([ctx.request.body.name,md5(ctx.request.body.password)])\n\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t})\n\n})\n\n\nmodule.exports=router\n```\n- 我们使用md5实现密码加密\n- 使用我们之前说的`bodyParse`来解析提交的数据，通过`ctx.request.body`得到\n- 我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中\n- ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后`msg.data=1`的时候就代表用户存在，`msg.data`出现在后面的`signup.ejs`模板ajax请求中\n\n我们使用ajax来提交数据，方便来做成功错误的处理\n\n## 模板引擎ejs\n\n我们使用的是ejs，语法可以见[ejs官网](https://www.npmjs.com/package/ejs)\n\n之前我们写了这么一段代码\n```js\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n```\n这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了\nejs的常用标签为：\n\n- `<% code %>`：运行 JavaScript 代码，不输出\n- `<%= code %>`：显示转义后的 HTML内容\n- `<%- code %>`：显示原始 HTML 内容\n\n`<%= code %>`和`<%- code %>`的区别在于，<%= code %>不管你写什么都会原样输出，比如code为 `<strong>hello</strong>`的时候 `<%= code %>` 会显示`<strong>hello</strong>`\n而`<%- code %>`则显示加粗的hello\n\n修改/views/signup.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\t\n\t</div>\n\t<script>\n\t\t$('.submit').click(()=>{\n\t\t\tconsole.log($('.form').serialize())\n\t\t\t$.ajax({\n\t            url: \"/signup\",\n\t            data: $('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg.data == 1) {\n\t               \t\t\n\t               \t\t$('.error').text('用户名存在')\n\t               \t\t$('input').val('')\n\t               \t\tfade('.error')\n\t               }\n\t               else if (msg.data == 2){\n\t               \t\t$('.error').text('请输入重复的密码')\n\t               \t\tfade('.error')\n\t               \t\t\n\t               }\n\t               else if(msg.data == 3){\n\t               \t\t$('.success').text('注册成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t               \t\t\twindow.location.href=\"/signin\"\n\t\t  \n\t               \t\t},1000)\n\t               }\t              \n\t                //console.log($('.ui.error.message').text);\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\t\t\n\t\t})\n\t</script>\n<% include footer %>\n```\n这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中\n\n\t\t\n修改/views/header.ejs\n\n>  我们之前在/routers/signup.js get '/signup' 中 向模板传递了session参数  session:ctx.session,存取的就是用户的信息，包括用户名、登录之后的id等，之所以可以通过ctx.session获取到，因为我们在后面登录的时候已经赋值 如ctx.session.user=res[0]['name']\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa-blog</title>\n</head>\n<body>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\tuser：\n\t\t\t<% if(session.user){ %>\n\t\t\t\t <%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t未登录\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">\n\t\t\t<div class=\"error\"></div>\n\t\t\t<div class=\"success\"></div>\n\t\t</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a  href=\"/signup\">注册</a>\n\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\t<script>\n\t\tfunction fade(data){\n\t\t\tif ($(data).css('display')!=='none') {\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n       \t\telse{\n       \t\t\t$(data).show()\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n\t\t}\n\t</script>\n```\n我们可以看到，如果不存在用户，则只显示`全部文章` `注册` `登录` ,如果session.user存在则有登出的按钮\n\n我们可以看到当状态data为 3 的时候window.location.href=\"/signin\"\n为了方便跳转，我们先简单实现一下signin页面\n\n修改 /routers/signin.js\n\n```js\nvar router=require('koa-router')();\n\n// get '/signin'登录页面\nrouter.get('/signin',async (ctx,next)=>{\n\tawait ctx.render('signin',{\n\t\tsession:ctx.session,\n\t})\n})\nmodule.exports=router\n```\n\n修改 /views/signin.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\n\t</div>\n<% include footer %>\n```\n\n修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下\n\n```js\napp.use(require('./routers/signin.js').routes())\n\n```\n现在注册一下来看看效果吧\n```\n$ supervisor --harmony index\n```\n![img](/img/signup.png)\n\n我们怎么查看我们注册好的账号和密码呢？打开mysql控制台\n\n```\n$ select * from users;\n```\n这样刚刚我们注册的用户信息都出现了\n![img](/img/users.png)\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n## 登录页面\n\n修改signin\nrouters/signin.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js')\n// 加密\nvar md5=require('md5')\n\n// get '/signin'登录页面\nrouter.get('/signin',async (ctx,next)=>{\n\tawait ctx.render('signin',{\n\t\tsession:ctx.session,\n\t})\n})\n// post '/signin'登录页面\nrouter.post('/signin',async (ctx,next)=>{\n\tconsole.log(ctx.request.body)\n\tvar name=ctx.request.body.name;\n\tvar pass=ctx.request.body.password;\n\t\n\t// 这里先查找用户名存在与否，存在则判断密码正确与否，不存在就返回false\n\tawait userModel.findDataByName(name)\n\t \t.then(result =>{\n\t\t \t// console.log(reslut)\n\t\t\tvar res=JSON.parse(JSON.stringify(result))\n\t\t\tif (name === res[0]['name'] && md5(pass) === res[0]['pass']) {\n\t\t\t\tctx.body='true'\n\t\t\t\t// ctx.flash.success='登录成功!';\n\t\t\t\tctx.session.user=res[0]['name']\n\t\t\t\tctx.session.id=res[0]['id']\n\t\t\t\tconsole.log('ctx.session.id',ctx.session.id)\n\t\t\t\t// ctx.redirect('/posts')\n\t\t\t\tconsole.log('session',ctx.session)\n\t\t\t\tconsole.log('登录成功')\n\t\t\t}\t\t\t\t\n\t\t }).catch(err=>{\n\t\t \tctx.body='false'\n\t\t \tconsole.log('用户名或密码错误!')\n\t\t \t// ctx.redirect('/signin')\n\t\t })\n})\n\nmodule.exports=router\n```\n我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密\n我们可以看到登录成功返回的结果是`result` 然后处理一下 var res=JSON.parse(JSON.stringify(result))\n为什么呢？\n因为返回的结果是这样的一个数组：id：4 name：rrr  pass：...\n[ RowDataPacket { id: 4, name: 'rrr', pass: '44f437ced647ec3f40fa0841041871cd' } ]\n\n修改views/signin.ejs\nsignin.ejs\n\n```html\n<% include header %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\n\t</div>\n\t<script>\n\t\t$('.submit').click(()=>{\n\t\t\tconsole.log($('.form').serialize())\n\t\t\t$.ajax({\n\t            url: \"/signin\",\n\t            data: $('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (!msg) {\n\t               \t\t$('.error').text('用户名或密码错误')\n\t               \t\t$('input').val('')\n\t               \t\tfade('.error')\n\t               }\n\t               else{\n\t               \t\t$('.success').text('登录成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.href=\"/posts\"\n\t               \t\t},1000)    \t\n\t               }      \n\t                //console.log($('.ui.error.message').text);\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t\t\n\t\t})\n\t\t\n\t</script>\n<% include footer %>\n```\n我们增加了ajax请求，在routers/singin.js里，我们设置如果登录失败就返回false，登录成功返回true\n```\nctx.body='false'\nctx.body='true'\n```\n那我们登录成功后要做跳转，可以看到`window.location.href=\"/posts\"`跳转到posts页面\n\n## 全部文章\n\n修改routers/posts.js\n\nposts.js\n\n```js\nvar router=require('koa-router')();\n// 处理数据库（之前已经写好，在mysql.js）\nvar userModel=require('../lib/mysql.js')\n// 时间中间件\nvar moment=require('moment')\n\n// get '/'页面\nrouter.get('/',async (ctx,next)=>{\n\tctx.redirect('/posts')\n})\n// get '/posts'页面\nrouter.get('/posts',async (ctx,next)=>{\n\tawait ctx.render('posts',{\n\t\tsession:ctx.session\n\t})\n\t\n})\nmodule.exports=router\n```\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉\n\n修改 views/posts.ejs\n\n```\n<% include header %>\n\n\tposts\n\n<% include footer %>\n```\n现在看看登录成功之后的页面吧\n\n接下来我们事先登出页面\n\n## 登出页面\n\n修改 router/signout.js\nsignout.js\n\n```js\nvar router=require('koa-router')();\n\nrouter.get('/signout',async (ctx,next)=>{\n\tctx.session=null;\n\tconsole.log('登出成功')\n\tctx.body='true'\n\t\n})\n\nmodule.exports=router\n```\n把session设置为null即可\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉，现在把注释的路由全部取消注释就对了\n\n\n然后修改 views/header.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa-blog</title>\n</head>\n<body>\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\tuser：\n\t\t\t<% if(session.user){ %>\n\t\t\t\t <%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t未登录\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">\n\t\t\t<div class=\"error\"></div>\n\t\t\t<div class=\"success\"></div>\n\t\t</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user\">\n\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<a  href=\"/signup\">注册</a>\n\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\t<script>\n\t\tfunction fade(data){\n\t\t\tif ($(data).css('display')!=='none') {\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n       \t\telse{\n       \t\t\t$(data).show()\n           \t\t$(data).fadeOut(1500)\n       \t\t}\n\t\t}\n\t\t$('.signout').click(()=>{\n\t\t\t$.ajax({\n\t            url: \"/signout\",\n\t            type: \"GET\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg) {\n\t               \t\t$('.success').text('登出成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.href=\"/posts\"\n\t               \t\t},1000)      \t\n\t               }\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t})\n\t</script>\n```\n增加点击登出后的ajax 的提交，成功之后回到posts页面\n\n## 发表文章\n\n修改router/posts\n在后面增加\n```js\n// get '/create'\nrouter.get('/create',async (ctx,next)=>{\n\tawait ctx.render('create',{\n\t\tsession:ctx.session,\n\t})\n})\n\n// psot '/create'\nrouter.post('/create',async (ctx,next)=>{\n\t\n\tconsole.log(ctx.session.user)\t\n\tvar title=ctx.request.body.title\n\tvar content=ctx.request.body.content\n\tvar id=ctx.session.id\n\tvar name=ctx.session.user\n\tvar time=moment().format('YYYY-MM-DD HH:mm')\n\tconsole.log([name,title,content,id,time])\n\t// 这里我们向数据库插入用户名、标题、内容、发表文章用户的id、时间，成功返回true，失败为false\n\tawait userModel.insertPost([name,title,content,id,time])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\n})\n```\n\n修改 views/create.ejs\n\ncreate.ejs\n\n```html\n<% include header %>\n<div class=\"container\">\n\t<form method=\"post\" class=\"form create\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"\" type=\"text\" name=\"title\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\"></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">发表</div>\n\t</form>\n</div>\t\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: \"/create\",\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\t$('.success').text('发表成功')\n               \t\tfade('.success')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }else{\n                  $('.success').text('发表失败')\n                  fade('.success')\n                  setTimeout(()=>{\n                    window.location.reload()\n                  },1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\t\t\n\t})\n</script>\n<% include footer %>\n```\n现在看看能不能发表吧\n\n即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据\n\n接下来\n\n修改 routers/posts.js\n\n修改 get '/posts'\n\n```js\nrouter.get('/posts',async (ctx,next)=>{\n\t\n\t// 这里我们先通过查找有没有类似/posts?author=XXX 的连接跳转，如果有就执行下面这句话，把用户名取下来，由于用户名存在中文，所以我们进行解码\n\tif (ctx.request.querystring) {\n\t\tconsole.log('ctx.request.querystring',decodeURIComponent(ctx.request.querystring.split('=')[1]))\n\t\tawait userModel.findDataByUser(decodeURIComponent(ctx.request.querystring.split('=')[1]))\n\t\t\t.then(result=>{\n\t\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\t\tconsole.log(res)\n\t\t\t})\n\t\tawait ctx.render('posts',{\n\t\t\t\tsession:ctx.session,\n\t\t\t\tposts:res\t\n\t\t\t})\n\t}else{\n\t\t// 如果连接是正常的 如 /posts 则我们获取的是全部文章的列表，所以通过findAllPost查找全部文章并向模板传递数据posts， posts的值为res\n\t\tawait userModel.findAllPost()\n\t\t\t.then(result=>{\n\t\t\t\tconsole.log(result)\n\t\t\t\tres=JSON.parse(JSON.stringify(result)) \n\t\t\t\tconsole.log('post',res)\n\t\t\t})\n\t\tawait ctx.render('posts',{\n\t\t\tsession:ctx.session,\n\t\t\tposts:res\t\n\t\t})\n\t}\n})\n\n```\nif (ctx.request.querystring) {}这部分我们先不用管，后面会说。只需要看else后面的代码我们查找我们发表的全部文章然后将获取到的值定义为posts，传给模板posts.ejs，这样就可以渲染出来了\n\n修改 Views/posts.ejs\n\nposts.ejs\n\n```html\n<% include header %>\n\t<ul class=\"posts\">\n\t\t<% posts.forEach(function(res){ %>\n\t\t\t<li>\n\t\t\t\t<div class=\"post_3\">\n\t\t\t\t\t<p class=\"post_user\"><a href=\"/posts?author=<%= res['name'] %>\">作者: <%= res['name'] %></a></p>\n\t\t\t\t\t<p class=\"post_comments\">评论数：<%= res['comments'] %></p>\n\t\t\t\t\t<p class=\"post_pv\">浏览数：<%= res['pv'] %></p>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"/posts/<%= res['id'] %>\">\n\t\t\t\t\t<div class=\"post_title\">\n\t\t\t\t\t\t<h3>title</h3>\n\t\t\t\t\t\t<p><%= res['title'] %></p>\n\t\t\t\t\t</div>\t\n\t\t\t\t\t<div class=\"post_content\">\n\t\t\t\t\t\t<h3>content</h3>\n\t\t\t\t\t\t<p><%= res['content'] %></p>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\t\t\n\t\t\t\t<p class=\"post_time\">发表时间：<%= res['moment'] %></p>\n\t\t\t</li>\n\t\t<% }) %>\t\n\t</ul>\n<% include footer %>\n```\n现在看看posts页面有没有文章出现了\n\n我们看到是所有的文章，但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？\n\n修改 routers/posts.js\n\n在posts.js后面增加\n\n```js\nrouter.get('/posts/:postId',async (ctx,next)=>{\n\tconsole.log(ctx.params.postId)\n\t// 通过文章id查找返回数据，然后增加pv 浏览 +1 \n\tawait userModel.findDataById(ctx.params.postId)\n\t\t.then(result=>{\n\t\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\t\tres_pv=parseInt(JSON.parse(JSON.stringify(result))[0]['pv'])\n\t\t\t\tres_pv+=1\n\t\t\t\tconsole.log(res)\n\t\t\t})\n\t\n\t// 渲染模板，并传递三个数据\t\t\n\tawait ctx.render('sPost',{\n\t\t\t\tsession:ctx.session,\n\t\t\t\tposts:res\n\t\t\t})\n})\n```\n\n现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增\n\n我们通过userModel.findDataById 文章的id来查找数据库\n我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能\n\n## 单篇文章页\n\n修改 views/sPost.ejs\n\nsPost.ejs\n\n```html\n<% include header %>\t\n\t<div class=\"spost\">\n\t\t<p class=\"spost_user\">author: <a href=\"/posts?author=<%= posts[0]['name'] %>\"><%= posts[0]['name'] %></a></p>\n\t\t<div class=\"post_title\">\n\t\t\t<h3>title</h3>\n\t\t\t<p><a href=\"/posts/<%= posts[0]['id'] %>\"><%= posts[0]['title'] %></a></p>\n\t\t</div>\n\t\t<div class=\"post_content\">\n\t\t\t<h3>content</h3>\n\t\t\t<p><%= posts[0]['content'] %></p>\n\t\t</div>\n\t\t<div class=\"edit\">\n\t\t\t<% if(session && session.user===  posts[0]['name']  ){ %>\n\t\t\t<p><a href=\"<%= posts[0]['id'] %>/edit\">编辑</a></p>\n\t\t\t<p><a class=\"delete_post\" >删除</a></p>\n\t\t\t<% } %>\n\t\t\t<script>\n\t\t\t\t$('.delete_post').click(()=>{\n\t\t\t\t\t$.ajax({\n\t\t\t\t\t\turl:\"<%= posts[0]['id'] %>/remove\",\n\t\t\t\t\t\ttype:'GET',\n\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\tsuccess:function(msg){\n\t\t\t\t\t\t\tif (msg.data==1) {\n\t\t\t\t\t\t\t\t$('.success').text('删除文章成功')\n               \t\t\t\t\tfade('.success')\n               \t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t               \t\twindow.location.href=\"/posts\"\t\n               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t}else if(msg.data==2){\n\t\t\t\t\t\t\t\t$('.error').text('删除文章失败')\n               \t\t\t\t\tfade('.error');\n               \t\t\t\t\tsetTimeout(()=>{\n\t               \t\t\t\t\twindow.location.reload()\n               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t</script>\n\t\t</div>\n\t</div>\n\t<div class=\"comment_wrap\">\n\t\t<h3>comment</h3>\n\t\t<div class=\"comment_list\">\n\t\t\t<% comments.forEach(function(res){ %>\n\t\t\t\t<div class=\"cmt_lists\">\n\t\t\t\t\t<p></p>\n\t\t\t\t\t<p class=\"cmt_content\">\n\t\t\t\t\t\tcontent: <%= res['content'] %>\n\t\t\t\t\t\t<span class=\"cmt_name\">\n\t\t\t\t\t\t\tBy: <%= res['name'] %>\n\t\t\t\t\t\t\t<% if(session && session.user ===  res['name']  ){ %>\n\t\t\t\t\t\t\t\t<a class=\"delete_comment\"> 删除</a>\n\t\t\t\t\t\t\t<% } %>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<script>\n\t\t\t\t\t$('.delete_comment').click(()=>{\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\turl:\"<%= posts[0]['id'] %>/comment/<%= res['id'] %>/remove\",\n\t\t\t\t\t\t\ttype:'GET',\n\t\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\t\tsuccess:function(msg){\n\t\t\t\t\t\t\t\tif (msg.data==1) {\n\t\t\t\t\t\t\t\t\t$('.success').text('删除留言成功')\n\t               \t\t\t\t\tfade('.success')\n\t               \t\t\t\t\tsetTimeout(()=>{\n\t\t               \t\t\t\t\twindow.location.reload()\n\t               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t\t}else if(msg.data==2){\n\t\t\t\t\t\t\t\t\t$('.error').text('删除留言失败')\n\t               \t\t\t\t\tfade('.error');\n\t               \t\t\t\t\tsetTimeout(()=>{\n\t\t               \t\t\t\t\twindow.location.reload()\n\t               \t\t\t\t\t},1000)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror:function(){\n\t\t\t\t\t\t\t\talert('异常')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t</script>\n\t\t\t<% }) %>\n\t\t</div>\t\n\t\t<% if(session.user){ %>\n\t\t<form class=\"form\" method=\"post\" action=\"/<%= posts[0]['id'] %>\">\n\t\t\t<textarea name=\"content\" id=\"\"></textarea>\n\t\t\t<div class=\"submit\">发表留言</div>\n\t\t</form>\n\t\t<% } %>\n\t</div>\n\t<script>\n\t\t$('.submit').click(function(){\n\t\t\t$.ajax({\n\t            url: '/'+document.URL.slice(document.URL.lastIndexOf('/')+1),\n\t            data:$('.form').serialize(),\n\t            type: \"POST\",\n\t            cache: false,\n\t            dataType: 'json',\n\t            success: function (msg) {\n\t               if (msg) {\n\t               \t\t$('.success').text('发表留言成功')\n\t               \t\tfade('.success')\n\t               \t\tsetTimeout(()=>{\n\t\t               \t\twindow.location.reload()\n\t               \t\t},1000)  \t\n\t               }\n\t            },\n\t            error: function () {\n\t                alert('异常');\n\t            }\n\t        })\n\t\t})\n\t</script>\t\n<% include footer %>\n\n```\n现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户发表的文章列表，我们之前在 get '/posts' 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了应该处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了`ctx.request.querystring` 获取到的是：`author=XXX`\n\n注：这里我们处理了，通过判断 `session.user ===  res['name']` 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的`<a href=\"\"></a>`标签\n\n\n## 编辑文章、删除文章、评论、删除评论\n\n> 评论\n\n修改routers/posts.js \n\n在post.js 后面增加\n\n```js\nrouter.post('/:postId',async (ctx,next)=>{\n\tvar name=ctx.session.user\n\tvar content=ctx.request.body.content\n\tvar postId=ctx.params.postId\n\t\n\t// 插入评论的用户名，内容和文章id\n\tawait userModel.insertComment([name,content,postId])\n\t// 先通过文章id查找，然后评论数+1\n\tawait userModel.findDataById(postId)\n\t\t\t.then(result=>{\n\t\t\t\tres_comments=parseInt(JSON.parse(JSON.stringify(result))[0]['comments'])\n\t\t\t\tres_comments+=1\n\t\t\t})\n\t// 更新评论数 res_comments\n\tawait userModel.updatePostComment([res_comments,postId])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\t\n})\n```\n现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此\n\n> 删除评论\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\nrouter.get('/posts/:postId/comment/:commentId/remove',async (ctx,next)=>{\n\t\n\tvar postId=ctx.params.postId\n\tvar commentId=ctx.params.commentId\n\tawait userModel.findDataById(postId)\n\t\t\t.then(result=>{\n\t\t\t\tres_comments=parseInt(JSON.parse(JSON.stringify(result))[0]['comments'])\n\t\t\t\tconsole.log('res',res_comments)\n\t\t\t\tres_comments-=1\n\t\t\t\tconsole.log(res_comments)\n\t\t\t})\n\tawait userModel.updatePostComment([res_comments,postId])\n\tawait userModel.deleteComment(commentId)\n\t\t.then(()=>{\n\t\t\t ctx.body={\n\t\t\t \tdata:1\n\t\t\t }\n\t\t}).catch(()=>{\n\t\t\t  ctx.body={\n\t\t\t \tdata:2\n\t\t\t }\n\t\t})\n})\n```\n现在试试删除评论的功能吧\n\n> 删除文章\n\n只有自己发表的文字删除的文字才会显示出来，才能被删除，\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\nrouter.get('/posts/:postId/remove',async (ctx,next)=>{\n\t\n\tvar postId=ctx.params.postId\n\t\n\tawait userModel.deleteAllPostComment(postId)\n\tawait userModel.deletePost(postId)\n\t\t.then(()=>{\n\t\t\t ctx.body={\n\t\t\t \tdata:1\n\t\t\t }\t\n\t\t}).catch(()=>{\n\t\t\tctx.body={\n\t\t\t \tdata:2\n\t\t\t }\n\t\t})\n\t\n})\n```\n现在试试删除文章的功能吧\n\n> 编辑文字\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// get '/posts/:postId/edit'\nrouter.get('/posts/:postId/edit',async (ctx,next)=>{\n\tvar name=ctx.session.user\n\tvar postId=ctx.params.postId\n\t\n\tawait userModel.findDataById(postId)\n\t\t.then(result=>{\n\t\t\tres=JSON.parse(JSON.stringify(result))\n\t\t\tconsole.log('修改文章',res)\n\t\t})\n\tawait ctx.render('edit',{\n\t\t\tsession:ctx.session,\n\t\t\tposts:res\n\t\t})\n})\n// post '/posts/:postId/edit'\nrouter.post('/posts/:postId/edit',async (ctx,next)=>{\n\tvar title=ctx.request.body.title\n\tvar content=ctx.request.body.content\n\tvar id=ctx.session.id\n\tvar postId=ctx.params.postId\n\t\t\n\tawait userModel.updatePost([title,content,postId])\n\t\t.then(()=>{\n\t\t\tctx.body='true'\n\t\t}).catch(()=>{\n\t\t\tctx.body='false'\n\t\t})\n})\n```\n\n修改views/edit.js \n\n```html\n<% include header %>\n<div class=\"container\">\n\t<form class=\"form create\" method=\"post\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"标题\" type=\"text\" name=\"title\" value=\"<%= posts[0]['title'] %>\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\">\n\t\t\t\t<%= posts[0]['content'] %>\n\t\t\t</textarea>\n\t\t</div>\n\t\t<!-- <input type=\"submit\" value=\"修改\"> -->\n\t\t<div class=\"submit\">修改</div>\n\t</form>\n</div>\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: document.URL,\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\t$('.success').text('修改成功')\n               \t\tfade('.success')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\n\t})\n</script>\n<% include footer %>\n```\n\n现在试试编辑文字然后修改提交吧\n\n## 结语 \n\n至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的\n\n所有的代码都在 https://github.com/wclimb/Koa2-blog 里面，如果觉得不错就star一下吧。有问题可以提问哟\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^","date":"2019-06-06T01:06:26.431Z","updated":"2019-06-06T01:06:26.430Z","path":"img/copy.html","title":"","comments":1,"layout":"page","_id":"ck411ns8u000859x3bbzw94ja","content":"<h2 id=\"Koa2-blog\"><a href=\"#Koa2-blog\" class=\"headerlink\" title=\"Koa2-blog\"></a>Koa2-blog</h2><p>Node+Koa2+Mysql 搭建简易博客</p>\n<h2 id=\"预览地址\"><a href=\"#预览地址\" class=\"headerlink\" title=\"预览地址\"></a>预览地址</h2><p><a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，<br>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a><br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^<br>ps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！</p>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><p><img src=\"http://www.wclimb.site/cdn/blog.gif\" alt=\"img\"></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>koa <code>v2.3.0</code></li>\n<li>mysql <code>v5.7.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> </p>\n<p>如果你已经配置好node和mysql可以跳过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本</span><br></pre></td></tr></table></figure>\n<p>下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin</span><br></pre></td></tr></table></figure>\n<p>然后开启mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>输入密码之后创建<code>database</code>(数据库)，<code>nodesql</code>是我们创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create database nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>记住sql语句后面一定要跟<code>;</code>符号，接下来看看我们创建好的数据库列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show databases;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.wclimb.site/cdn/database.png\" alt=\"img\"></p>\n<p>启用创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ use nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库中的表<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show tables;</span><br></pre></td></tr></table></figure></p>\n<p>显示<code>Empty set (0.00 sec)</code>，因为我们还没有建表，稍后会用代码建表<br>注释：<br>这是后面建表之后的状态<br><img src=\"http://www.wclimb.site/cdn/tables.png\" alt=\"img\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p><img src=\"http://www.wclimb.site/cdn/item.png\" alt=\"img\"></p>\n<ul>\n<li>config 存放默认文件</li>\n<li>lib 存放操作数据库文件</li>\n<li>middlewares 存放判断登录与否文件</li>\n<li>public 存放样式文件</li>\n<li>routes 存放路由文件</li>\n<li>views 存放模板文件</li>\n<li>index 程序主文件</li>\n<li>package.json 包括项目名、作者、依赖等等</li>\n</ul>\n<p>首先我们创建koa2-blog文件夹，然后<code>cd koa2-blog</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着使用 `npm init` 来创建package.json</span><br></pre></td></tr></table></figure></p>\n<p>接着安装包，安装之前我们使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs --save</span><br></pre></td></tr></table></figure>\n<p>各模块用处</p>\n<ol>\n<li><code>koa node</code>框架</li>\n<li><code>koa-bodyparser</code> 表单解析中间件</li>\n<li><code>koa-mysql-session</code>、<code>koa-session-minimal</code> 处理数据库的中间件</li>\n<li><code>koa-router</code> 路由中间件</li>\n<li><code>koa-static</code> 静态资源加载中间件</li>\n<li><code>ejs</code> 模板引擎</li>\n<li><code>md5</code> 密码加密</li>\n<li><code>moment</code> 时间中间件</li>\n<li><code>mysql</code> 数据库</li>\n<li><code>koa-views</code> 模板呈现中间件</li>\n</ol>\n<p>在文件夹里面新建所需文件</p>\n<p><img src=\"http://www.wclimb.site/cdn/view.png\" alt=\"img\"></p>\n<h2 id=\"首先配置config\"><a href=\"#首先配置config\" class=\"headerlink\" title=\"首先配置config\"></a>首先配置config</h2><p>我们新建<code>default.js</code>文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  // 启动端口</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据库配置</span><br><span class=\"line\">  database: &#123;</span><br><span class=\"line\">    DATABASE: &apos;nodesql&apos;,</span><br><span class=\"line\">    USERNAME: &apos;root&apos;,</span><br><span class=\"line\">    PASSWORD: &apos;123456&apos;,</span><br><span class=\"line\">    PORT: &apos;3306&apos;,</span><br><span class=\"line\">    HOST: &apos;localhost&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config</span><br></pre></td></tr></table></figure>\n<p>这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用</p>\n<h2 id=\"配置index-js文件\"><a href=\"#配置index-js文件\" class=\"headerlink\" title=\"配置index.js文件\"></a>配置index.js文件</h2><p><code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Koa=<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ejs=<span class=\"built_in\">require</span>(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session-minimal'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> MysqlStore = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-mysql-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/default.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> views = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-views'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> koaStatic = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app=<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// session存储配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sessionMysqlConfig= &#123;</span><br><span class=\"line\">  user: config.database.USERNAME,</span><br><span class=\"line\">  password: config.database.PASSWORD,</span><br><span class=\"line\">  database: config.database.DATABASE,</span><br><span class=\"line\">  host: config.database.HOST,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置session中间件</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  key: <span class=\"string\">'USER_SID'</span>,</span><br><span class=\"line\">  store: <span class=\"keyword\">new</span> MysqlStore(sessionMysqlConfig)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源加载中间件</span></span><br><span class=\"line\">app.use(koaStatic(</span><br><span class=\"line\">  path.join(__dirname , <span class=\"string\">'./public'</span>)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置服务端模板渲染引擎中间件</span></span><br><span class=\"line\">app.use(views(path.join(__dirname, <span class=\"string\">'./views'</span>), &#123;</span><br><span class=\"line\">  extension: <span class=\"string\">'ejs'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用表单解析中间件</span></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用新建的路由文件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/signin.js').routes())</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signup.js'</span>).routes())</span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/posts.js').routes())</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/signout.js').routes())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听在3000端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>koa-session-minimal`</code>koa-mysql-session<code>来进行数据库的操作\n使用</code>koa-static<code>配置静态资源，目录设置为</code>public<code>使用</code>ejs<code>模板引擎\n使用</code>koa-bodyparser<code>来解析提交的表单信息\n使用</code>koa-router`做路由</p>\n<p>之前我们配置了default.js，我们就可以在这里使用了<br>首先引入进来 var config = require(‘./config/default.js’);<br>然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。</p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"配置lib的mysql-js文件\"><a href=\"#配置lib的mysql-js文件\" class=\"headerlink\" title=\"配置lib的mysql.js文件\"></a>配置lib的mysql.js文件</h2><p>关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数<code>query</code>，通过返回promise的方式以便可以方便用<code>.then()</code>来获取数据库返回的数据，然后我们定义了三个表的字段，通过<code>createTable</code>来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。</p>\n<blockquote>\n<p>这里只介绍注册用户insertData，后续的可以自行查看，都差不多</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users(name,pass) values(?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name和pass，就是用户名和密码，后面values(?,?)意思很简单，你有几个值就写几个问号，最后调用<code>query</code>函数把sql语句传进去</p>\n<p>lib/mysql.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/default.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool  = mysql.createPool(&#123;</span><br><span class=\"line\">  host     : config.database.HOST,</span><br><span class=\"line\">  user     : config.database.USERNAME,</span><br><span class=\"line\">  password : config.database.PASSWORD,</span><br><span class=\"line\">  database : config.database.DATABASE</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql, values </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\"> resolve, reject </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        resolve( err )</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, ( err, rows) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( err ) &#123;</span><br><span class=\"line\">            reject( err )</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve( rows )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">users=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists users(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> pass VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\">posts=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists posts(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> title VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> content  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> uid  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> moment  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> comments  VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\"> pv  VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\">comment=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists comment(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> content VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> postid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( sql, [] )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建表</span></span><br><span class=\"line\">createTable(users)</span><br><span class=\"line\">createTable(posts)</span><br><span class=\"line\">createTable(comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users(name,pass) values(?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发表文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertPost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into posts(name,title,content,uid,moment) values(?,?,?,?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新文章评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set  comments=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新浏览数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostPv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set  pv=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into comment(name,content,postid) values(?,?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from users</span></span><br><span class=\"line\"><span class=\"string\">      where name=\"<span class=\"subst\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章的名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByUser = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from posts</span></span><br><span class=\"line\"><span class=\"string\">      where name=\"<span class=\"subst\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from posts</span></span><br><span class=\"line\"><span class=\"string\">      where id=\"<span class=\"subst\">$&#123;id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过评论id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * FROM comment where postid=\"<span class=\"subst\">$&#123;id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAllPost = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * FROM posts</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新修改文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`update posts set  title=?,content=? where id=?`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql,values)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deletePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from posts where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from comment where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除所有评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAllPostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from comment where postid = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`select content from comment where postid in (select id from posts where id=<span class=\"subst\">$&#123;id&#125;</span>)`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">  query,</span><br><span class=\"line\">  createTable,</span><br><span class=\"line\">  insertData,</span><br><span class=\"line\">  findDataByName,</span><br><span class=\"line\">  insertPost,</span><br><span class=\"line\">  findAllPost,</span><br><span class=\"line\">  findDataByUser,</span><br><span class=\"line\">  findDataById,</span><br><span class=\"line\">  insertComment,</span><br><span class=\"line\">  findCommentById,</span><br><span class=\"line\">  updatePost,</span><br><span class=\"line\">  deletePost,</span><br><span class=\"line\">  deleteComment,</span><br><span class=\"line\">  findCommentLength,</span><br><span class=\"line\">  updatePostComment,</span><br><span class=\"line\">  deleteAllPostComment,</span><br><span class=\"line\">  updatePostPv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是我们建的表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">users</th>\n<th style=\"text-align:center\">posts</th>\n<th style=\"text-align:center\">comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pass</td>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">content</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">content</td>\n<td style=\"text-align:center\">postid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">uid</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">pv</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>id主键递增</li>\n<li>name: 用户名</li>\n<li>pass：密码</li>\n<li>title：文章标题</li>\n<li>content：文章内容和评论</li>\n<li>uid：发表文章的用户id </li>\n<li>moment：创建时间</li>\n<li>comments：文章评论数</li>\n<li>pv：文章浏览数</li>\n<li>postid：文章id</li>\n</ul>\n<p>现在感觉有点枯燥，那我们先来实现一下注册吧</p>\n<h2 id=\"实现注册页面\"><a href=\"#实现注册页面\" class=\"headerlink\" title=\"实现注册页面\"></a>实现注册页面</h2><p>routers/singup.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET '/signup' 注册页</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\"> <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;\t\t</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>使用get方式得到’/signup’页面，然后渲染signup模板，这里我们还没有在写signup.ejs</p>\n<p>views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们先安装supervisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i supervisor</span><br></pre></td></tr></table></figure>\n<p>supervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p>现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭</p>\n<h2 id=\"完善注册功能\"><a href=\"#完善注册功能\" class=\"headerlink\" title=\"完善注册功能\"></a>完善注册功能</h2><p>首先我们来完善一下样式吧，稍微美化一下</p>\n<p>public/index.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">span</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -moz-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -ms-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -o-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.user_name</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span>,<span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span>,<span class=\"selector-class\">.none_user</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_title</span> <span class=\"selector-tag\">p</span>,<span class=\"selector-class\">.post_content</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_time</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post_3</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_3</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_title</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost_user</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.edit</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.edit</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.submit</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> ;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.create</span> <span class=\"selector-tag\">label</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> <span class=\"selector-tag\">form</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span>,<span class=\"selector-class\">.delete_post</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.delete_post</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再把模板引擎的header和footer独立出来</p>\n<p>/views/header.ejs<br>顺便引入index.css和jq<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>/views/footer.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>修改views/signup.ejs </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改routers/signup.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5=<span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST '/signup' 注册页</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user=&#123;</span><br><span class=\"line\">\t\tname:ctx.request.body.name,</span><br><span class=\"line\">\t\tpass:ctx.request.body.password,</span><br><span class=\"line\">\t\trepeatpass:ctx.request.body.repeatpass</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataByName(user.name)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// var res=JSON.parse(JSON.stringify(reslut))</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户存在'</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (error)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//处理err</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(error)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (user.pass!==user.repeatpass || user.pass==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">3</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// ctx.session.user=ctx.request.body.name</span></span><br><span class=\"line\">\t\t\t \t\tuserModel.insertData([ctx.request.body.name,md5(ctx.request.body.password)])</span><br><span class=\"line\">\t\t\t\t&#125;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们使用md5实现密码加密</li>\n<li>使用我们之前说的<code>bodyParse</code>来解析提交的数据，通过<code>ctx.request.body</code>得到</li>\n<li>我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中</li>\n<li>ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后<code>msg.data=1</code>的时候就代表用户存在，<code>msg.data</code>出现在后面的<code>signup.ejs</code>模板ajax请求中</li>\n</ul>\n<p>我们使用ajax来提交数据，方便来做成功错误的处理</p>\n<h2 id=\"模板引擎ejs\"><a href=\"#模板引擎ejs\" class=\"headerlink\" title=\"模板引擎ejs\"></a>模板引擎ejs</h2><p>我们使用的是ejs，语法可以见<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs官网</a></p>\n<p>之前我们写了这么一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了<br>ejs的常用标签为：</p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ul>\n<p><code>&lt;%= code %&gt;</code>和<code>&lt;%- code %&gt;</code>的区别在于，&lt;%= code %&gt;不管你写什么都会原样输出，比如code为 <code>&lt;strong&gt;hello&lt;/strong&gt;</code>的时候 <code>&lt;%= code %&gt;</code> 会显示<code>&lt;strong&gt;hello&lt;/strong&gt;</code><br>而<code>&lt;%- code %&gt;</code>则显示加粗的hello</p>\n<p>修改/views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signup\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\">\t               \t\t</span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'用户名存在'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'请输入重复的密码'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               \t\t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data == <span class=\"number\">3</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'注册成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/signin\"</span></span></span><br><span class=\"line\">\t\t  </span><br><span class=\"line\">\t               \t\t&#125;,1000)</span><br><span class=\"line\">\t               &#125;\t              </span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"comment\">//console.log($('.ui.error.message').text);</span></span></span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中</p>\n<p>修改/views/header.ejs</p>\n<blockquote>\n<p> 我们之前在/routers/signup.js get ‘/signup’ 中 向模板传递了session参数  session:ctx.session,存取的就是用户的信息，包括用户名、登录之后的id等，之所以可以通过ctx.session获取到，因为我们在后面登录的时候已经赋值 如ctx.session.user=res[0][‘name’]</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tuser：</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t未登录</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(data).css(<span class=\"string\">'display'</span>)!==<span class=\"string\">'none'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">       \t\t<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       \t\t\t$(data).show()</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以看到，如果不存在用户，则只显示<code>全部文章</code> <code>注册</code> <code>登录</code> ,如果session.user存在则有登出的按钮</p>\n<p>我们可以看到当状态data为 3 的时候window.location.href=”/signin”<br>为了方便跳转，我们先简单实现一下signin页面</p>\n<p>修改 /routers/signin.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/signin'登录页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>修改 /views/signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signin.js'</span>).routes())</span><br></pre></td></tr></table></figure>\n<p>现在注册一下来看看效果吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/signup.png\" alt=\"img\"></p>\n<p>我们怎么查看我们注册好的账号和密码呢？打开mysql控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from users;</span><br></pre></td></tr></table></figure>\n<p>这样刚刚我们注册的用户信息都出现了<br><img src=\"/img/users.png\" alt=\"img\"></p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h2><p>修改signin<br>routers/signin.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5=<span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/signin'登录页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post '/signin'登录页面</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.request.body.name;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pass=ctx.request.body.password;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 这里先查找用户名存在与否，存在则判断密码正确与否，不存在就返回false</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataByName(name)</span><br><span class=\"line\">\t \t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t \t<span class=\"comment\">// console.log(reslut)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> res=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (name === res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>] &amp;&amp; md5(pass) === res[<span class=\"number\">0</span>][<span class=\"string\">'pass'</span>]) &#123;</span><br><span class=\"line\">\t\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ctx.flash.success='登录成功!';</span></span><br><span class=\"line\">\t\t\t\tctx.session.user=res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>]</span><br><span class=\"line\">\t\t\t\tctx.session.id=res[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.session.id'</span>,ctx.session.id)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ctx.redirect('/posts')</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'session'</span>,ctx.session)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">\t\t\t&#125;\t\t\t\t</span><br><span class=\"line\">\t\t &#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t \tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'用户名或密码错误!'</span>)</span><br><span class=\"line\">\t\t \t<span class=\"comment\">// ctx.redirect('/signin')</span></span><br><span class=\"line\">\t\t &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密<br>我们可以看到登录成功返回的结果是<code>result</code> 然后处理一下 var res=JSON.parse(JSON.stringify(result))<br>为什么呢？<br>因为返回的结果是这样的一个数组：id：4 name：rrr  pass：…<br>[ RowDataPacket { id: 4, name: ‘rrr’, pass: ‘44f437ced647ec3f40fa0841041871cd’ } ]</p>\n<p>修改views/signin.ejs<br>signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signin\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (!msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'用户名或密码错误'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'登录成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t               \t\t&#125;,1000)    \t</span><br><span class=\"line\">\t               &#125;      </span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"comment\">//console.log($('.ui.error.message').text);</span></span></span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们增加了ajax请求，在routers/singin.js里，我们设置如果登录失败就返回false，登录成功返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.body=&apos;false&apos;</span><br><span class=\"line\">ctx.body=&apos;true&apos;</span><br></pre></td></tr></table></figure></p>\n<p>那我们登录成功后要做跳转，可以看到<code>window.location.href=&quot;/posts&quot;</code>跳转到posts页面</p>\n<h2 id=\"全部文章\"><a href=\"#全部文章\" class=\"headerlink\" title=\"全部文章\"></a>全部文章</h2><p>修改routers/posts.js</p>\n<p>posts.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 时间中间件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moment=<span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/'页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\tctx.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// get '/posts'页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉</p>\n<p>修改 views/posts.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% include header %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\tposts</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% include footer %&gt;</span><br></pre></td></tr></table></figure>\n<p>现在看看登录成功之后的页面吧</p>\n<p>接下来我们事先登出页面</p>\n<h2 id=\"登出页面\"><a href=\"#登出页面\" class=\"headerlink\" title=\"登出页面\"></a>登出页面</h2><p>修改 router/signout.js<br>signout.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signout'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\tctx.session=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>把session设置为null即可</p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉，现在把注释的路由全部取消注释就对了</p>\n<p>然后修改 views/header.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tuser：</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t未登录</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(data).css(<span class=\"string\">'display'</span>)!==<span class=\"string\">'none'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">       \t\t<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       \t\t\t$(data).show()</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.signout'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signout\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"GET\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'登出成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t               \t\t&#125;,1000)      \t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>增加点击登出后的ajax 的提交，成功之后回到posts页面</p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>修改router/posts<br>在后面增加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get '/create'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'create'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// psot '/create'</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.session.user)\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> title=ctx.request.body.title</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id=ctx.session.id</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> time=moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([name,title,content,id,time])</span><br><span class=\"line\">\t<span class=\"comment\">// 这里我们向数据库插入用户名、标题、内容、发表文章用户的id、时间，成功返回true，失败为false</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.insertPost([name,title,content,id,time])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>修改 views/create.ejs</p>\n<p>create.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">\"/create\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">               &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  $(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                  fade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">                  &#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看能不能发表吧</p>\n<p>即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据</p>\n<p>接下来</p>\n<p>修改 routers/posts.js</p>\n<p>修改 get ‘/posts’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 这里我们先通过查找有没有类似/posts?author=XXX 的连接跳转，如果有就执行下面这句话，把用户名取下来，由于用户名存在中文，所以我们进行解码</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>,<span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> userModel.findDataByUser(<span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\t\tposts:res\t</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接是正常的 如 /posts 则我们获取的是全部文章的列表，所以通过findAllPost查找全部文章并向模板传递数据posts， posts的值为res</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result)) </span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'post'</span>,res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\tposts:res\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>if (ctx.request.querystring) {}这部分我们先不用管，后面会说。只需要看else后面的代码我们查找我们发表的全部文章然后将获取到的值定义为posts，传给模板posts.ejs，这样就可以渲染出来了</p>\n<p>修改 Views/posts.ejs</p>\n<p>posts.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_3\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_user\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res['name'] %&gt;\"</span>&gt;</span>作者: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_comments\"</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">comments</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_pv\"</span>&gt;</span>浏览数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">pv</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res['id'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">title</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_time\"</span>&gt;</span>发表时间：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">moment</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看posts页面有没有文章出现了</p>\n<p>我们看到是所有的文章，但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？</p>\n<p>修改 routers/posts.js</p>\n<p>在posts.js后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.params.postId)</span><br><span class=\"line\">\t<span class=\"comment\">// 通过文章id查找返回数据，然后增加pv 浏览 +1 </span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(ctx.params.postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t\tres_pv=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'pv'</span>])</span><br><span class=\"line\">\t\t\t\tres_pv+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 渲染模板，并传递三个数据\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'sPost'</span>,&#123;</span><br><span class=\"line\">\t\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\t\tposts:res</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增</p>\n<p>我们通过userModel.findDataById 文章的id来查找数据库<br>我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能</p>\n<h2 id=\"单篇文章页\"><a href=\"#单篇文章页\" class=\"headerlink\" title=\"单篇文章页\"></a>单篇文章页</h2><p>修改 views/sPost.ejs</p>\n<p>sPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spost\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spost_user\"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= posts[0]['name'] %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= posts[0]['id'] %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">title</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">content</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span>===  <span class=\"string\">posts[0][</span>'<span class=\"attr\">name</span>']  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= posts[0]['id'] %&gt;/edit\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_post\"</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.delete_post'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\turl:<span class=\"string\">\"&lt;%= posts[0]['id'] %&gt;/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\ttype:<span class=\"string\">'GET'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data==<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'删除文章成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span>\t</span></span><br><span class=\"line\">               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data==<span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'删除文章失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tfade(<span class=\"string\">'.error'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_list\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">comments.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_lists\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\tcontent: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\tBy: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">res[</span>'<span class=\"attr\">name</span>']  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_comment\"</span>&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'.delete_comment'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\turl:\"<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">id</span>'] %&gt;</span>/comment/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">id</span>'] %&gt;</span>/remove\",</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\ttype:<span class=\"string\">'GET'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data==<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'删除留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data==<span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'删除留言失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tfade(<span class=\"string\">'.error'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/&lt;%= posts[0]['id'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">'/'</span>+<span class=\"built_in\">document</span>.URL.slice(<span class=\"built_in\">document</span>.URL.lastIndexOf(<span class=\"string\">'/'</span>)+<span class=\"number\">1</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data:$(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t&#125;,1000)  \t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户发表的文章列表，我们之前在 get ‘/posts’ 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了应该处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了<code>ctx.request.querystring</code> 获取到的是：<code>author=XXX</code></p>\n<p>注：这里我们处理了，通过判断 <code>session.user ===  res[&#39;name&#39;]</code> 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签</p>\n<h2 id=\"编辑文章、删除文章、评论、删除评论\"><a href=\"#编辑文章、删除文章、评论、删除评论\" class=\"headerlink\" title=\"编辑文章、删除文章、评论、删除评论\"></a>编辑文章、删除文章、评论、删除评论</h2><blockquote>\n<p>评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/:postId'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入评论的用户名，内容和文章id</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.insertComment([name,content,postId])</span><br><span class=\"line\">\t<span class=\"comment\">// 先通过文章id查找，然后评论数+1</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres_comments=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">\t\t\t\tres_comments+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// 更新评论数 res_comments</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePostComment([res_comments,postId])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此</p>\n<blockquote>\n<p>删除评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/comment/:commentId/remove'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> commentId=ctx.params.commentId</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres_comments=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>,res_comments)</span><br><span class=\"line\">\t\t\t\tres_comments-=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res_comments)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePostComment([res_comments,postId])</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deleteComment(commentId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t  ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除评论的功能吧</p>\n<blockquote>\n<p>删除文章</p>\n</blockquote>\n<p>只有自己发表的文字删除的文字才会显示出来，才能被删除，</p>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/remove'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deleteAllPostComment(postId)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deletePost(postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t &#125;\t</span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除文章的功能吧</p>\n<blockquote>\n<p>编辑文字</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get '/posts/:postId/edit'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/edit'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'修改文章'</span>,res)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'edit'</span>,&#123;</span><br><span class=\"line\">\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\tposts:res</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post '/posts/:postId/edit'</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/edit'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> title=ctx.request.body.title</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id=ctx.session.id</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePost([title,content,postId])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>修改views/edit.js </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%= posts[0]['title'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;input type=\"submit\" value=\"修改\"&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"built_in\">document</span>.URL,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'修改成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在试试编辑文字然后修改提交吧</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的</p>\n<p>所有的代码都在 <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a> 里面，如果觉得不错就star一下吧。有问题可以提问哟<br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Koa2-blog\"><a href=\"#Koa2-blog\" class=\"headerlink\" title=\"Koa2-blog\"></a>Koa2-blog</h2><p>Node+Koa2+Mysql 搭建简易博客</p>\n<h2 id=\"预览地址\"><a href=\"#预览地址\" class=\"headerlink\" title=\"预览地址\"></a>预览地址</h2><p><a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，<br>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a><br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^<br>ps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！</p>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><p><img src=\"http://www.wclimb.site/cdn/blog.gif\" alt=\"img\"></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>koa <code>v2.3.0</code></li>\n<li>mysql <code>v5.7.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> </p>\n<p>如果你已经配置好node和mysql可以跳过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本</span><br></pre></td></tr></table></figure>\n<p>下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin</span><br></pre></td></tr></table></figure>\n<p>然后开启mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>输入密码之后创建<code>database</code>(数据库)，<code>nodesql</code>是我们创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create database nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>记住sql语句后面一定要跟<code>;</code>符号，接下来看看我们创建好的数据库列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show databases;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.wclimb.site/cdn/database.png\" alt=\"img\"></p>\n<p>启用创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ use nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库中的表<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show tables;</span><br></pre></td></tr></table></figure></p>\n<p>显示<code>Empty set (0.00 sec)</code>，因为我们还没有建表，稍后会用代码建表<br>注释：<br>这是后面建表之后的状态<br><img src=\"http://www.wclimb.site/cdn/tables.png\" alt=\"img\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p><img src=\"http://www.wclimb.site/cdn/item.png\" alt=\"img\"></p>\n<ul>\n<li>config 存放默认文件</li>\n<li>lib 存放操作数据库文件</li>\n<li>middlewares 存放判断登录与否文件</li>\n<li>public 存放样式文件</li>\n<li>routes 存放路由文件</li>\n<li>views 存放模板文件</li>\n<li>index 程序主文件</li>\n<li>package.json 包括项目名、作者、依赖等等</li>\n</ul>\n<p>首先我们创建koa2-blog文件夹，然后<code>cd koa2-blog</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着使用 `npm init` 来创建package.json</span><br></pre></td></tr></table></figure></p>\n<p>接着安装包，安装之前我们使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs --save</span><br></pre></td></tr></table></figure>\n<p>各模块用处</p>\n<ol>\n<li><code>koa node</code>框架</li>\n<li><code>koa-bodyparser</code> 表单解析中间件</li>\n<li><code>koa-mysql-session</code>、<code>koa-session-minimal</code> 处理数据库的中间件</li>\n<li><code>koa-router</code> 路由中间件</li>\n<li><code>koa-static</code> 静态资源加载中间件</li>\n<li><code>ejs</code> 模板引擎</li>\n<li><code>md5</code> 密码加密</li>\n<li><code>moment</code> 时间中间件</li>\n<li><code>mysql</code> 数据库</li>\n<li><code>koa-views</code> 模板呈现中间件</li>\n</ol>\n<p>在文件夹里面新建所需文件</p>\n<p><img src=\"http://www.wclimb.site/cdn/view.png\" alt=\"img\"></p>\n<h2 id=\"首先配置config\"><a href=\"#首先配置config\" class=\"headerlink\" title=\"首先配置config\"></a>首先配置config</h2><p>我们新建<code>default.js</code>文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  // 启动端口</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据库配置</span><br><span class=\"line\">  database: &#123;</span><br><span class=\"line\">    DATABASE: &apos;nodesql&apos;,</span><br><span class=\"line\">    USERNAME: &apos;root&apos;,</span><br><span class=\"line\">    PASSWORD: &apos;123456&apos;,</span><br><span class=\"line\">    PORT: &apos;3306&apos;,</span><br><span class=\"line\">    HOST: &apos;localhost&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config</span><br></pre></td></tr></table></figure>\n<p>这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用</p>\n<h2 id=\"配置index-js文件\"><a href=\"#配置index-js文件\" class=\"headerlink\" title=\"配置index.js文件\"></a>配置index.js文件</h2><p><code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Koa=<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ejs=<span class=\"built_in\">require</span>(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session-minimal'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> MysqlStore = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-mysql-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/default.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> views = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-views'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> koaStatic = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app=<span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// session存储配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sessionMysqlConfig= &#123;</span><br><span class=\"line\">  user: config.database.USERNAME,</span><br><span class=\"line\">  password: config.database.PASSWORD,</span><br><span class=\"line\">  database: config.database.DATABASE,</span><br><span class=\"line\">  host: config.database.HOST,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置session中间件</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  key: <span class=\"string\">'USER_SID'</span>,</span><br><span class=\"line\">  store: <span class=\"keyword\">new</span> MysqlStore(sessionMysqlConfig)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源加载中间件</span></span><br><span class=\"line\">app.use(koaStatic(</span><br><span class=\"line\">  path.join(__dirname , <span class=\"string\">'./public'</span>)</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置服务端模板渲染引擎中间件</span></span><br><span class=\"line\">app.use(views(path.join(__dirname, <span class=\"string\">'./views'</span>), &#123;</span><br><span class=\"line\">  extension: <span class=\"string\">'ejs'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用表单解析中间件</span></span><br><span class=\"line\">app.use(bodyParser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用新建的路由文件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/signin.js').routes())</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signup.js'</span>).routes())</span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/posts.js').routes())</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(require('./routers/signout.js').routes())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听在3000端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>koa-session-minimal`</code>koa-mysql-session<code>来进行数据库的操作\n使用</code>koa-static<code>配置静态资源，目录设置为</code>public<code>使用</code>ejs<code>模板引擎\n使用</code>koa-bodyparser<code>来解析提交的表单信息\n使用</code>koa-router`做路由</p>\n<p>之前我们配置了default.js，我们就可以在这里使用了<br>首先引入进来 var config = require(‘./config/default.js’);<br>然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。</p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"配置lib的mysql-js文件\"><a href=\"#配置lib的mysql-js文件\" class=\"headerlink\" title=\"配置lib的mysql.js文件\"></a>配置lib的mysql.js文件</h2><p>关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数<code>query</code>，通过返回promise的方式以便可以方便用<code>.then()</code>来获取数据库返回的数据，然后我们定义了三个表的字段，通过<code>createTable</code>来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。</p>\n<blockquote>\n<p>这里只介绍注册用户insertData，后续的可以自行查看，都差不多</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users(name,pass) values(?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name和pass，就是用户名和密码，后面values(?,?)意思很简单，你有几个值就写几个问号，最后调用<code>query</code>函数把sql语句传进去</p>\n<p>lib/mysql.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/default.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool  = mysql.createPool(&#123;</span><br><span class=\"line\">  host     : config.database.HOST,</span><br><span class=\"line\">  user     : config.database.USERNAME,</span><br><span class=\"line\">  password : config.database.PASSWORD,</span><br><span class=\"line\">  database : config.database.DATABASE</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql, values </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\"> resolve, reject </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        resolve( err )</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, ( err, rows) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( err ) &#123;</span><br><span class=\"line\">            reject( err )</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve( rows )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">users=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists users(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> pass VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\">posts=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists posts(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> title VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> content  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> uid  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> moment  VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> comments  VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\"> pv  VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\">comment=</span><br><span class=\"line\"><span class=\"string\">`create table if not exists comment(</span></span><br><span class=\"line\"><span class=\"string\"> id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\"> name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> content VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> postid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\"> PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">);`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( sql, [] )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建表</span></span><br><span class=\"line\">createTable(users)</span><br><span class=\"line\">createTable(posts)</span><br><span class=\"line\">createTable(comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users(name,pass) values(?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发表文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertPost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into posts(name,title,content,uid,moment) values(?,?,?,?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新文章评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set  comments=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新浏览数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostPv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set  pv=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into comment(name,content,postid) values(?,?,?);\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from users</span></span><br><span class=\"line\"><span class=\"string\">      where name=\"<span class=\"subst\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章的名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByUser = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from posts</span></span><br><span class=\"line\"><span class=\"string\">      where name=\"<span class=\"subst\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * from posts</span></span><br><span class=\"line\"><span class=\"string\">      where id=\"<span class=\"subst\">$&#123;id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过评论id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * FROM comment where postid=\"<span class=\"subst\">$&#123;id&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAllPost = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT * FROM posts</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新修改文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`update posts set  title=?,content=? where id=?`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql,values)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deletePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from posts where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from comment where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除所有评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAllPostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`delete from comment where postid = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql=<span class=\"string\">`select content from comment where postid in (select id from posts where id=<span class=\"subst\">$&#123;id&#125;</span>)`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">  query,</span><br><span class=\"line\">  createTable,</span><br><span class=\"line\">  insertData,</span><br><span class=\"line\">  findDataByName,</span><br><span class=\"line\">  insertPost,</span><br><span class=\"line\">  findAllPost,</span><br><span class=\"line\">  findDataByUser,</span><br><span class=\"line\">  findDataById,</span><br><span class=\"line\">  insertComment,</span><br><span class=\"line\">  findCommentById,</span><br><span class=\"line\">  updatePost,</span><br><span class=\"line\">  deletePost,</span><br><span class=\"line\">  deleteComment,</span><br><span class=\"line\">  findCommentLength,</span><br><span class=\"line\">  updatePostComment,</span><br><span class=\"line\">  deleteAllPostComment,</span><br><span class=\"line\">  updatePostPv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是我们建的表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">users</th>\n<th style=\"text-align:center\">posts</th>\n<th style=\"text-align:center\">comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pass</td>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">content</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">content</td>\n<td style=\"text-align:center\">postid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">uid</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">pv</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>id主键递增</li>\n<li>name: 用户名</li>\n<li>pass：密码</li>\n<li>title：文章标题</li>\n<li>content：文章内容和评论</li>\n<li>uid：发表文章的用户id </li>\n<li>moment：创建时间</li>\n<li>comments：文章评论数</li>\n<li>pv：文章浏览数</li>\n<li>postid：文章id</li>\n</ul>\n<p>现在感觉有点枯燥，那我们先来实现一下注册吧</p>\n<h2 id=\"实现注册页面\"><a href=\"#实现注册页面\" class=\"headerlink\" title=\"实现注册页面\"></a>实现注册页面</h2><p>routers/singup.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET '/signup' 注册页</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\"> <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;\t\t</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>使用get方式得到’/signup’页面，然后渲染signup模板，这里我们还没有在写signup.ejs</p>\n<p>views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们先安装supervisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i supervisor</span><br></pre></td></tr></table></figure>\n<p>supervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p>现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭</p>\n<h2 id=\"完善注册功能\"><a href=\"#完善注册功能\" class=\"headerlink\" title=\"完善注册功能\"></a>完善注册功能</h2><p>首先我们来完善一下样式吧，稍微美化一下</p>\n<p>public/index.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>,<span class=\"selector-tag\">p</span>,<span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">span</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -moz-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -ms-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -o-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.user_name</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span>,<span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span>,<span class=\"selector-class\">.none_user</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_title</span> <span class=\"selector-tag\">p</span>,<span class=\"selector-class\">.post_content</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_time</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post_3</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_3</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_title</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost_user</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.edit</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.edit</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.submit</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">20px</span> ;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.create</span> <span class=\"selector-tag\">label</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> <span class=\"selector-tag\">form</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span>,<span class=\"selector-class\">.delete_post</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.delete_post</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再把模板引擎的header和footer独立出来</p>\n<p>/views/header.ejs<br>顺便引入index.css和jq<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>/views/footer.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>修改views/signup.ejs </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改routers/signup.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5=<span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST '/signup' 注册页</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user=&#123;</span><br><span class=\"line\">\t\tname:ctx.request.body.name,</span><br><span class=\"line\">\t\tpass:ctx.request.body.password,</span><br><span class=\"line\">\t\trepeatpass:ctx.request.body.repeatpass</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataByName(user.name)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// var res=JSON.parse(JSON.stringify(reslut))</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result.length)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户存在'</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">catch</span> (error)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//处理err</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(error)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (user.pass!==user.repeatpass || user.pass==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdata:<span class=\"number\">3</span></span><br><span class=\"line\">\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// ctx.session.user=ctx.request.body.name</span></span><br><span class=\"line\">\t\t\t \t\tuserModel.insertData([ctx.request.body.name,md5(ctx.request.body.password)])</span><br><span class=\"line\">\t\t\t\t&#125;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们使用md5实现密码加密</li>\n<li>使用我们之前说的<code>bodyParse</code>来解析提交的数据，通过<code>ctx.request.body</code>得到</li>\n<li>我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中</li>\n<li>ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后<code>msg.data=1</code>的时候就代表用户存在，<code>msg.data</code>出现在后面的<code>signup.ejs</code>模板ajax请求中</li>\n</ul>\n<p>我们使用ajax来提交数据，方便来做成功错误的处理</p>\n<h2 id=\"模板引擎ejs\"><a href=\"#模板引擎ejs\" class=\"headerlink\" title=\"模板引擎ejs\"></a>模板引擎ejs</h2><p>我们使用的是ejs，语法可以见<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs官网</a></p>\n<p>之前我们写了这么一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了<br>ejs的常用标签为：</p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ul>\n<p><code>&lt;%= code %&gt;</code>和<code>&lt;%- code %&gt;</code>的区别在于，&lt;%= code %&gt;不管你写什么都会原样输出，比如code为 <code>&lt;strong&gt;hello&lt;/strong&gt;</code>的时候 <code>&lt;%= code %&gt;</code> 会显示<code>&lt;strong&gt;hello&lt;/strong&gt;</code><br>而<code>&lt;%- code %&gt;</code>则显示加粗的hello</p>\n<p>修改/views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signup\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\">\t               \t\t</span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'用户名存在'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'请输入重复的密码'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               \t\t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data == <span class=\"number\">3</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'注册成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/signin\"</span></span></span><br><span class=\"line\">\t\t  </span><br><span class=\"line\">\t               \t\t&#125;,1000)</span><br><span class=\"line\">\t               &#125;\t              </span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"comment\">//console.log($('.ui.error.message').text);</span></span></span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中</p>\n<p>修改/views/header.ejs</p>\n<blockquote>\n<p> 我们之前在/routers/signup.js get ‘/signup’ 中 向模板传递了session参数  session:ctx.session,存取的就是用户的信息，包括用户名、登录之后的id等，之所以可以通过ctx.session获取到，因为我们在后面登录的时候已经赋值 如ctx.session.user=res[0][‘name’]</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tuser：</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t未登录</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(data).css(<span class=\"string\">'display'</span>)!==<span class=\"string\">'none'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">       \t\t<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       \t\t\t$(data).show()</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以看到，如果不存在用户，则只显示<code>全部文章</code> <code>注册</code> <code>登录</code> ,如果session.user存在则有登出的按钮</p>\n<p>我们可以看到当状态data为 3 的时候window.location.href=”/signin”<br>为了方便跳转，我们先简单实现一下signin页面</p>\n<p>修改 /routers/signin.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/signin'登录页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>修改 /views/signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signin.js'</span>).routes())</span><br></pre></td></tr></table></figure>\n<p>现在注册一下来看看效果吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/signup.png\" alt=\"img\"></p>\n<p>我们怎么查看我们注册好的账号和密码呢？打开mysql控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from users;</span><br></pre></td></tr></table></figure>\n<p>这样刚刚我们注册的用户信息都出现了<br><img src=\"/img/users.png\" alt=\"img\"></p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h2><p>修改signin<br>routers/signin.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5=<span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/signin'登录页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post '/signin'登录页面</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signin'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.request.body.name;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pass=ctx.request.body.password;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 这里先查找用户名存在与否，存在则判断密码正确与否，不存在就返回false</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataByName(name)</span><br><span class=\"line\">\t \t.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t \t<span class=\"comment\">// console.log(reslut)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> res=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (name === res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>] &amp;&amp; md5(pass) === res[<span class=\"number\">0</span>][<span class=\"string\">'pass'</span>]) &#123;</span><br><span class=\"line\">\t\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ctx.flash.success='登录成功!';</span></span><br><span class=\"line\">\t\t\t\tctx.session.user=res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>]</span><br><span class=\"line\">\t\t\t\tctx.session.id=res[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.session.id'</span>,ctx.session.id)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ctx.redirect('/posts')</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'session'</span>,ctx.session)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">\t\t\t&#125;\t\t\t\t</span><br><span class=\"line\">\t\t &#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t \tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'用户名或密码错误!'</span>)</span><br><span class=\"line\">\t\t \t<span class=\"comment\">// ctx.redirect('/signin')</span></span><br><span class=\"line\">\t\t &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密<br>我们可以看到登录成功返回的结果是<code>result</code> 然后处理一下 var res=JSON.parse(JSON.stringify(result))<br>为什么呢？<br>因为返回的结果是这样的一个数组：id：4 name：rrr  pass：…<br>[ RowDataPacket { id: 4, name: ‘rrr’, pass: ‘44f437ced647ec3f40fa0841041871cd’ } ]</p>\n<p>修改views/signin.ejs<br>signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signin\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (!msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'用户名或密码错误'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.error'</span>)</span></span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'登录成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t               \t\t&#125;,1000)    \t</span><br><span class=\"line\">\t               &#125;      </span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"comment\">//console.log($('.ui.error.message').text);</span></span></span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们增加了ajax请求，在routers/singin.js里，我们设置如果登录失败就返回false，登录成功返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.body=&apos;false&apos;</span><br><span class=\"line\">ctx.body=&apos;true&apos;</span><br></pre></td></tr></table></figure></p>\n<p>那我们登录成功后要做跳转，可以看到<code>window.location.href=&quot;/posts&quot;</code>跳转到posts页面</p>\n<h2 id=\"全部文章\"><a href=\"#全部文章\" class=\"headerlink\" title=\"全部文章\"></a>全部文章</h2><p>修改routers/posts.js</p>\n<p>posts.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"comment\">// 处理数据库（之前已经写好，在mysql.js）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userModel=<span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 时间中间件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moment=<span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get '/'页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\tctx.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// get '/posts'页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉</p>\n<p>修改 views/posts.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% include header %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\tposts</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% include footer %&gt;</span><br></pre></td></tr></table></figure>\n<p>现在看看登录成功之后的页面吧</p>\n<p>接下来我们事先登出页面</p>\n<h2 id=\"登出页面\"><a href=\"#登出页面\" class=\"headerlink\" title=\"登出页面\"></a>登出页面</h2><p>修改 router/signout.js<br>signout.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signout'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\tctx.session=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure>\n<p>把session设置为null即可</p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉，现在把注释的路由全部取消注释就对了</p>\n<p>然后修改 views/header.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\tuser：</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t未登录</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"success\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(data).css(<span class=\"string\">'display'</span>)!==<span class=\"string\">'none'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">       \t\t<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       \t\t\t$(data).show()</span></span><br><span class=\"line\"><span class=\"javascript\">           \t\t$(data).fadeOut(<span class=\"number\">1500</span>)</span></span><br><span class=\"line\">       \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.signout'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">\"/signout\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"GET\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'登出成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t               \t\t&#125;,1000)      \t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>增加点击登出后的ajax 的提交，成功之后回到posts页面</p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>修改router/posts<br>在后面增加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get '/create'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'create'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// psot '/create'</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.session.user)\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> title=ctx.request.body.title</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id=ctx.session.id</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> time=moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log([name,title,content,id,time])</span><br><span class=\"line\">\t<span class=\"comment\">// 这里我们向数据库插入用户名、标题、内容、发表文章用户的id、时间，成功返回true，失败为false</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.insertPost([name,title,content,id,time])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>修改 views/create.ejs</p>\n<p>create.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">\"/create\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">               &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  $(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                  fade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">                  &#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看能不能发表吧</p>\n<p>即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据</p>\n<p>接下来</p>\n<p>修改 routers/posts.js</p>\n<p>修改 get ‘/posts’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 这里我们先通过查找有没有类似/posts?author=XXX 的连接跳转，如果有就执行下面这句话，把用户名取下来，由于用户名存在中文，所以我们进行解码</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>,<span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> userModel.findDataByUser(<span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\t\tposts:res\t</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接是正常的 如 /posts 则我们获取的是全部文章的列表，所以通过findAllPost查找全部文章并向模板传递数据posts， posts的值为res</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result)) </span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'post'</span>,res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>,&#123;</span><br><span class=\"line\">\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\tposts:res\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>if (ctx.request.querystring) {}这部分我们先不用管，后面会说。只需要看else后面的代码我们查找我们发表的全部文章然后将获取到的值定义为posts，传给模板posts.ejs，这样就可以渲染出来了</p>\n<p>修改 Views/posts.ejs</p>\n<p>posts.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_3\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_user\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res['name'] %&gt;\"</span>&gt;</span>作者: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_comments\"</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">comments</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_pv\"</span>&gt;</span>浏览数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">pv</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res['id'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">title</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_time\"</span>&gt;</span>发表时间：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">moment</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看posts页面有没有文章出现了</p>\n<p>我们看到是所有的文章，但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？</p>\n<p>修改 routers/posts.js</p>\n<p>在posts.js后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(ctx.params.postId)</span><br><span class=\"line\">\t<span class=\"comment\">// 通过文章id查找返回数据，然后增加pv 浏览 +1 </span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(ctx.params.postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t\tres_pv=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'pv'</span>])</span><br><span class=\"line\">\t\t\t\tres_pv+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 渲染模板，并传递三个数据\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'sPost'</span>,&#123;</span><br><span class=\"line\">\t\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\t\tposts:res</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增</p>\n<p>我们通过userModel.findDataById 文章的id来查找数据库<br>我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能</p>\n<h2 id=\"单篇文章页\"><a href=\"#单篇文章页\" class=\"headerlink\" title=\"单篇文章页\"></a>单篇文章页</h2><p>修改 views/sPost.ejs</p>\n<p>sPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spost\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spost_user\"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= posts[0]['name'] %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= posts[0]['id'] %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">title</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">content</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span>===  <span class=\"string\">posts[0][</span>'<span class=\"attr\">name</span>']  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= posts[0]['id'] %&gt;/edit\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_post\"</span> &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.delete_post'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\turl:<span class=\"string\">\"&lt;%= posts[0]['id'] %&gt;/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\ttype:<span class=\"string\">'GET'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data==<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'删除文章成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span>\t</span></span><br><span class=\"line\">               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data==<span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'删除文章失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tfade(<span class=\"string\">'.error'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_list\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">comments.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_lists\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\tcontent: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\tBy: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">res[</span>'<span class=\"attr\">name</span>']  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_comment\"</span>&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'.delete_comment'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\turl:\"<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">id</span>'] %&gt;</span>/comment/<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">id</span>'] %&gt;</span>/remove\",</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\ttype:<span class=\"string\">'GET'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data==<span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'删除留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data==<span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t$(<span class=\"string\">'.error'</span>).text(<span class=\"string\">'删除留言失败'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tfade(<span class=\"string\">'.error'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/&lt;%= posts[0]['id'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t            url: <span class=\"string\">'/'</span>+<span class=\"built_in\">document</span>.URL.slice(<span class=\"built_in\">document</span>.URL.lastIndexOf(<span class=\"string\">'/'</span>)+<span class=\"number\">1</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            data:$(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'发表留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t               \t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t               \t\t&#125;,1000)  \t</span><br><span class=\"line\">\t               &#125;</span><br><span class=\"line\">\t            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户发表的文章列表，我们之前在 get ‘/posts’ 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了应该处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了<code>ctx.request.querystring</code> 获取到的是：<code>author=XXX</code></p>\n<p>注：这里我们处理了，通过判断 <code>session.user ===  res[&#39;name&#39;]</code> 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签</p>\n<h2 id=\"编辑文章、删除文章、评论、删除评论\"><a href=\"#编辑文章、删除文章、评论、删除评论\" class=\"headerlink\" title=\"编辑文章、删除文章、评论、删除评论\"></a>编辑文章、删除文章、评论、删除评论</h2><blockquote>\n<p>评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/:postId'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 插入评论的用户名，内容和文章id</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.insertComment([name,content,postId])</span><br><span class=\"line\">\t<span class=\"comment\">// 先通过文章id查找，然后评论数+1</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres_comments=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">\t\t\t\tres_comments+=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// 更新评论数 res_comments</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePostComment([res_comments,postId])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此</p>\n<blockquote>\n<p>删除评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/comment/:commentId/remove'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> commentId=ctx.params.commentId</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\tres_comments=<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>,res_comments)</span><br><span class=\"line\">\t\t\t\tres_comments-=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(res_comments)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePostComment([res_comments,postId])</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deleteComment(commentId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t  ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除评论的功能吧</p>\n<blockquote>\n<p>删除文章</p>\n</blockquote>\n<p>只有自己发表的文字删除的文字才会显示出来，才能被删除，</p>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/remove'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deleteAllPostComment(postId)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.deletePost(postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t ctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t &#125;\t</span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=&#123;</span><br><span class=\"line\">\t\t\t \tdata:<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t &#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除文章的功能吧</p>\n<blockquote>\n<p>编辑文字</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get '/posts/:postId/edit'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/edit'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name=ctx.session.user</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tres=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(result))</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'修改文章'</span>,res)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'edit'</span>,&#123;</span><br><span class=\"line\">\t\t\tsession:ctx.session,</span><br><span class=\"line\">\t\t\tposts:res</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post '/posts/:postId/edit'</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/edit'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> title=ctx.request.body.title</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> content=ctx.request.body.content</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id=ctx.session.id</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> postId=ctx.params.postId</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> userModel.updatePost([title,content,postId])</span><br><span class=\"line\">\t\t.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'true'</span></span><br><span class=\"line\">\t\t&#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tctx.body=<span class=\"string\">'false'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>修改views/edit.js </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%= posts[0]['title'] %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts</span>[<span class=\"attr\">0</span>]['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;input type=\"submit\" value=\"修改\"&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"built_in\">document</span>.URL,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\t$(<span class=\"string\">'.success'</span>).text(<span class=\"string\">'修改成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'.success'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在试试编辑文字然后修改提交吧</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的</p>\n<p>所有的代码都在 <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a> 里面，如果觉得不错就star一下吧。有问题可以提问哟<br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^</p>"},{"title":"tags","date":"2017-06-27T13:01:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-27 21:01:51\ntype: \"tags\"\n---\n","updated":"2019-06-06T01:06:26.437Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck411nsea006d59x3r2bod2ft","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-27T13:44:22.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2017-06-27 21:44:22\n---\n","updated":"2019-06-06T01:06:26.437Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"ck411nsea006e59x3j75y0025","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker快速入门","date":"2019-12-03T01:18:04.000Z","_content":"\n\n\n## 什么是Docker？\n\n`Docker` 是一个开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 `Linux` 机器上，也可以实现虚拟化\n\n## 为什么要用Docker\n\n\n### 更高效的利用系统资源\n\n  由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，`Docker` 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n### 更快速的启动时间\n\n\n  传统的虚拟机技术启动应用服务往往需要数分钟，而 `Docker` 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。\n<!-- more -->\n### 一致的运行环境\n\n  开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 `bug` 并未在开发过程中被发现。而 `Docker` 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题\n### 持续交付和部署\n\n  对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。\n\n  使用 `Docker` 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 `Dockerfile` 来进行镜像构建，并结合 持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署系统进行自动部署。\n\n  而且使用 `Dockerfile` 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。\n\n### 更轻松的迁移\n\n  由于 `Docker` 确保了执行环境的一致性，使得应用的迁移更加容易。`Docker` 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n### 更轻松的维护和扩展\n\n  使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，`Docker` 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n### 对比传统虚拟机总结\n\n| 特性   | 容器    |  虚拟机  |\n| :----: | :----:   | :----: |\n|   启动    |   秒级    |   分钟级    |\n|   硬盘使用    |   一般为 MB    |   一般为 GB    |\n|   性能    |   接近原生    |   弱于    |\n|  系统支持量    | 单机支持上千个容器      |   一般几十个    |\n\n\n以上摘自 https://yeasy.gitbooks.io/docker_practice/introduction/why.html\n\n\n## 安装\n\n1. 注册账号 https://hub.docker.com/\n2. 下载安装Docker [mac安装地址](https://download.docker.com/mac/stable/Docker.dmg)\n3. 命令行输入 `docker --version` 查看当前 `Docker` 版本\n4. 镜像加速，鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。`Docker for mac 应用图标 -> Perferences... -> Daemon -> Registry mirrors`，在列表中填写加速器地址 `http://hub-mirror.c.163.com`。修改完成之后点击 Apply & Restart 按钮。最后我们输入命令行 `docker info` 查看当前使用的镜像\n\n\n## 实战\n\n我们先快速搭建一个`web`服务器\n命令行输入\n```\ndocker run -p 80 --name web -it centos /bin/bash\n```\n然后安装 `nginx`\n```\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\nyum install -y nginx\n```\n安装完成可以通过命令`whereis nginx`查看安装路径，最后输入一下命令\n```\nnginx\n```\n最后我们执行 `ctrl + P + Q` 切换到后台，输入命令 `docker ps -a` 查看分配的端口号，我这里是端口号是32768\n\n```\nCONTAINER ID    IMAGE      COMMAND         CREATED            STATUS               PORTS                   NAMES\n3db42e2903a0    centos    \"/bin/bash\"    About a minute ago   Up About a minute    0.0.0.0:32768->80/tcp    web\n```\n\n浏览器输入 http://localhost:32768 ，看到 `Welcome to nginx` 就算成功了\n\n\n那么我们刚刚输入的一系列命令代表什么意思呢？\n\n我们输入`docker run -p 80 --name web -it centos /bin/bash` \n\n- `docker run`表示运行一个新的容器，`Docker` 首先在本机中寻找该镜像，如果没有安装，`Docker` 在 `Docker Hub` 上查找该镜像并下载安装到本机，最后 `Docker` 创建一个新的容器并启动该程序\n- `-i` 选项是让容器标准输入打开，就可以接受键盘输入了\n- `-t` 选项是让docker分配一个伪终端，绑定到标准输入上。通过这个伪终端就可以像操作一台 `linux` 机器来操作这个容器了\n- `--name` <容器名称> 选项为容器指定一个名称，这里是`web`\n- `-p 80` 告诉`docker`开放`80`端口\n\n我们需要注意的是，`docker run`每次都会创建一个新的容器，如果需要操作之前创建的容器\n\n重启容器\n```\ndocker start web\n```\n\n进入容器\n```\ndocker attach web\n```\n\n停止容器\n```\ndocker stop web\n```\n## 镜像\n\n我们运行容器都需要镜像，上面我们使用到的的镜像是 `centos`\n\n查看本地镜像\n```\ndocker images\n```\n显示\n```\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nnodejs                latest              779742e01ba3        2 weeks ago         907MB\nnode                  latest              4ac0e1872789        5 weeks ago         933MB\nnginx                 latest              540a289bab6c        5 weeks ago         126MB\nnginx                 stable-alpine       aaad4724567b        6 weeks ago         21.2MB\ncentos                latest              0f3e07c0138f        2 months ago        220MB\n```\n\n- `REPOSITORY`：仓库名称。\n- `TAG`： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。\n- `IMAGE ID` ：镜像唯一ID。\n- `CREATED` ：创建时间。\n- `SIZE` ：镜像大小。\n\n如果第一次我们通过 `docker pull centos:latest` 拉取镜像，那么当我们执行 `docker run -p 80 --name web -it centos /bin/bash` 时，它就不会再去远程获取了，因为本机中已经安装该镜像，所以 `Docker` 会直接创建一个新的容器并启动该程序。\n\n事实上，镜像有很多，我们可以在 https://hub.docker.com 搜索仓库，输入框输入`nginx`，会出现很多nginx相关的镜像，我们也可以使用 `docker search nginx` 获取镜像列表\n```\n$ docker search nginx\n\nNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                             Official build of Nginx.                        12284               [OK]\njwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1696                                    [OK]\nricharvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   746                                     [OK]\n......\n```\n直接通过 `docker pull nginx` 就可以拉取镜像\n\n\n## 构建自己的镜像\n\n要想构建自己的镜像，需要有一个`Dockerfile`文件，现在我们尝试把 `node` 程序 `Docker` 化\n\n### 创建 Node.js 应用\n```js\n{\n  \"name\": \"docker_web_app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"author\": \"First Last <first.last@example.com>\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.16.1\"\n  }\n}\n```\n然后，创建一个 `server.js` 文件，使用 `Express.js` 框架定义一个 Web 应用\n```js\n'use strict';\n\nconst express = require('express');\n\n// Constants\nconst PORT = 8080;\nconst HOST = '0.0.0.0';\n\n// App\nconst app = express();\napp.get('/', (req, res) => {\n  res.send('Hello world\\n');\n});\n\napp.listen(PORT, HOST);\nconsole.log(`Running on http://${HOST}:${PORT}`);\n\n```\n### Dockerfile\n\n创建一个空文件，命名为 Dockerfile\n```\ntouch Dockerfile\n```\nDockerfile\n```\n# node版本为10的镜像\nFROM node:10\n\n# 应用程序工作目录\nWORKDIR /usr/src/app\n\n# 拷贝文件，有两种方法ADD、COPY，用法都一样，唯一不同的是 ADD  支持将归档文件（tar, gzip, bzip2, etc）做提取和解压操作\n# 注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。\nCOPY package*.json ./\n\n# 执行命令\nRUN npm install\n\nCOPY . .\n\n# 暴露端口\nEXPOSE 8080\n\n# 执行命令 node server.js\nCMD [ \"node\", \"server.js\" ]\n```\n\n### .dockerignore 文件\n\n在 `Dockerfile` 的同一个文件夹中创建一个 `.dockerignore` 文件，带有以下内容\n```\nnode_modules\nnpm-debug.log\n```\n这将避免你的本地模块以及调试日志被拷贝进入到你的 `Docker` 镜像中，以至于把你镜像原有安装的模块给覆盖了\n\n\n### 构建你的镜像\n\n构建需要一点时间\n```\ndocker build -t wclimb/node-web-app .\n```\n然后查看刚刚构建的镜像\n\n```\ndocker images\n\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nwclimb/node-web-app   latest              04fe1cd8e0b2        49 seconds ago      907MB\n```\n\n### 运行镜像\n\n```\ndocker run -p 49160:8080 -d wclimb/node-web-app\n```\n查看刚刚运行的容器\n```\ndocker ps \nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                               NAMES\nffe453510350        wclimb/node-web-app   \"docker-entrypoint.s…\"   4 seconds ago       Up 3 seconds        8081/tcp, 0.0.0.0:49160->8080/tcp   unruffled_kare\n```\n\n查看容器内的`log`信息\n```\ndocker logs CONTAINER ID\n打印出\nRunning on http://0.0.0.0:8080\n```\n访问 http://0.0.0.0:8080 出现`hello world`\n\n### 将镜像推送到远程仓库\n\n```\ndocker push wclimb/node-web-app:v1\n```\n格式为 `docker push [OPTIONS] NAME[:TAG]`，这里`TAG`为`v1`\n\n\n## 总结\n\n至此简单入门的`docker`教程就全部结束了，我们首先安装docker -> 创建容器 -> 搜索拉取镜像 -> 构建自己的镜像(`Dockerfile`) -> 发布镜像，文章大部分其实参阅了各个平台的教程或者文档。简单的`docker`就这样跑起来了，但是真正我们去使用的时候往往会有很多问题，用法也不是直接这么暴力的去使用，例如直接拉取 `centos` 镜像往里面安装 `nginx`，会很浪费资源，也没有做到真正的隔离环境。下一篇讲使用`docker-compose`讲多个容器组合起来，尽可能实战操作\n\n## reference\n\n[把一个 Node.js web 应用程序给 Docker 化](https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/)\n[30 分钟快速入门 Docker 教程](https://juejin.im/post/5cacbfd7e51d456e8833390)\n[Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice/)\n\n\n本文地址： http://www.wclimb.site/2019/12/03/Docker快速入门/","source":"_posts/Docker快速入门.md","raw":"---\ntitle: Docker快速入门\ndate: 2019-12-03 09:18:04\ntags:\n- 原创\n- 教程\n- Docker\ncategories: [Docker, 教程]\n---\n\n\n\n## 什么是Docker？\n\n`Docker` 是一个开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 `Linux` 机器上，也可以实现虚拟化\n\n## 为什么要用Docker\n\n\n### 更高效的利用系统资源\n\n  由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，`Docker` 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n### 更快速的启动时间\n\n\n  传统的虚拟机技术启动应用服务往往需要数分钟，而 `Docker` 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。\n<!-- more -->\n### 一致的运行环境\n\n  开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 `bug` 并未在开发过程中被发现。而 `Docker` 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题\n### 持续交付和部署\n\n  对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。\n\n  使用 `Docker` 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 `Dockerfile` 来进行镜像构建，并结合 持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署系统进行自动部署。\n\n  而且使用 `Dockerfile` 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。\n\n### 更轻松的迁移\n\n  由于 `Docker` 确保了执行环境的一致性，使得应用的迁移更加容易。`Docker` 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n### 更轻松的维护和扩展\n\n  使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，`Docker` 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n### 对比传统虚拟机总结\n\n| 特性   | 容器    |  虚拟机  |\n| :----: | :----:   | :----: |\n|   启动    |   秒级    |   分钟级    |\n|   硬盘使用    |   一般为 MB    |   一般为 GB    |\n|   性能    |   接近原生    |   弱于    |\n|  系统支持量    | 单机支持上千个容器      |   一般几十个    |\n\n\n以上摘自 https://yeasy.gitbooks.io/docker_practice/introduction/why.html\n\n\n## 安装\n\n1. 注册账号 https://hub.docker.com/\n2. 下载安装Docker [mac安装地址](https://download.docker.com/mac/stable/Docker.dmg)\n3. 命令行输入 `docker --version` 查看当前 `Docker` 版本\n4. 镜像加速，鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。`Docker for mac 应用图标 -> Perferences... -> Daemon -> Registry mirrors`，在列表中填写加速器地址 `http://hub-mirror.c.163.com`。修改完成之后点击 Apply & Restart 按钮。最后我们输入命令行 `docker info` 查看当前使用的镜像\n\n\n## 实战\n\n我们先快速搭建一个`web`服务器\n命令行输入\n```\ndocker run -p 80 --name web -it centos /bin/bash\n```\n然后安装 `nginx`\n```\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\nyum install -y nginx\n```\n安装完成可以通过命令`whereis nginx`查看安装路径，最后输入一下命令\n```\nnginx\n```\n最后我们执行 `ctrl + P + Q` 切换到后台，输入命令 `docker ps -a` 查看分配的端口号，我这里是端口号是32768\n\n```\nCONTAINER ID    IMAGE      COMMAND         CREATED            STATUS               PORTS                   NAMES\n3db42e2903a0    centos    \"/bin/bash\"    About a minute ago   Up About a minute    0.0.0.0:32768->80/tcp    web\n```\n\n浏览器输入 http://localhost:32768 ，看到 `Welcome to nginx` 就算成功了\n\n\n那么我们刚刚输入的一系列命令代表什么意思呢？\n\n我们输入`docker run -p 80 --name web -it centos /bin/bash` \n\n- `docker run`表示运行一个新的容器，`Docker` 首先在本机中寻找该镜像，如果没有安装，`Docker` 在 `Docker Hub` 上查找该镜像并下载安装到本机，最后 `Docker` 创建一个新的容器并启动该程序\n- `-i` 选项是让容器标准输入打开，就可以接受键盘输入了\n- `-t` 选项是让docker分配一个伪终端，绑定到标准输入上。通过这个伪终端就可以像操作一台 `linux` 机器来操作这个容器了\n- `--name` <容器名称> 选项为容器指定一个名称，这里是`web`\n- `-p 80` 告诉`docker`开放`80`端口\n\n我们需要注意的是，`docker run`每次都会创建一个新的容器，如果需要操作之前创建的容器\n\n重启容器\n```\ndocker start web\n```\n\n进入容器\n```\ndocker attach web\n```\n\n停止容器\n```\ndocker stop web\n```\n## 镜像\n\n我们运行容器都需要镜像，上面我们使用到的的镜像是 `centos`\n\n查看本地镜像\n```\ndocker images\n```\n显示\n```\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nnodejs                latest              779742e01ba3        2 weeks ago         907MB\nnode                  latest              4ac0e1872789        5 weeks ago         933MB\nnginx                 latest              540a289bab6c        5 weeks ago         126MB\nnginx                 stable-alpine       aaad4724567b        6 weeks ago         21.2MB\ncentos                latest              0f3e07c0138f        2 months ago        220MB\n```\n\n- `REPOSITORY`：仓库名称。\n- `TAG`： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。\n- `IMAGE ID` ：镜像唯一ID。\n- `CREATED` ：创建时间。\n- `SIZE` ：镜像大小。\n\n如果第一次我们通过 `docker pull centos:latest` 拉取镜像，那么当我们执行 `docker run -p 80 --name web -it centos /bin/bash` 时，它就不会再去远程获取了，因为本机中已经安装该镜像，所以 `Docker` 会直接创建一个新的容器并启动该程序。\n\n事实上，镜像有很多，我们可以在 https://hub.docker.com 搜索仓库，输入框输入`nginx`，会出现很多nginx相关的镜像，我们也可以使用 `docker search nginx` 获取镜像列表\n```\n$ docker search nginx\n\nNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                             Official build of Nginx.                        12284               [OK]\njwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1696                                    [OK]\nricharvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   746                                     [OK]\n......\n```\n直接通过 `docker pull nginx` 就可以拉取镜像\n\n\n## 构建自己的镜像\n\n要想构建自己的镜像，需要有一个`Dockerfile`文件，现在我们尝试把 `node` 程序 `Docker` 化\n\n### 创建 Node.js 应用\n```js\n{\n  \"name\": \"docker_web_app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"author\": \"First Last <first.last@example.com>\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.16.1\"\n  }\n}\n```\n然后，创建一个 `server.js` 文件，使用 `Express.js` 框架定义一个 Web 应用\n```js\n'use strict';\n\nconst express = require('express');\n\n// Constants\nconst PORT = 8080;\nconst HOST = '0.0.0.0';\n\n// App\nconst app = express();\napp.get('/', (req, res) => {\n  res.send('Hello world\\n');\n});\n\napp.listen(PORT, HOST);\nconsole.log(`Running on http://${HOST}:${PORT}`);\n\n```\n### Dockerfile\n\n创建一个空文件，命名为 Dockerfile\n```\ntouch Dockerfile\n```\nDockerfile\n```\n# node版本为10的镜像\nFROM node:10\n\n# 应用程序工作目录\nWORKDIR /usr/src/app\n\n# 拷贝文件，有两种方法ADD、COPY，用法都一样，唯一不同的是 ADD  支持将归档文件（tar, gzip, bzip2, etc）做提取和解压操作\n# 注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。\nCOPY package*.json ./\n\n# 执行命令\nRUN npm install\n\nCOPY . .\n\n# 暴露端口\nEXPOSE 8080\n\n# 执行命令 node server.js\nCMD [ \"node\", \"server.js\" ]\n```\n\n### .dockerignore 文件\n\n在 `Dockerfile` 的同一个文件夹中创建一个 `.dockerignore` 文件，带有以下内容\n```\nnode_modules\nnpm-debug.log\n```\n这将避免你的本地模块以及调试日志被拷贝进入到你的 `Docker` 镜像中，以至于把你镜像原有安装的模块给覆盖了\n\n\n### 构建你的镜像\n\n构建需要一点时间\n```\ndocker build -t wclimb/node-web-app .\n```\n然后查看刚刚构建的镜像\n\n```\ndocker images\n\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nwclimb/node-web-app   latest              04fe1cd8e0b2        49 seconds ago      907MB\n```\n\n### 运行镜像\n\n```\ndocker run -p 49160:8080 -d wclimb/node-web-app\n```\n查看刚刚运行的容器\n```\ndocker ps \nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                               NAMES\nffe453510350        wclimb/node-web-app   \"docker-entrypoint.s…\"   4 seconds ago       Up 3 seconds        8081/tcp, 0.0.0.0:49160->8080/tcp   unruffled_kare\n```\n\n查看容器内的`log`信息\n```\ndocker logs CONTAINER ID\n打印出\nRunning on http://0.0.0.0:8080\n```\n访问 http://0.0.0.0:8080 出现`hello world`\n\n### 将镜像推送到远程仓库\n\n```\ndocker push wclimb/node-web-app:v1\n```\n格式为 `docker push [OPTIONS] NAME[:TAG]`，这里`TAG`为`v1`\n\n\n## 总结\n\n至此简单入门的`docker`教程就全部结束了，我们首先安装docker -> 创建容器 -> 搜索拉取镜像 -> 构建自己的镜像(`Dockerfile`) -> 发布镜像，文章大部分其实参阅了各个平台的教程或者文档。简单的`docker`就这样跑起来了，但是真正我们去使用的时候往往会有很多问题，用法也不是直接这么暴力的去使用，例如直接拉取 `centos` 镜像往里面安装 `nginx`，会很浪费资源，也没有做到真正的隔离环境。下一篇讲使用`docker-compose`讲多个容器组合起来，尽可能实战操作\n\n## reference\n\n[把一个 Node.js web 应用程序给 Docker 化](https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/)\n[30 分钟快速入门 Docker 教程](https://juejin.im/post/5cacbfd7e51d456e8833390)\n[Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice/)\n\n\n本文地址： http://www.wclimb.site/2019/12/03/Docker快速入门/","slug":"Docker快速入门","published":1,"updated":"2019-12-03T09:46:39.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8k000159x37pojwrce","content":"<h2 id=\"什么是Docker？\"><a href=\"#什么是Docker？\" class=\"headerlink\" title=\"什么是Docker？\"></a>什么是Docker？</h2><p><code>Docker</code> 是一个开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化</p>\n<h2 id=\"为什么要用Docker\"><a href=\"#为什么要用Docker\" class=\"headerlink\" title=\"为什么要用Docker\"></a>为什么要用Docker</h2><h3 id=\"更高效的利用系统资源\"><a href=\"#更高效的利用系统资源\" class=\"headerlink\" title=\"更高效的利用系统资源\"></a>更高效的利用系统资源</h3><p>  由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<h3 id=\"更快速的启动时间\"><a href=\"#更快速的启动时间\" class=\"headerlink\" title=\"更快速的启动时间\"></a>更快速的启动时间</h3><p>  传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。<br><a id=\"more\"></a></p>\n<h3 id=\"一致的运行环境\"><a href=\"#一致的运行环境\" class=\"headerlink\" title=\"一致的运行环境\"></a>一致的运行环境</h3><p>  开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 <code>bug</code> 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题</p>\n<h3 id=\"持续交付和部署\"><a href=\"#持续交付和部署\" class=\"headerlink\" title=\"持续交付和部署\"></a>持续交付和部署</h3><p>  对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>\n<p>  使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <code>Dockerfile</code> 来进行镜像构建，并结合 持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署系统进行自动部署。</p>\n<p>  而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p>\n<h3 id=\"更轻松的迁移\"><a href=\"#更轻松的迁移\" class=\"headerlink\" title=\"更轻松的迁移\"></a>更轻松的迁移</h3><p>  由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<h3 id=\"更轻松的维护和扩展\"><a href=\"#更轻松的维护和扩展\" class=\"headerlink\" title=\"更轻松的维护和扩展\"></a>更轻松的维护和扩展</h3><p>  使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<h3 id=\"对比传统虚拟机总结\"><a href=\"#对比传统虚拟机总结\" class=\"headerlink\" title=\"对比传统虚拟机总结\"></a>对比传统虚拟机总结</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">启动</td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">硬盘使用</td>\n<td style=\"text-align:center\">一般为 MB</td>\n<td style=\"text-align:center\">一般为 GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">系统支持量</td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<p>以上摘自 <a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/why.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/introduction/why.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>注册账号 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></li>\n<li>下载安装Docker <a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">mac安装地址</a></li>\n<li>命令行输入 <code>docker --version</code> 查看当前 <code>Docker</code> 版本</li>\n<li>镜像加速，鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。<code>Docker for mac 应用图标 -&gt; Perferences... -&gt; Daemon -&gt; Registry mirrors</code>，在列表中填写加速器地址 <code>http://hub-mirror.c.163.com</code>。修改完成之后点击 Apply &amp; Restart 按钮。最后我们输入命令行 <code>docker info</code> 查看当前使用的镜像</li>\n</ol>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>我们先快速搭建一个<code>web</code>服务器<br>命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80 --name web -it centos /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>然后安装 <code>nginx</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure></p>\n<p>安装完成可以通过命令<code>whereis nginx</code>查看安装路径，最后输入一下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure></p>\n<p>最后我们执行 <code>ctrl + P + Q</code> 切换到后台，输入命令 <code>docker ps -a</code> 查看分配的端口号，我这里是端口号是32768</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID    IMAGE      COMMAND         CREATED            STATUS               PORTS                   NAMES</span><br><span class=\"line\">3db42e2903a0    centos    &quot;/bin/bash&quot;    About a minute ago   Up About a minute    0.0.0.0:32768-&gt;80/tcp    web</span><br></pre></td></tr></table></figure>\n<p>浏览器输入 <a href=\"http://localhost:32768\" target=\"_blank\" rel=\"noopener\">http://localhost:32768</a> ，看到 <code>Welcome to nginx</code> 就算成功了</p>\n<p>那么我们刚刚输入的一系列命令代表什么意思呢？</p>\n<p>我们输入<code>docker run -p 80 --name web -it centos /bin/bash</code> </p>\n<ul>\n<li><code>docker run</code>表示运行一个新的容器，<code>Docker</code> 首先在本机中寻找该镜像，如果没有安装，<code>Docker</code> 在 <code>Docker Hub</code> 上查找该镜像并下载安装到本机，最后 <code>Docker</code> 创建一个新的容器并启动该程序</li>\n<li><code>-i</code> 选项是让容器标准输入打开，就可以接受键盘输入了</li>\n<li><code>-t</code> 选项是让docker分配一个伪终端，绑定到标准输入上。通过这个伪终端就可以像操作一台 <code>linux</code> 机器来操作这个容器了</li>\n<li><code>--name</code> &lt;容器名称&gt; 选项为容器指定一个名称，这里是<code>web</code></li>\n<li><code>-p 80</code> 告诉<code>docker</code>开放<code>80</code>端口</li>\n</ul>\n<p>我们需要注意的是，<code>docker run</code>每次都会创建一个新的容器，如果需要操作之前创建的容器</p>\n<p>重启容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start web</span><br></pre></td></tr></table></figure></p>\n<p>进入容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach web</span><br></pre></td></tr></table></figure></p>\n<p>停止容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop web</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>我们运行容器都需要镜像，上面我们使用到的的镜像是 <code>centos</code></p>\n<p>查看本地镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p>显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nodejs                latest              779742e01ba3        2 weeks ago         907MB</span><br><span class=\"line\">node                  latest              4ac0e1872789        5 weeks ago         933MB</span><br><span class=\"line\">nginx                 latest              540a289bab6c        5 weeks ago         126MB</span><br><span class=\"line\">nginx                 stable-alpine       aaad4724567b        6 weeks ago         21.2MB</span><br><span class=\"line\">centos                latest              0f3e07c0138f        2 months ago        220MB</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>REPOSITORY</code>：仓库名称。</li>\n<li><code>TAG</code>： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。</li>\n<li><code>IMAGE ID</code> ：镜像唯一ID。</li>\n<li><code>CREATED</code> ：创建时间。</li>\n<li><code>SIZE</code> ：镜像大小。</li>\n</ul>\n<p>如果第一次我们通过 <code>docker pull centos:latest</code> 拉取镜像，那么当我们执行 <code>docker run -p 80 --name web -it centos /bin/bash</code> 时，它就不会再去远程获取了，因为本机中已经安装该镜像，所以 <code>Docker</code> 会直接创建一个新的容器并启动该程序。</p>\n<p>事实上，镜像有很多，我们可以在 <a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com</a> 搜索仓库，输入框输入<code>nginx</code>，会出现很多nginx相关的镜像，我们也可以使用 <code>docker search nginx</code> 获取镜像列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">nginx                             Official build of Nginx.                        12284               [OK]</span><br><span class=\"line\">jwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1696                                    [OK]</span><br><span class=\"line\">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   746                                     [OK]</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure></p>\n<p>直接通过 <code>docker pull nginx</code> 就可以拉取镜像</p>\n<h2 id=\"构建自己的镜像\"><a href=\"#构建自己的镜像\" class=\"headerlink\" title=\"构建自己的镜像\"></a>构建自己的镜像</h2><p>要想构建自己的镜像，需要有一个<code>Dockerfile</code>文件，现在我们尝试把 <code>node</code> 程序 <code>Docker</code> 化</p>\n<h3 id=\"创建-Node-js-应用\"><a href=\"#创建-Node-js-应用\" class=\"headerlink\" title=\"创建 Node.js 应用\"></a>创建 Node.js 应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"docker_web_app\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Node.js on Docker\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"First Last &lt;first.last@example.com&gt;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"server.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node server.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span>: <span class=\"string\">\"^4.16.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，创建一个 <code>server.js</code> 文件，使用 <code>Express.js</code> 框架定义一个 Web 应用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Constants</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = <span class=\"number\">8080</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> HOST = <span class=\"string\">'0.0.0.0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// App</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello world\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(PORT, HOST);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`Running on http://<span class=\"subst\">$&#123;HOST&#125;</span>:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>创建一个空文件，命名为 Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Dockerfile</span><br></pre></td></tr></table></figure></p>\n<p>Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># node版本为10的镜像</span><br><span class=\"line\">FROM node:10</span><br><span class=\"line\"></span><br><span class=\"line\"># 应用程序工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\"># 拷贝文件，有两种方法ADD、COPY，用法都一样，唯一不同的是 ADD  支持将归档文件（tar, gzip, bzip2, etc）做提取和解压操作</span><br><span class=\"line\"># 注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。</span><br><span class=\"line\">COPY package*.json ./</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行命令</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行命令 node server.js</span><br><span class=\"line\">CMD [ &quot;node&quot;, &quot;server.js&quot; ]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dockerignore-文件\"><a href=\"#dockerignore-文件\" class=\"headerlink\" title=\".dockerignore 文件\"></a>.dockerignore 文件</h3><p>在 <code>Dockerfile</code> 的同一个文件夹中创建一个 <code>.dockerignore</code> 文件，带有以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>这将避免你的本地模块以及调试日志被拷贝进入到你的 <code>Docker</code> 镜像中，以至于把你镜像原有安装的模块给覆盖了</p>\n<h3 id=\"构建你的镜像\"><a href=\"#构建你的镜像\" class=\"headerlink\" title=\"构建你的镜像\"></a>构建你的镜像</h3><p>构建需要一点时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t wclimb/node-web-app .</span><br></pre></td></tr></table></figure></p>\n<p>然后查看刚刚构建的镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">wclimb/node-web-app   latest              04fe1cd8e0b2        49 seconds ago      907MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 49160:8080 -d wclimb/node-web-app</span><br></pre></td></tr></table></figure>\n<p>查看刚刚运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class=\"line\">ffe453510350        wclimb/node-web-app   &quot;docker-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        8081/tcp, 0.0.0.0:49160-&gt;8080/tcp   unruffled_kare</span><br></pre></td></tr></table></figure></p>\n<p>查看容器内的<code>log</code>信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs CONTAINER ID</span><br><span class=\"line\">打印出</span><br><span class=\"line\">Running on http://0.0.0.0:8080</span><br></pre></td></tr></table></figure></p>\n<p>访问 <a href=\"http://0.0.0.0:8080\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:8080</a> 出现<code>hello world</code></p>\n<h3 id=\"将镜像推送到远程仓库\"><a href=\"#将镜像推送到远程仓库\" class=\"headerlink\" title=\"将镜像推送到远程仓库\"></a>将镜像推送到远程仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push wclimb/node-web-app:v1</span><br></pre></td></tr></table></figure>\n<p>格式为 <code>docker push [OPTIONS] NAME[:TAG]</code>，这里<code>TAG</code>为<code>v1</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此简单入门的<code>docker</code>教程就全部结束了，我们首先安装docker -&gt; 创建容器 -&gt; 搜索拉取镜像 -&gt; 构建自己的镜像(<code>Dockerfile</code>) -&gt; 发布镜像，文章大部分其实参阅了各个平台的教程或者文档。简单的<code>docker</code>就这样跑起来了，但是真正我们去使用的时候往往会有很多问题，用法也不是直接这么暴力的去使用，例如直接拉取 <code>centos</code> 镜像往里面安装 <code>nginx</code>，会很浪费资源，也没有做到真正的隔离环境。下一篇讲使用<code>docker-compose</code>讲多个容器组合起来，尽可能实战操作</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><p><a href=\"https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/\" target=\"_blank\" rel=\"noopener\">把一个 Node.js web 应用程序给 Docker 化</a><br><a href=\"https://juejin.im/post/5cacbfd7e51d456e8833390\" target=\"_blank\" rel=\"noopener\">30 分钟快速入门 Docker 教程</a><br><a href=\"https://yeasy.gitbooks.io/docker_practice/\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></p>\n<p>本文地址： <a href=\"http://www.wclimb.site/2019/12/03/Docker快速入门/\">http://www.wclimb.site/2019/12/03/Docker快速入门/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是Docker？\"><a href=\"#什么是Docker？\" class=\"headerlink\" title=\"什么是Docker？\"></a>什么是Docker？</h2><p><code>Docker</code> 是一个开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化</p>\n<h2 id=\"为什么要用Docker\"><a href=\"#为什么要用Docker\" class=\"headerlink\" title=\"为什么要用Docker\"></a>为什么要用Docker</h2><h3 id=\"更高效的利用系统资源\"><a href=\"#更高效的利用系统资源\" class=\"headerlink\" title=\"更高效的利用系统资源\"></a>更高效的利用系统资源</h3><p>  由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<h3 id=\"更快速的启动时间\"><a href=\"#更快速的启动时间\" class=\"headerlink\" title=\"更快速的启动时间\"></a>更快速的启动时间</h3><p>  传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。<br>","more":"</p>\n<h3 id=\"一致的运行环境\"><a href=\"#一致的运行环境\" class=\"headerlink\" title=\"一致的运行环境\"></a>一致的运行环境</h3><p>  开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 <code>bug</code> 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题</p>\n<h3 id=\"持续交付和部署\"><a href=\"#持续交付和部署\" class=\"headerlink\" title=\"持续交付和部署\"></a>持续交付和部署</h3><p>  对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>\n<p>  使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <code>Dockerfile</code> 来进行镜像构建，并结合 持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署系统进行自动部署。</p>\n<p>  而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p>\n<h3 id=\"更轻松的迁移\"><a href=\"#更轻松的迁移\" class=\"headerlink\" title=\"更轻松的迁移\"></a>更轻松的迁移</h3><p>  由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<h3 id=\"更轻松的维护和扩展\"><a href=\"#更轻松的维护和扩展\" class=\"headerlink\" title=\"更轻松的维护和扩展\"></a>更轻松的维护和扩展</h3><p>  使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<h3 id=\"对比传统虚拟机总结\"><a href=\"#对比传统虚拟机总结\" class=\"headerlink\" title=\"对比传统虚拟机总结\"></a>对比传统虚拟机总结</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">启动</td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">硬盘使用</td>\n<td style=\"text-align:center\">一般为 MB</td>\n<td style=\"text-align:center\">一般为 GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">系统支持量</td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<p>以上摘自 <a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/why.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/introduction/why.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>注册账号 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></li>\n<li>下载安装Docker <a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">mac安装地址</a></li>\n<li>命令行输入 <code>docker --version</code> 查看当前 <code>Docker</code> 版本</li>\n<li>镜像加速，鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。<code>Docker for mac 应用图标 -&gt; Perferences... -&gt; Daemon -&gt; Registry mirrors</code>，在列表中填写加速器地址 <code>http://hub-mirror.c.163.com</code>。修改完成之后点击 Apply &amp; Restart 按钮。最后我们输入命令行 <code>docker info</code> 查看当前使用的镜像</li>\n</ol>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>我们先快速搭建一个<code>web</code>服务器<br>命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80 --name web -it centos /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>然后安装 <code>nginx</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure></p>\n<p>安装完成可以通过命令<code>whereis nginx</code>查看安装路径，最后输入一下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure></p>\n<p>最后我们执行 <code>ctrl + P + Q</code> 切换到后台，输入命令 <code>docker ps -a</code> 查看分配的端口号，我这里是端口号是32768</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID    IMAGE      COMMAND         CREATED            STATUS               PORTS                   NAMES</span><br><span class=\"line\">3db42e2903a0    centos    &quot;/bin/bash&quot;    About a minute ago   Up About a minute    0.0.0.0:32768-&gt;80/tcp    web</span><br></pre></td></tr></table></figure>\n<p>浏览器输入 <a href=\"http://localhost:32768\" target=\"_blank\" rel=\"noopener\">http://localhost:32768</a> ，看到 <code>Welcome to nginx</code> 就算成功了</p>\n<p>那么我们刚刚输入的一系列命令代表什么意思呢？</p>\n<p>我们输入<code>docker run -p 80 --name web -it centos /bin/bash</code> </p>\n<ul>\n<li><code>docker run</code>表示运行一个新的容器，<code>Docker</code> 首先在本机中寻找该镜像，如果没有安装，<code>Docker</code> 在 <code>Docker Hub</code> 上查找该镜像并下载安装到本机，最后 <code>Docker</code> 创建一个新的容器并启动该程序</li>\n<li><code>-i</code> 选项是让容器标准输入打开，就可以接受键盘输入了</li>\n<li><code>-t</code> 选项是让docker分配一个伪终端，绑定到标准输入上。通过这个伪终端就可以像操作一台 <code>linux</code> 机器来操作这个容器了</li>\n<li><code>--name</code> &lt;容器名称&gt; 选项为容器指定一个名称，这里是<code>web</code></li>\n<li><code>-p 80</code> 告诉<code>docker</code>开放<code>80</code>端口</li>\n</ul>\n<p>我们需要注意的是，<code>docker run</code>每次都会创建一个新的容器，如果需要操作之前创建的容器</p>\n<p>重启容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start web</span><br></pre></td></tr></table></figure></p>\n<p>进入容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach web</span><br></pre></td></tr></table></figure></p>\n<p>停止容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop web</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>我们运行容器都需要镜像，上面我们使用到的的镜像是 <code>centos</code></p>\n<p>查看本地镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p>显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nodejs                latest              779742e01ba3        2 weeks ago         907MB</span><br><span class=\"line\">node                  latest              4ac0e1872789        5 weeks ago         933MB</span><br><span class=\"line\">nginx                 latest              540a289bab6c        5 weeks ago         126MB</span><br><span class=\"line\">nginx                 stable-alpine       aaad4724567b        6 weeks ago         21.2MB</span><br><span class=\"line\">centos                latest              0f3e07c0138f        2 months ago        220MB</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>REPOSITORY</code>：仓库名称。</li>\n<li><code>TAG</code>： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。</li>\n<li><code>IMAGE ID</code> ：镜像唯一ID。</li>\n<li><code>CREATED</code> ：创建时间。</li>\n<li><code>SIZE</code> ：镜像大小。</li>\n</ul>\n<p>如果第一次我们通过 <code>docker pull centos:latest</code> 拉取镜像，那么当我们执行 <code>docker run -p 80 --name web -it centos /bin/bash</code> 时，它就不会再去远程获取了，因为本机中已经安装该镜像，所以 <code>Docker</code> 会直接创建一个新的容器并启动该程序。</p>\n<p>事实上，镜像有很多，我们可以在 <a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com</a> 搜索仓库，输入框输入<code>nginx</code>，会出现很多nginx相关的镜像，我们也可以使用 <code>docker search nginx</code> 获取镜像列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">nginx                             Official build of Nginx.                        12284               [OK]</span><br><span class=\"line\">jwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1696                                    [OK]</span><br><span class=\"line\">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   746                                     [OK]</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure></p>\n<p>直接通过 <code>docker pull nginx</code> 就可以拉取镜像</p>\n<h2 id=\"构建自己的镜像\"><a href=\"#构建自己的镜像\" class=\"headerlink\" title=\"构建自己的镜像\"></a>构建自己的镜像</h2><p>要想构建自己的镜像，需要有一个<code>Dockerfile</code>文件，现在我们尝试把 <code>node</code> 程序 <code>Docker</code> 化</p>\n<h3 id=\"创建-Node-js-应用\"><a href=\"#创建-Node-js-应用\" class=\"headerlink\" title=\"创建 Node.js 应用\"></a>创建 Node.js 应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"docker_web_app\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Node.js on Docker\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"First Last &lt;first.last@example.com&gt;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"server.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node server.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span>: <span class=\"string\">\"^4.16.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，创建一个 <code>server.js</code> 文件，使用 <code>Express.js</code> 框架定义一个 Web 应用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Constants</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = <span class=\"number\">8080</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> HOST = <span class=\"string\">'0.0.0.0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// App</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello world\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(PORT, HOST);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`Running on http://<span class=\"subst\">$&#123;HOST&#125;</span>:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>创建一个空文件，命名为 Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Dockerfile</span><br></pre></td></tr></table></figure></p>\n<p>Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># node版本为10的镜像</span><br><span class=\"line\">FROM node:10</span><br><span class=\"line\"></span><br><span class=\"line\"># 应用程序工作目录</span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\"># 拷贝文件，有两种方法ADD、COPY，用法都一样，唯一不同的是 ADD  支持将归档文件（tar, gzip, bzip2, etc）做提取和解压操作</span><br><span class=\"line\"># 注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。</span><br><span class=\"line\">COPY package*.json ./</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行命令</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行命令 node server.js</span><br><span class=\"line\">CMD [ &quot;node&quot;, &quot;server.js&quot; ]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dockerignore-文件\"><a href=\"#dockerignore-文件\" class=\"headerlink\" title=\".dockerignore 文件\"></a>.dockerignore 文件</h3><p>在 <code>Dockerfile</code> 的同一个文件夹中创建一个 <code>.dockerignore</code> 文件，带有以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure></p>\n<p>这将避免你的本地模块以及调试日志被拷贝进入到你的 <code>Docker</code> 镜像中，以至于把你镜像原有安装的模块给覆盖了</p>\n<h3 id=\"构建你的镜像\"><a href=\"#构建你的镜像\" class=\"headerlink\" title=\"构建你的镜像\"></a>构建你的镜像</h3><p>构建需要一点时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t wclimb/node-web-app .</span><br></pre></td></tr></table></figure></p>\n<p>然后查看刚刚构建的镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">wclimb/node-web-app   latest              04fe1cd8e0b2        49 seconds ago      907MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 49160:8080 -d wclimb/node-web-app</span><br></pre></td></tr></table></figure>\n<p>查看刚刚运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class=\"line\">ffe453510350        wclimb/node-web-app   &quot;docker-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        8081/tcp, 0.0.0.0:49160-&gt;8080/tcp   unruffled_kare</span><br></pre></td></tr></table></figure></p>\n<p>查看容器内的<code>log</code>信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs CONTAINER ID</span><br><span class=\"line\">打印出</span><br><span class=\"line\">Running on http://0.0.0.0:8080</span><br></pre></td></tr></table></figure></p>\n<p>访问 <a href=\"http://0.0.0.0:8080\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:8080</a> 出现<code>hello world</code></p>\n<h3 id=\"将镜像推送到远程仓库\"><a href=\"#将镜像推送到远程仓库\" class=\"headerlink\" title=\"将镜像推送到远程仓库\"></a>将镜像推送到远程仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push wclimb/node-web-app:v1</span><br></pre></td></tr></table></figure>\n<p>格式为 <code>docker push [OPTIONS] NAME[:TAG]</code>，这里<code>TAG</code>为<code>v1</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此简单入门的<code>docker</code>教程就全部结束了，我们首先安装docker -&gt; 创建容器 -&gt; 搜索拉取镜像 -&gt; 构建自己的镜像(<code>Dockerfile</code>) -&gt; 发布镜像，文章大部分其实参阅了各个平台的教程或者文档。简单的<code>docker</code>就这样跑起来了，但是真正我们去使用的时候往往会有很多问题，用法也不是直接这么暴力的去使用，例如直接拉取 <code>centos</code> 镜像往里面安装 <code>nginx</code>，会很浪费资源，也没有做到真正的隔离环境。下一篇讲使用<code>docker-compose</code>讲多个容器组合起来，尽可能实战操作</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><p><a href=\"https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/\" target=\"_blank\" rel=\"noopener\">把一个 Node.js web 应用程序给 Docker 化</a><br><a href=\"https://juejin.im/post/5cacbfd7e51d456e8833390\" target=\"_blank\" rel=\"noopener\">30 分钟快速入门 Docker 教程</a><br><a href=\"https://yeasy.gitbooks.io/docker_practice/\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></p>\n<p>本文地址： <a href=\"http://www.wclimb.site/2019/12/03/Docker快速入门/\">http://www.wclimb.site/2019/12/03/Docker快速入门/</a></p>"},{"title":"Gitlab-CI初探","date":"2019-10-16T07:58:55.000Z","_content":"\n因为项目一直都是使用`gitlab`进行自动化部署，但是都是前人种树，后人乘凉的现状。难得抽空花了一点时间来玩一下`gitlab`的`CI`\n\n[官方README](https://gitlab.com/help/ci/quick_start/README)\n\n## 准备工作\n\n- 一台服务器\n- 注册`gitlab`账号，并且新建一个项目\n\n## 新建.gitlab-ci.yml\n\n\n项目下新建文件 `.gitlab-ci.yml`，你也可以使用`Web IDE` 在线新建文件\n\n## 安装Gitlab Runner到服务器\n\n登录你的服务器\n\n```\n# For Debian/Ubuntu\n$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\n$ sudo apt-get install gitlab-ci-multi-runner\n# For CentOS\n$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n$ sudo yum install gitlab-ci-multi-runner\n```\n<!-- more -->\n\n1. 接下来注册一个`Runner`\n```\nsudo gitlab-runner register\n```\n\n2. 然后会出现以下提示，我们直接输入 https://gitlab.com\n```\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\nhttps://gitlab.com\n```\n\n3. 输入`gitlab`新建项目`CI`的`token`，token在项目内的 `Setting` -> `CI/CD` -> `Runners`（点击`expand`展开）\n```\nPlease enter the gitlab-ci token for this runner\n这里填token\n```\n![](/img/ci-token.jpg)\n\n4. 输入`runner`的描述\n```\nPlease enter the gitlab-ci description for this runner\n这里随便填\n```\n\n5. 命名`tag`\n```\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag // 每一个runner的唯一id，也可以在gitlab后台修改。\n```\n\n6. 是否接收未指定 `tags` 的任务\n```\nWhether to run untagged builds [true/false]\n[false]: false\n```\n\n7. 选择是否为当前项目锁定该 `Runner`\n```\nWhether to lock Runner to current project [true/false]:\n[false]: false\n```\n\n8. 选择 `Runner executor`\n```\nPlease enter the executor: virtualbox, docker+machine, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes, docker, parallels:\nshell  // 这里选shell，很多人使用的是docker\n\n// 最后会告诉你注册成功\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n\n现在刷新一下之前复制token的地方看看，是不是刚刚新建的`runner`生效了\n\n## Pipeline\n\n一次 `Pipeline` 相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。我们的任何提交或者 `Merge Request` 的合并都可以触发 `Pipeline`。如下图：\n```\n+------------------+           +----------------+\n|                  |  trigger  |                |\n|   Commit / MR    +---------->+    Pipeline    |\n|                  |           |                |\n+------------------+           +----------------+\n```\n\n## stages\n\n`stages`表示构建阶段\n\n- 所有 `stages` 会按照顺序运行，即当一个 `stage` 完成后，下一个 `stage` 才会开始\n- 只有当所有 `stages` 完成后，该构建任务 (Pipeline) 才会成功\n- 如果任何一个 `stage` 失败，那么后面的 `stages` 不会执行，该构建任务 (Pipeline) 失败\n\n一个`Pipeline`会有多个`Stage`，一步步执行\n```\n+--------------------------------------------------------+\n|                                                        |\n|  Pipeline                                              |\n|                                                        |\n|  +-----------+     +------------+      +------------+  |\n|  |  Stage 1  |---->|   Stage 2  |----->|   Stage 3  |  |\n|  +-----------+     +------------+      +------------+  |\n|                                                        |\n+--------------------------------------------------------+\n```\n\n## 配置.gitlab-ci.yml\n\n之前我们新建了`.gitlab-ci.yml`，那么我们来填写一些内容，让`CI`变得可用\n```yml\nstages: \n    - build\n    - test\n    \njob2:\n  stage: test \n  script:\n    - touch test.json\n  only:\n    - master  \n  tags:\n    - my-tag  \n    \njob1:\n  stage: build  \n  script:\n    - npm init -y\n  only:\n    - master  \n  tags:\n    - my-tag \n```\n\n- `stages` 就是我们上面讲的构建阶段，这里有两个阶段，先`build`然后`test`，会先执行任务 `job1` 然后 执行 `job2`，这里`job1/2`名称可用随便取，不影响\n- `stage` 表示构建的子任务\n- `script` 执行的`shell`命令\n- `only` 这里填写表示只有在`master`做操作的时候会触发这个构建\n- `tags` 这就是我们之前在服务器命名的`tag`，必填\n\n\n我们把这个文件`push`到`master`，然后在 `CI/CD -> Pipelines` 查看我们正在执行的任务\n\n![](/img/ci-pipe.jpg)\n\n如果`status`显示`passed`了，则代表运行成功\n\n至此，大功告成\n\n## 更改执行用户\n\n你可能在上面一步会发现 `npm not found`的情况，但是服务器已经安装了`node`\n\n因为`gitlab-ci`的`runner`默认使用`gitlab-runner`用户执行操作\n\n通过指令`ps aux|grep gitlab-runner`可以看到：\n\n```\n/usr/bin/gitlab-ci-multi-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --syslog --user gitlab-runner\n```\n- `--working-directory`：设置工作目录, 默认是/home/{执行user}\n\n- `--config`：设置配置文件目录，默认是/etc/gitlab-runner/config.toml\n\n- `--user`：设置执行用户名，默认是gitlab-runner\n\n\n因此想要更改`user`为`root`只需要重新设置`--user`属性即可，步骤如下：\n\n1. 删除`gitlab-runner`\n```\nsudo gitlab-runner uninstall\n```\n\n2. 切换为`root`\n```\ngitlab-runner install --working-directory /home/gitlab-runner --user root\n```\n\n3. 重启`gitlab-runner`\n```\nsudo service gitlab-runner restart\n```\n\n重新提交一下`.gitlab-cli.yaml`，应该就能够跑通了\n\n\n\n原文地址： http://www.wclimb.site/2019/10/16/Gitlab-CI初探/","source":"_posts/Gitlab-CI初探.md","raw":"---\ntitle: Gitlab-CI初探\ndate: 2019-10-16 15:58:55\ntags:\n- 原创\n- gitlab\ncategories: [工具, 自动化]\n---\n\n因为项目一直都是使用`gitlab`进行自动化部署，但是都是前人种树，后人乘凉的现状。难得抽空花了一点时间来玩一下`gitlab`的`CI`\n\n[官方README](https://gitlab.com/help/ci/quick_start/README)\n\n## 准备工作\n\n- 一台服务器\n- 注册`gitlab`账号，并且新建一个项目\n\n## 新建.gitlab-ci.yml\n\n\n项目下新建文件 `.gitlab-ci.yml`，你也可以使用`Web IDE` 在线新建文件\n\n## 安装Gitlab Runner到服务器\n\n登录你的服务器\n\n```\n# For Debian/Ubuntu\n$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\n$ sudo apt-get install gitlab-ci-multi-runner\n# For CentOS\n$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n$ sudo yum install gitlab-ci-multi-runner\n```\n<!-- more -->\n\n1. 接下来注册一个`Runner`\n```\nsudo gitlab-runner register\n```\n\n2. 然后会出现以下提示，我们直接输入 https://gitlab.com\n```\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\nhttps://gitlab.com\n```\n\n3. 输入`gitlab`新建项目`CI`的`token`，token在项目内的 `Setting` -> `CI/CD` -> `Runners`（点击`expand`展开）\n```\nPlease enter the gitlab-ci token for this runner\n这里填token\n```\n![](/img/ci-token.jpg)\n\n4. 输入`runner`的描述\n```\nPlease enter the gitlab-ci description for this runner\n这里随便填\n```\n\n5. 命名`tag`\n```\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag // 每一个runner的唯一id，也可以在gitlab后台修改。\n```\n\n6. 是否接收未指定 `tags` 的任务\n```\nWhether to run untagged builds [true/false]\n[false]: false\n```\n\n7. 选择是否为当前项目锁定该 `Runner`\n```\nWhether to lock Runner to current project [true/false]:\n[false]: false\n```\n\n8. 选择 `Runner executor`\n```\nPlease enter the executor: virtualbox, docker+machine, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes, docker, parallels:\nshell  // 这里选shell，很多人使用的是docker\n\n// 最后会告诉你注册成功\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n\n现在刷新一下之前复制token的地方看看，是不是刚刚新建的`runner`生效了\n\n## Pipeline\n\n一次 `Pipeline` 相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。我们的任何提交或者 `Merge Request` 的合并都可以触发 `Pipeline`。如下图：\n```\n+------------------+           +----------------+\n|                  |  trigger  |                |\n|   Commit / MR    +---------->+    Pipeline    |\n|                  |           |                |\n+------------------+           +----------------+\n```\n\n## stages\n\n`stages`表示构建阶段\n\n- 所有 `stages` 会按照顺序运行，即当一个 `stage` 完成后，下一个 `stage` 才会开始\n- 只有当所有 `stages` 完成后，该构建任务 (Pipeline) 才会成功\n- 如果任何一个 `stage` 失败，那么后面的 `stages` 不会执行，该构建任务 (Pipeline) 失败\n\n一个`Pipeline`会有多个`Stage`，一步步执行\n```\n+--------------------------------------------------------+\n|                                                        |\n|  Pipeline                                              |\n|                                                        |\n|  +-----------+     +------------+      +------------+  |\n|  |  Stage 1  |---->|   Stage 2  |----->|   Stage 3  |  |\n|  +-----------+     +------------+      +------------+  |\n|                                                        |\n+--------------------------------------------------------+\n```\n\n## 配置.gitlab-ci.yml\n\n之前我们新建了`.gitlab-ci.yml`，那么我们来填写一些内容，让`CI`变得可用\n```yml\nstages: \n    - build\n    - test\n    \njob2:\n  stage: test \n  script:\n    - touch test.json\n  only:\n    - master  \n  tags:\n    - my-tag  \n    \njob1:\n  stage: build  \n  script:\n    - npm init -y\n  only:\n    - master  \n  tags:\n    - my-tag \n```\n\n- `stages` 就是我们上面讲的构建阶段，这里有两个阶段，先`build`然后`test`，会先执行任务 `job1` 然后 执行 `job2`，这里`job1/2`名称可用随便取，不影响\n- `stage` 表示构建的子任务\n- `script` 执行的`shell`命令\n- `only` 这里填写表示只有在`master`做操作的时候会触发这个构建\n- `tags` 这就是我们之前在服务器命名的`tag`，必填\n\n\n我们把这个文件`push`到`master`，然后在 `CI/CD -> Pipelines` 查看我们正在执行的任务\n\n![](/img/ci-pipe.jpg)\n\n如果`status`显示`passed`了，则代表运行成功\n\n至此，大功告成\n\n## 更改执行用户\n\n你可能在上面一步会发现 `npm not found`的情况，但是服务器已经安装了`node`\n\n因为`gitlab-ci`的`runner`默认使用`gitlab-runner`用户执行操作\n\n通过指令`ps aux|grep gitlab-runner`可以看到：\n\n```\n/usr/bin/gitlab-ci-multi-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --syslog --user gitlab-runner\n```\n- `--working-directory`：设置工作目录, 默认是/home/{执行user}\n\n- `--config`：设置配置文件目录，默认是/etc/gitlab-runner/config.toml\n\n- `--user`：设置执行用户名，默认是gitlab-runner\n\n\n因此想要更改`user`为`root`只需要重新设置`--user`属性即可，步骤如下：\n\n1. 删除`gitlab-runner`\n```\nsudo gitlab-runner uninstall\n```\n\n2. 切换为`root`\n```\ngitlab-runner install --working-directory /home/gitlab-runner --user root\n```\n\n3. 重启`gitlab-runner`\n```\nsudo service gitlab-runner restart\n```\n\n重新提交一下`.gitlab-cli.yaml`，应该就能够跑通了\n\n\n\n原文地址： http://www.wclimb.site/2019/10/16/Gitlab-CI初探/","slug":"Gitlab-CI初探","published":1,"updated":"2019-10-17T00:46:32.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8o000359x3lxhodw7r","content":"<p>因为项目一直都是使用<code>gitlab</code>进行自动化部署，但是都是前人种树，后人乘凉的现状。难得抽空花了一点时间来玩一下<code>gitlab</code>的<code>CI</code></p>\n<p><a href=\"https://gitlab.com/help/ci/quick_start/README\" target=\"_blank\" rel=\"noopener\">官方README</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>一台服务器</li>\n<li>注册<code>gitlab</code>账号，并且新建一个项目</li>\n</ul>\n<h2 id=\"新建-gitlab-ci-yml\"><a href=\"#新建-gitlab-ci-yml\" class=\"headerlink\" title=\"新建.gitlab-ci.yml\"></a>新建.gitlab-ci.yml</h2><p>项目下新建文件 <code>.gitlab-ci.yml</code>，你也可以使用<code>Web IDE</code> 在线新建文件</p>\n<h2 id=\"安装Gitlab-Runner到服务器\"><a href=\"#安装Gitlab-Runner到服务器\" class=\"headerlink\" title=\"安装Gitlab Runner到服务器\"></a>安装Gitlab Runner到服务器</h2><p>登录你的服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For Debian/Ubuntu</span><br><span class=\"line\">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class=\"line\">$ sudo apt-get install gitlab-ci-multi-runner</span><br><span class=\"line\"># For CentOS</span><br><span class=\"line\">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br><span class=\"line\">$ sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ol>\n<li><p>接下来注册一个<code>Runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner register</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后会出现以下提示，我们直接输入 <a href=\"https://gitlab.com\" target=\"_blank\" rel=\"noopener\">https://gitlab.com</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class=\"line\">https://gitlab.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入<code>gitlab</code>新建项目<code>CI</code>的<code>token</code>，token在项目内的 <code>Setting</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners</code>（点击<code>expand</code>展开）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci token for this runner</span><br><span class=\"line\">这里填token</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/img/ci-token.jpg\" alt></p>\n<ol start=\"4\">\n<li><p>输入<code>runner</code>的描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci description for this runner</span><br><span class=\"line\">这里随便填</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命名<code>tag</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag // 每一个runner的唯一id，也可以在gitlab后台修改。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>是否接收未指定 <code>tags</code> 的任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Whether to run untagged builds [true/false]</span><br><span class=\"line\">[false]: false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择是否为当前项目锁定该 <code>Runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]: false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择 <code>Runner executor</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the executor: virtualbox, docker+machine, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes, docker, parallels:</span><br><span class=\"line\">shell  // 这里选shell，很多人使用的是docker</span><br><span class=\"line\"></span><br><span class=\"line\">// 最后会告诉你注册成功</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在刷新一下之前复制token的地方看看，是不是刚刚新建的<code>runner</code>生效了</p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h2><p>一次 <code>Pipeline</code> 相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。我们的任何提交或者 <code>Merge Request</code> 的合并都可以触发 <code>Pipeline</code>。如下图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------------+           +----------------+</span><br><span class=\"line\">|                  |  trigger  |                |</span><br><span class=\"line\">|   Commit / MR    +----------&gt;+    Pipeline    |</span><br><span class=\"line\">|                  |           |                |</span><br><span class=\"line\">+------------------+           +----------------+</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"stages\"><a href=\"#stages\" class=\"headerlink\" title=\"stages\"></a>stages</h2><p><code>stages</code>表示构建阶段</p>\n<ul>\n<li>所有 <code>stages</code> 会按照顺序运行，即当一个 <code>stage</code> 完成后，下一个 <code>stage</code> 才会开始</li>\n<li>只有当所有 <code>stages</code> 完成后，该构建任务 (Pipeline) 才会成功</li>\n<li>如果任何一个 <code>stage</code> 失败，那么后面的 <code>stages</code> 不会执行，该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>一个<code>Pipeline</code>会有多个<code>Stage</code>，一步步执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------------------------------------+</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">|  Pipeline                                              |</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置-gitlab-ci-yml\"><a href=\"#配置-gitlab-ci-yml\" class=\"headerlink\" title=\"配置.gitlab-ci.yml\"></a>配置.gitlab-ci.yml</h2><p>之前我们新建了<code>.gitlab-ci.yml</code>，那么我们来填写一些内容，让<code>CI</code>变得可用<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span> </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">test</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">job2:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">touch</span> <span class=\"string\">test.json</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span>  </span><br><span class=\"line\"><span class=\"attr\">  tags:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">my-tag</span>  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">job1:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">build</span>  </span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">init</span> <span class=\"bullet\">-y</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span>  </span><br><span class=\"line\"><span class=\"attr\">  tags:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">my-tag</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>stages</code> 就是我们上面讲的构建阶段，这里有两个阶段，先<code>build</code>然后<code>test</code>，会先执行任务 <code>job1</code> 然后 执行 <code>job2</code>，这里<code>job1/2</code>名称可用随便取，不影响</li>\n<li><code>stage</code> 表示构建的子任务</li>\n<li><code>script</code> 执行的<code>shell</code>命令</li>\n<li><code>only</code> 这里填写表示只有在<code>master</code>做操作的时候会触发这个构建</li>\n<li><code>tags</code> 这就是我们之前在服务器命名的<code>tag</code>，必填</li>\n</ul>\n<p>我们把这个文件<code>push</code>到<code>master</code>，然后在 <code>CI/CD -&gt; Pipelines</code> 查看我们正在执行的任务</p>\n<p><img src=\"/img/ci-pipe.jpg\" alt></p>\n<p>如果<code>status</code>显示<code>passed</code>了，则代表运行成功</p>\n<p>至此，大功告成</p>\n<h2 id=\"更改执行用户\"><a href=\"#更改执行用户\" class=\"headerlink\" title=\"更改执行用户\"></a>更改执行用户</h2><p>你可能在上面一步会发现 <code>npm not found</code>的情况，但是服务器已经安装了<code>node</code></p>\n<p>因为<code>gitlab-ci</code>的<code>runner</code>默认使用<code>gitlab-runner</code>用户执行操作</p>\n<p>通过指令<code>ps aux|grep gitlab-runner</code>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/gitlab-ci-multi-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --syslog --user gitlab-runner</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>--working-directory</code>：设置工作目录, 默认是/home/{执行user}</p>\n</li>\n<li><p><code>--config</code>：设置配置文件目录，默认是/etc/gitlab-runner/config.toml</p>\n</li>\n<li><p><code>--user</code>：设置执行用户名，默认是gitlab-runner</p>\n</li>\n</ul>\n<p>因此想要更改<code>user</code>为<code>root</code>只需要重新设置<code>--user</code>属性即可，步骤如下：</p>\n<ol>\n<li><p>删除<code>gitlab-runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换为<code>root</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-runner install --working-directory /home/gitlab-runner --user root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启<code>gitlab-runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service gitlab-runner restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重新提交一下<code>.gitlab-cli.yaml</code>，应该就能够跑通了</p>\n<p>原文地址： <a href=\"http://www.wclimb.site/2019/10/16/Gitlab-CI初探/\">http://www.wclimb.site/2019/10/16/Gitlab-CI初探/</a></p>\n","site":{"data":{}},"excerpt":"<p>因为项目一直都是使用<code>gitlab</code>进行自动化部署，但是都是前人种树，后人乘凉的现状。难得抽空花了一点时间来玩一下<code>gitlab</code>的<code>CI</code></p>\n<p><a href=\"https://gitlab.com/help/ci/quick_start/README\" target=\"_blank\" rel=\"noopener\">官方README</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>一台服务器</li>\n<li>注册<code>gitlab</code>账号，并且新建一个项目</li>\n</ul>\n<h2 id=\"新建-gitlab-ci-yml\"><a href=\"#新建-gitlab-ci-yml\" class=\"headerlink\" title=\"新建.gitlab-ci.yml\"></a>新建.gitlab-ci.yml</h2><p>项目下新建文件 <code>.gitlab-ci.yml</code>，你也可以使用<code>Web IDE</code> 在线新建文件</p>\n<h2 id=\"安装Gitlab-Runner到服务器\"><a href=\"#安装Gitlab-Runner到服务器\" class=\"headerlink\" title=\"安装Gitlab Runner到服务器\"></a>安装Gitlab Runner到服务器</h2><p>登录你的服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For Debian/Ubuntu</span><br><span class=\"line\">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class=\"line\">$ sudo apt-get install gitlab-ci-multi-runner</span><br><span class=\"line\"># For CentOS</span><br><span class=\"line\">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br><span class=\"line\">$ sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>","more":"<ol>\n<li><p>接下来注册一个<code>Runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner register</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后会出现以下提示，我们直接输入 <a href=\"https://gitlab.com\" target=\"_blank\" rel=\"noopener\">https://gitlab.com</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class=\"line\">https://gitlab.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入<code>gitlab</code>新建项目<code>CI</code>的<code>token</code>，token在项目内的 <code>Setting</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners</code>（点击<code>expand</code>展开）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci token for this runner</span><br><span class=\"line\">这里填token</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/img/ci-token.jpg\" alt></p>\n<ol start=\"4\">\n<li><p>输入<code>runner</code>的描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci description for this runner</span><br><span class=\"line\">这里随便填</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命名<code>tag</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag // 每一个runner的唯一id，也可以在gitlab后台修改。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>是否接收未指定 <code>tags</code> 的任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Whether to run untagged builds [true/false]</span><br><span class=\"line\">[false]: false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择是否为当前项目锁定该 <code>Runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]: false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择 <code>Runner executor</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the executor: virtualbox, docker+machine, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes, docker, parallels:</span><br><span class=\"line\">shell  // 这里选shell，很多人使用的是docker</span><br><span class=\"line\"></span><br><span class=\"line\">// 最后会告诉你注册成功</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在刷新一下之前复制token的地方看看，是不是刚刚新建的<code>runner</code>生效了</p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h2><p>一次 <code>Pipeline</code> 相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。我们的任何提交或者 <code>Merge Request</code> 的合并都可以触发 <code>Pipeline</code>。如下图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------------+           +----------------+</span><br><span class=\"line\">|                  |  trigger  |                |</span><br><span class=\"line\">|   Commit / MR    +----------&gt;+    Pipeline    |</span><br><span class=\"line\">|                  |           |                |</span><br><span class=\"line\">+------------------+           +----------------+</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"stages\"><a href=\"#stages\" class=\"headerlink\" title=\"stages\"></a>stages</h2><p><code>stages</code>表示构建阶段</p>\n<ul>\n<li>所有 <code>stages</code> 会按照顺序运行，即当一个 <code>stage</code> 完成后，下一个 <code>stage</code> 才会开始</li>\n<li>只有当所有 <code>stages</code> 完成后，该构建任务 (Pipeline) 才会成功</li>\n<li>如果任何一个 <code>stage</code> 失败，那么后面的 <code>stages</code> 不会执行，该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>一个<code>Pipeline</code>会有多个<code>Stage</code>，一步步执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------------------------------------+</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">|  Pipeline                                              |</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class=\"line\">|  +-----------+     +------------+      +------------+  |</span><br><span class=\"line\">|                                                        |</span><br><span class=\"line\">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置-gitlab-ci-yml\"><a href=\"#配置-gitlab-ci-yml\" class=\"headerlink\" title=\"配置.gitlab-ci.yml\"></a>配置.gitlab-ci.yml</h2><p>之前我们新建了<code>.gitlab-ci.yml</code>，那么我们来填写一些内容，让<code>CI</code>变得可用<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span> </span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">test</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">job2:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">touch</span> <span class=\"string\">test.json</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span>  </span><br><span class=\"line\"><span class=\"attr\">  tags:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">my-tag</span>  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">job1:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">build</span>  </span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">init</span> <span class=\"bullet\">-y</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span>  </span><br><span class=\"line\"><span class=\"attr\">  tags:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">my-tag</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>stages</code> 就是我们上面讲的构建阶段，这里有两个阶段，先<code>build</code>然后<code>test</code>，会先执行任务 <code>job1</code> 然后 执行 <code>job2</code>，这里<code>job1/2</code>名称可用随便取，不影响</li>\n<li><code>stage</code> 表示构建的子任务</li>\n<li><code>script</code> 执行的<code>shell</code>命令</li>\n<li><code>only</code> 这里填写表示只有在<code>master</code>做操作的时候会触发这个构建</li>\n<li><code>tags</code> 这就是我们之前在服务器命名的<code>tag</code>，必填</li>\n</ul>\n<p>我们把这个文件<code>push</code>到<code>master</code>，然后在 <code>CI/CD -&gt; Pipelines</code> 查看我们正在执行的任务</p>\n<p><img src=\"/img/ci-pipe.jpg\" alt></p>\n<p>如果<code>status</code>显示<code>passed</code>了，则代表运行成功</p>\n<p>至此，大功告成</p>\n<h2 id=\"更改执行用户\"><a href=\"#更改执行用户\" class=\"headerlink\" title=\"更改执行用户\"></a>更改执行用户</h2><p>你可能在上面一步会发现 <code>npm not found</code>的情况，但是服务器已经安装了<code>node</code></p>\n<p>因为<code>gitlab-ci</code>的<code>runner</code>默认使用<code>gitlab-runner</code>用户执行操作</p>\n<p>通过指令<code>ps aux|grep gitlab-runner</code>可以看到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/gitlab-ci-multi-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --syslog --user gitlab-runner</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>--working-directory</code>：设置工作目录, 默认是/home/{执行user}</p>\n</li>\n<li><p><code>--config</code>：设置配置文件目录，默认是/etc/gitlab-runner/config.toml</p>\n</li>\n<li><p><code>--user</code>：设置执行用户名，默认是gitlab-runner</p>\n</li>\n</ul>\n<p>因此想要更改<code>user</code>为<code>root</code>只需要重新设置<code>--user</code>属性即可，步骤如下：</p>\n<ol>\n<li><p>删除<code>gitlab-runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-runner uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换为<code>root</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-runner install --working-directory /home/gitlab-runner --user root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启<code>gitlab-runner</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service gitlab-runner restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重新提交一下<code>.gitlab-cli.yaml</code>，应该就能够跑通了</p>\n<p>原文地址： <a href=\"http://www.wclimb.site/2019/10/16/Gitlab-CI初探/\">http://www.wclimb.site/2019/10/16/Gitlab-CI初探/</a></p>"},{"title":"HTTP缓存——304与200 from cache","date":"2018-03-06T06:04:29.000Z","_content":"\n# HTTP与缓存相关的字段\n\n## 1. 通用字段\n\n| 字段名称   | 释义    | \n| - |  --  | \n|   Cache-Control    |   控制缓存具体的行为    |  \n|   Pragma    |   HTTP1.0时的遗留字段，当值为\"no-cache\"时强制验证缓存    |   \n|   Date    |   创建报文的日期时间(启发式缓存阶段所用)    |   \n\n## 2. response字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   ETag    |   服务器生成资源的唯一标识    |  \n|   Vary    |   代理服务器缓存的管理信息    |   \n|   Age    |   资源在缓存代理中存贮的时长(取决于max-age和s-maxage的大小)    |   \n\n## 3. request字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   If-Match    |   条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改    |  \n|   If-None-Match    |   和If-Match作用相反，服务器根据这个字段判断文件是否有新的修改    |   \n|   If-Modified-Since    |   比较资源前后两次访问最后的修改时间是否一致   | \n|   If-Unmodified-Since    |   比较资源前后两次访问最后的修改时间是否一致  | \n\n## 4. 实体字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   Expires    |   告知客户端资源缓存失效的绝对时间|  \n|   Last-Modified    |   资源最后一次修改的时间    |   \n\n\n## 协商缓存（304）\n\n> If-modified-Since/Last-Modified\n\n- 浏览器在发送请求的时候服务器会检查请求头`request header`里面的`If-modified-Since`，如果最后修改时间相同则返回304，否则给返回头(`response header`)添加`last-Modified`并且返回数据(`response body`)。\n```\nif-modified-since:Wed, 31 May 2017 03:21:09 GMT\nif-none-match:\"42DD5684635105372FE7720E3B39B96A\"\n```\n<!-- more -->\n\n> If-None-Match/Etag\n\n- 浏览器在发送请求的时候服务器会检查请求头(`request header`)里面的`if-none-match`的值与当前文件的内容通过hash算法（`例如 nodejs: cryto.createHash('sha1')`）生成的内容摘要字符对比，相同则直接返回`304`，否则给返回头(`response header`)添加`etag`属性为当前的内容摘要字符，并且返回内容。\n```\netag:\"42DD5684635105372FE7720E3B39B96A\"\nlast-modified:Wed, 31 May 2017 03:21:09 GMT\n```\n\n请求头last-modified的日期与响应头的last-modified一致\n请求头if-none-match的hash与响应头的etag一致\n所用会返回`Status Code: 304 `\n\n## 强缓存（200 from cache）\n\n\n- 如果设置了`Expires`(XX时间过期)或者`Cache-Control（http1.0不支持）`(经历XX时间后过期)且没有过期，命中`cache`的情况下，`from cache`不去发出请求。如果强刷（如ctrl+r）会发起请求，但是如果没有修改会返回`304`内容未修改，如果已经改变则返回新内容。`max-age > Expires`。\n\n- `expires/cache-control `虽然是强缓存，但用户主动触发的刷新行为，还是会采用缓存协商的策略，主动触发的刷新行为包括点击刷新按钮、右键刷新、f5刷新、ctrl+f5刷新等。\n\n- 当然如果在控制台里面选中了`disable cahce`则无论如何都会请求最新内容(304协商缓存、强缓存都无效)，因为1.不会检查本地是否有缓存。2.请求头信息(request header)既没有If-Modified-Since也没有If-None-Match来让服务端判断。地址栏输入的地址按下回车键，该地址页面请求（仅仅是该url）的`request header`都会带上`cache-contro:max-age=0`，所以不会命中强缓存，但是通过链接点击的地址会命中缓存\n\n- chrome下查看所有的from cache文件：chrome://view-http-cache/\n\n## 区别\n\n- 触发 200 from cache：\n\n1. 直接点击链接访问\n2. 输入网址按回车访问\n3. 二维码扫描\n\n- 触发 304：\n\n1. 刷新页面时触发\n2. 设置了长缓存、但Entity Tags没有移除时触发\n\n\n## 流程图\n![流程图](http://www.wclimb.site/cdn/cache.png)\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/HTTP缓存——304与200-from-cache.md","raw":"---\ntitle: HTTP缓存——304与200 from cache\ndate: 2018-03-06 14:04:29\ntags:\n- HTTP\n- 缓存\n- Mysql\n- javascript\n- 原创\n\ncategories: [javascript,HTTP]\n---\n\n# HTTP与缓存相关的字段\n\n## 1. 通用字段\n\n| 字段名称   | 释义    | \n| - |  --  | \n|   Cache-Control    |   控制缓存具体的行为    |  \n|   Pragma    |   HTTP1.0时的遗留字段，当值为\"no-cache\"时强制验证缓存    |   \n|   Date    |   创建报文的日期时间(启发式缓存阶段所用)    |   \n\n## 2. response字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   ETag    |   服务器生成资源的唯一标识    |  \n|   Vary    |   代理服务器缓存的管理信息    |   \n|   Age    |   资源在缓存代理中存贮的时长(取决于max-age和s-maxage的大小)    |   \n\n## 3. request字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   If-Match    |   条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改    |  \n|   If-None-Match    |   和If-Match作用相反，服务器根据这个字段判断文件是否有新的修改    |   \n|   If-Modified-Since    |   比较资源前后两次访问最后的修改时间是否一致   | \n|   If-Unmodified-Since    |   比较资源前后两次访问最后的修改时间是否一致  | \n\n## 4. 实体字段\n\n| 字段名称   | 释义    | \n| -- |  --  | \n|   Expires    |   告知客户端资源缓存失效的绝对时间|  \n|   Last-Modified    |   资源最后一次修改的时间    |   \n\n\n## 协商缓存（304）\n\n> If-modified-Since/Last-Modified\n\n- 浏览器在发送请求的时候服务器会检查请求头`request header`里面的`If-modified-Since`，如果最后修改时间相同则返回304，否则给返回头(`response header`)添加`last-Modified`并且返回数据(`response body`)。\n```\nif-modified-since:Wed, 31 May 2017 03:21:09 GMT\nif-none-match:\"42DD5684635105372FE7720E3B39B96A\"\n```\n<!-- more -->\n\n> If-None-Match/Etag\n\n- 浏览器在发送请求的时候服务器会检查请求头(`request header`)里面的`if-none-match`的值与当前文件的内容通过hash算法（`例如 nodejs: cryto.createHash('sha1')`）生成的内容摘要字符对比，相同则直接返回`304`，否则给返回头(`response header`)添加`etag`属性为当前的内容摘要字符，并且返回内容。\n```\netag:\"42DD5684635105372FE7720E3B39B96A\"\nlast-modified:Wed, 31 May 2017 03:21:09 GMT\n```\n\n请求头last-modified的日期与响应头的last-modified一致\n请求头if-none-match的hash与响应头的etag一致\n所用会返回`Status Code: 304 `\n\n## 强缓存（200 from cache）\n\n\n- 如果设置了`Expires`(XX时间过期)或者`Cache-Control（http1.0不支持）`(经历XX时间后过期)且没有过期，命中`cache`的情况下，`from cache`不去发出请求。如果强刷（如ctrl+r）会发起请求，但是如果没有修改会返回`304`内容未修改，如果已经改变则返回新内容。`max-age > Expires`。\n\n- `expires/cache-control `虽然是强缓存，但用户主动触发的刷新行为，还是会采用缓存协商的策略，主动触发的刷新行为包括点击刷新按钮、右键刷新、f5刷新、ctrl+f5刷新等。\n\n- 当然如果在控制台里面选中了`disable cahce`则无论如何都会请求最新内容(304协商缓存、强缓存都无效)，因为1.不会检查本地是否有缓存。2.请求头信息(request header)既没有If-Modified-Since也没有If-None-Match来让服务端判断。地址栏输入的地址按下回车键，该地址页面请求（仅仅是该url）的`request header`都会带上`cache-contro:max-age=0`，所以不会命中强缓存，但是通过链接点击的地址会命中缓存\n\n- chrome下查看所有的from cache文件：chrome://view-http-cache/\n\n## 区别\n\n- 触发 200 from cache：\n\n1. 直接点击链接访问\n2. 输入网址按回车访问\n3. 二维码扫描\n\n- 触发 304：\n\n1. 刷新页面时触发\n2. 设置了长缓存、但Entity Tags没有移除时触发\n\n\n## 流程图\n![流程图](http://www.wclimb.site/cdn/cache.png)\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n\n\n\n\n\n\n\n\n\n","slug":"HTTP缓存——304与200-from-cache","published":1,"updated":"2019-06-06T01:06:26.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8s000759x3psi4cair","content":"<h1 id=\"HTTP与缓存相关的字段\"><a href=\"#HTTP与缓存相关的字段\" class=\"headerlink\" title=\"HTTP与缓存相关的字段\"></a>HTTP与缓存相关的字段</h1><h2 id=\"1-通用字段\"><a href=\"#1-通用字段\" class=\"headerlink\" title=\"1. 通用字段\"></a>1. 通用字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cache-Control</td>\n<td>控制缓存具体的行为</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>HTTP1.0时的遗留字段，当值为”no-cache”时强制验证缓存</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间(启发式缓存阶段所用)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-response字段\"><a href=\"#2-response字段\" class=\"headerlink\" title=\"2. response字段\"></a>2. response字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ETag</td>\n<td>服务器生成资源的唯一标识</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>资源在缓存代理中存贮的时长(取决于max-age和s-maxage的大小)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-request字段\"><a href=\"#3-request字段\" class=\"headerlink\" title=\"3. request字段\"></a>3. request字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If-Match</td>\n<td>条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>和If-Match作用相反，服务器根据这个字段判断文件是否有新的修改</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>比较资源前后两次访问最后的修改时间是否一致</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>比较资源前后两次访问最后的修改时间是否一致</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-实体字段\"><a href=\"#4-实体字段\" class=\"headerlink\" title=\"4. 实体字段\"></a>4. 实体字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Expires</td>\n<td>告知客户端资源缓存失效的绝对时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源最后一次修改的时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"协商缓存（304）\"><a href=\"#协商缓存（304）\" class=\"headerlink\" title=\"协商缓存（304）\"></a>协商缓存（304）</h2><blockquote>\n<p>If-modified-Since/Last-Modified</p>\n</blockquote>\n<ul>\n<li>浏览器在发送请求的时候服务器会检查请求头<code>request header</code>里面的<code>If-modified-Since</code>，如果最后修改时间相同则返回304，否则给返回头(<code>response header</code>)添加<code>last-Modified</code>并且返回数据(<code>response body</code>)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if-modified-since:Wed, 31 May 2017 03:21:09 GMT</span><br><span class=\"line\">if-none-match:&quot;42DD5684635105372FE7720E3B39B96A&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>If-None-Match/Etag</p>\n</blockquote>\n<ul>\n<li>浏览器在发送请求的时候服务器会检查请求头(<code>request header</code>)里面的<code>if-none-match</code>的值与当前文件的内容通过hash算法（<code>例如 nodejs: cryto.createHash(&#39;sha1&#39;)</code>）生成的内容摘要字符对比，相同则直接返回<code>304</code>，否则给返回头(<code>response header</code>)添加<code>etag</code>属性为当前的内容摘要字符，并且返回内容。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etag:&quot;42DD5684635105372FE7720E3B39B96A&quot;</span><br><span class=\"line\">last-modified:Wed, 31 May 2017 03:21:09 GMT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求头last-modified的日期与响应头的last-modified一致<br>请求头if-none-match的hash与响应头的etag一致<br>所用会返回<code>Status Code: 304</code></p>\n<h2 id=\"强缓存（200-from-cache）\"><a href=\"#强缓存（200-from-cache）\" class=\"headerlink\" title=\"强缓存（200 from cache）\"></a>强缓存（200 from cache）</h2><ul>\n<li><p>如果设置了<code>Expires</code>(XX时间过期)或者<code>Cache-Control（http1.0不支持）</code>(经历XX时间后过期)且没有过期，命中<code>cache</code>的情况下，<code>from cache</code>不去发出请求。如果强刷（如ctrl+r）会发起请求，但是如果没有修改会返回<code>304</code>内容未修改，如果已经改变则返回新内容。<code>max-age &gt; Expires</code>。</p>\n</li>\n<li><p><code>expires/cache-control</code>虽然是强缓存，但用户主动触发的刷新行为，还是会采用缓存协商的策略，主动触发的刷新行为包括点击刷新按钮、右键刷新、f5刷新、ctrl+f5刷新等。</p>\n</li>\n<li><p>当然如果在控制台里面选中了<code>disable cahce</code>则无论如何都会请求最新内容(304协商缓存、强缓存都无效)，因为1.不会检查本地是否有缓存。2.请求头信息(request header)既没有If-Modified-Since也没有If-None-Match来让服务端判断。地址栏输入的地址按下回车键，该地址页面请求（仅仅是该url）的<code>request header</code>都会带上<code>cache-contro:max-age=0</code>，所以不会命中强缓存，但是通过链接点击的地址会命中缓存</p>\n</li>\n<li><p>chrome下查看所有的from cache文件：chrome://view-http-cache/</p>\n</li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li>触发 200 from cache：</li>\n</ul>\n<ol>\n<li>直接点击链接访问</li>\n<li>输入网址按回车访问</li>\n<li>二维码扫描</li>\n</ol>\n<ul>\n<li>触发 304：</li>\n</ul>\n<ol>\n<li>刷新页面时触发</li>\n<li>设置了长缓存、但Entity Tags没有移除时触发</li>\n</ol>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"http://www.wclimb.site/cdn/cache.png\" alt=\"流程图\"></p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"HTTP与缓存相关的字段\"><a href=\"#HTTP与缓存相关的字段\" class=\"headerlink\" title=\"HTTP与缓存相关的字段\"></a>HTTP与缓存相关的字段</h1><h2 id=\"1-通用字段\"><a href=\"#1-通用字段\" class=\"headerlink\" title=\"1. 通用字段\"></a>1. 通用字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cache-Control</td>\n<td>控制缓存具体的行为</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>HTTP1.0时的遗留字段，当值为”no-cache”时强制验证缓存</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间(启发式缓存阶段所用)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-response字段\"><a href=\"#2-response字段\" class=\"headerlink\" title=\"2. response字段\"></a>2. response字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ETag</td>\n<td>服务器生成资源的唯一标识</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>资源在缓存代理中存贮的时长(取决于max-age和s-maxage的大小)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-request字段\"><a href=\"#3-request字段\" class=\"headerlink\" title=\"3. request字段\"></a>3. request字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If-Match</td>\n<td>条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>和If-Match作用相反，服务器根据这个字段判断文件是否有新的修改</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>比较资源前后两次访问最后的修改时间是否一致</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>比较资源前后两次访问最后的修改时间是否一致</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-实体字段\"><a href=\"#4-实体字段\" class=\"headerlink\" title=\"4. 实体字段\"></a>4. 实体字段</h2><table>\n<thead>\n<tr>\n<th>字段名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Expires</td>\n<td>告知客户端资源缓存失效的绝对时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源最后一次修改的时间</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"协商缓存（304）\"><a href=\"#协商缓存（304）\" class=\"headerlink\" title=\"协商缓存（304）\"></a>协商缓存（304）</h2><blockquote>\n<p>If-modified-Since/Last-Modified</p>\n</blockquote>\n<ul>\n<li>浏览器在发送请求的时候服务器会检查请求头<code>request header</code>里面的<code>If-modified-Since</code>，如果最后修改时间相同则返回304，否则给返回头(<code>response header</code>)添加<code>last-Modified</code>并且返回数据(<code>response body</code>)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if-modified-since:Wed, 31 May 2017 03:21:09 GMT</span><br><span class=\"line\">if-none-match:&quot;42DD5684635105372FE7720E3B39B96A&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<blockquote>\n<p>If-None-Match/Etag</p>\n</blockquote>\n<ul>\n<li>浏览器在发送请求的时候服务器会检查请求头(<code>request header</code>)里面的<code>if-none-match</code>的值与当前文件的内容通过hash算法（<code>例如 nodejs: cryto.createHash(&#39;sha1&#39;)</code>）生成的内容摘要字符对比，相同则直接返回<code>304</code>，否则给返回头(<code>response header</code>)添加<code>etag</code>属性为当前的内容摘要字符，并且返回内容。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etag:&quot;42DD5684635105372FE7720E3B39B96A&quot;</span><br><span class=\"line\">last-modified:Wed, 31 May 2017 03:21:09 GMT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求头last-modified的日期与响应头的last-modified一致<br>请求头if-none-match的hash与响应头的etag一致<br>所用会返回<code>Status Code: 304</code></p>\n<h2 id=\"强缓存（200-from-cache）\"><a href=\"#强缓存（200-from-cache）\" class=\"headerlink\" title=\"强缓存（200 from cache）\"></a>强缓存（200 from cache）</h2><ul>\n<li><p>如果设置了<code>Expires</code>(XX时间过期)或者<code>Cache-Control（http1.0不支持）</code>(经历XX时间后过期)且没有过期，命中<code>cache</code>的情况下，<code>from cache</code>不去发出请求。如果强刷（如ctrl+r）会发起请求，但是如果没有修改会返回<code>304</code>内容未修改，如果已经改变则返回新内容。<code>max-age &gt; Expires</code>。</p>\n</li>\n<li><p><code>expires/cache-control</code>虽然是强缓存，但用户主动触发的刷新行为，还是会采用缓存协商的策略，主动触发的刷新行为包括点击刷新按钮、右键刷新、f5刷新、ctrl+f5刷新等。</p>\n</li>\n<li><p>当然如果在控制台里面选中了<code>disable cahce</code>则无论如何都会请求最新内容(304协商缓存、强缓存都无效)，因为1.不会检查本地是否有缓存。2.请求头信息(request header)既没有If-Modified-Since也没有If-None-Match来让服务端判断。地址栏输入的地址按下回车键，该地址页面请求（仅仅是该url）的<code>request header</code>都会带上<code>cache-contro:max-age=0</code>，所以不会命中强缓存，但是通过链接点击的地址会命中缓存</p>\n</li>\n<li><p>chrome下查看所有的from cache文件：chrome://view-http-cache/</p>\n</li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><ul>\n<li>触发 200 from cache：</li>\n</ul>\n<ol>\n<li>直接点击链接访问</li>\n<li>输入网址按回车访问</li>\n<li>二维码扫描</li>\n</ol>\n<ul>\n<li>触发 304：</li>\n</ul>\n<ol>\n<li>刷新页面时触发</li>\n<li>设置了长缓存、但Entity Tags没有移除时触发</li>\n</ol>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p><img src=\"http://www.wclimb.site/cdn/cache.png\" alt=\"流程图\"></p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"JavaScript之Web Worker","date":"2018-09-10T02:29:38.000Z","_content":"\n# 介绍\n\n> Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。此外，他们可以使用XMLHttpRequest执行 I/O  (尽管responseXML和channel属性总是为空)。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。\n\n# Web Worker使用要点\n\n- 同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。\n\n- DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。\n\n- 通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。\n\n- 脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。\n\n- 文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。后面我们允许会做处理。\n\n<!-- more -->\n# 安装http-server\n\nWorker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。所以我们得起一个项目。使用`http-server`最简单\n安装：\n```\n> cnpm i -g http-server\n```\n\n使用：\n```\n> http-server\n```\n\n# 基本使用\n\n我们新建一个文件夹名叫`worker`，里面新建三个文件分别是\n```\nindex.html\nmain.js\nworker.js\n```\n\n新建一个`worker`线程很简单，只需：\n\n```\nvar worker = new Worker('worker.js')\n```\n\n`main.js`:\n```js\nvar worker = new Worker('./worker.js')\nconsole.log('worker running')\nworker.addEventListener('message',e => {\n    console.log('main: ', e.data);\n})\n// 也可使用：\n// worker.onmessage = (e)=>{\n//     console.log('main: ', e.data);\n// }\nworker.postMessage('hello worker,I am from main.js')\n```\n\n`worker.js`:\n```js\nconsole.log('worker task running')\nonmessage = (e)=>{\n    console.log('worker task receive', e.data);\n    // 发送数据事件\n    postMessage('Hello, I am from Worker.js');\n}\n```\n\n在worker文件夹下，命令行输入http-server,启动项目，用浏览器打开，看控制台：\n```\nworker running\nworker task running\nworker task receive hello worker,I am from main.js\nmain:  Hello, I am from Worker.js\n```\n从上面可以看到，`worker`通过`onmessage`来监听数据，通过`postMessgae`来发送数据\n\n\n## 终止 worker\n```\nworker.terminate();\n```\n## 处理错误\n```\nworker.addEventListener('error',  (e) => {\n  console.log('main error', 'filename:' + e.filename + 'message:' + e.message + 'lineno:' + e.lineno;\n});\n```\n\n- event.filename: 导致错误的 Worker 脚本的名称；\n- event.message: 错误的信息；\n- event.lineno: 出现错误的行号；\n\n## 加载外部脚本\n\nmain.js\n```js\nvar worker = new Worker('./worker1.js');\n```\n\nworker1.js\n```js\nconsole.log(\"I'm worker1\")\nimportScripts('worker2.js', 'worker3.js');\n// 或者\n// importScripts('worker2.js');\n// importScripts('worker3.js');\n```\nworker2.js\n```js\nconsole.log(\"I'm worker2\")\n```\nworker3.js\n```js\nconsole.log(\"I'm worker3\")\n```\n\n## 兼容性\n\n[https://caniuse.com/#feat=webworkers](https://caniuse.com/#feat=webworkers)\n兼容性还不是很乐观，不过在移动端的兼容性还不错\n\n\n# 参考\n\n[使用 Web Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)\n[Web Worker 使用教程](http://www.ruanyifeng.com/blog/2018/07/web-worker.html)","source":"_posts/JavaScript之Web-Worker.md","raw":"---\ntitle: JavaScript之Web Worker\ndate: 2018-09-10 10:29:38\ntags:\n- javascript\n- 原创\ncategories: [javascript]\n---\n\n# 介绍\n\n> Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。此外，他们可以使用XMLHttpRequest执行 I/O  (尽管responseXML和channel属性总是为空)。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。\n\n# Web Worker使用要点\n\n- 同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。\n\n- DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。\n\n- 通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。\n\n- 脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。\n\n- 文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。后面我们允许会做处理。\n\n<!-- more -->\n# 安装http-server\n\nWorker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。所以我们得起一个项目。使用`http-server`最简单\n安装：\n```\n> cnpm i -g http-server\n```\n\n使用：\n```\n> http-server\n```\n\n# 基本使用\n\n我们新建一个文件夹名叫`worker`，里面新建三个文件分别是\n```\nindex.html\nmain.js\nworker.js\n```\n\n新建一个`worker`线程很简单，只需：\n\n```\nvar worker = new Worker('worker.js')\n```\n\n`main.js`:\n```js\nvar worker = new Worker('./worker.js')\nconsole.log('worker running')\nworker.addEventListener('message',e => {\n    console.log('main: ', e.data);\n})\n// 也可使用：\n// worker.onmessage = (e)=>{\n//     console.log('main: ', e.data);\n// }\nworker.postMessage('hello worker,I am from main.js')\n```\n\n`worker.js`:\n```js\nconsole.log('worker task running')\nonmessage = (e)=>{\n    console.log('worker task receive', e.data);\n    // 发送数据事件\n    postMessage('Hello, I am from Worker.js');\n}\n```\n\n在worker文件夹下，命令行输入http-server,启动项目，用浏览器打开，看控制台：\n```\nworker running\nworker task running\nworker task receive hello worker,I am from main.js\nmain:  Hello, I am from Worker.js\n```\n从上面可以看到，`worker`通过`onmessage`来监听数据，通过`postMessgae`来发送数据\n\n\n## 终止 worker\n```\nworker.terminate();\n```\n## 处理错误\n```\nworker.addEventListener('error',  (e) => {\n  console.log('main error', 'filename:' + e.filename + 'message:' + e.message + 'lineno:' + e.lineno;\n});\n```\n\n- event.filename: 导致错误的 Worker 脚本的名称；\n- event.message: 错误的信息；\n- event.lineno: 出现错误的行号；\n\n## 加载外部脚本\n\nmain.js\n```js\nvar worker = new Worker('./worker1.js');\n```\n\nworker1.js\n```js\nconsole.log(\"I'm worker1\")\nimportScripts('worker2.js', 'worker3.js');\n// 或者\n// importScripts('worker2.js');\n// importScripts('worker3.js');\n```\nworker2.js\n```js\nconsole.log(\"I'm worker2\")\n```\nworker3.js\n```js\nconsole.log(\"I'm worker3\")\n```\n\n## 兼容性\n\n[https://caniuse.com/#feat=webworkers](https://caniuse.com/#feat=webworkers)\n兼容性还不是很乐观，不过在移动端的兼容性还不错\n\n\n# 参考\n\n[使用 Web Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)\n[Web Worker 使用教程](http://www.ruanyifeng.com/blog/2018/07/web-worker.html)","slug":"JavaScript之Web-Worker","published":1,"updated":"2019-06-06T01:06:26.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8v000959x3rkuky7ls","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。此外，他们可以使用XMLHttpRequest执行 I/O  (尽管responseXML和channel属性总是为空)。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。</p>\n</blockquote>\n<h1 id=\"Web-Worker使用要点\"><a href=\"#Web-Worker使用要点\" class=\"headerlink\" title=\"Web Worker使用要点\"></a>Web Worker使用要点</h1><ul>\n<li><p>同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p>\n</li>\n<li><p>DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。</p>\n</li>\n<li><p>通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p>\n</li>\n<li><p>脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p>\n</li>\n<li><p>文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。后面我们允许会做处理。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"安装http-server\"><a href=\"#安装http-server\" class=\"headerlink\" title=\"安装http-server\"></a>安装http-server</h1><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。所以我们得起一个项目。使用<code>http-server</code>最简单<br>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i -g http-server</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http-server</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><p>我们新建一个文件夹名叫<code>worker</code>，里面新建三个文件分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.html</span><br><span class=\"line\">main.js</span><br><span class=\"line\">worker.js</span><br></pre></td></tr></table></figure></p>\n<p>新建一个<code>worker</code>线程很简单，只需：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var worker = new Worker(&apos;worker.js&apos;)</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'./worker.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'worker running'</span>)</span><br><span class=\"line\">worker.addEventListener(<span class=\"string\">'message'</span>,e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'main: '</span>, e.data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 也可使用：</span></span><br><span class=\"line\"><span class=\"comment\">// worker.onmessage = (e)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('main: ', e.data);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">worker.postMessage(<span class=\"string\">'hello worker,I am from main.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>worker.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'worker task running'</span>)</span><br><span class=\"line\">onmessage = <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker task receive'</span>, e.data);</span><br><span class=\"line\">    <span class=\"comment\">// 发送数据事件</span></span><br><span class=\"line\">    postMessage(<span class=\"string\">'Hello, I am from Worker.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在worker文件夹下，命令行输入http-server,启动项目，用浏览器打开，看控制台：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker running</span><br><span class=\"line\">worker task running</span><br><span class=\"line\">worker task receive hello worker,I am from main.js</span><br><span class=\"line\">main:  Hello, I am from Worker.js</span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看到，<code>worker</code>通过<code>onmessage</code>来监听数据，通过<code>postMessgae</code>来发送数据</p>\n<h2 id=\"终止-worker\"><a href=\"#终止-worker\" class=\"headerlink\" title=\"终止 worker\"></a>终止 worker</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.terminate();</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理错误\"><a href=\"#处理错误\" class=\"headerlink\" title=\"处理错误\"></a>处理错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.addEventListener(&apos;error&apos;,  (e) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;main error&apos;, &apos;filename:&apos; + e.filename + &apos;message:&apos; + e.message + &apos;lineno:&apos; + e.lineno;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>event.filename: 导致错误的 Worker 脚本的名称；</li>\n<li>event.message: 错误的信息；</li>\n<li>event.lineno: 出现错误的行号；</li>\n</ul>\n<h2 id=\"加载外部脚本\"><a href=\"#加载外部脚本\" class=\"headerlink\" title=\"加载外部脚本\"></a>加载外部脚本</h2><p>main.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'./worker1.js'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>worker1.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker1\"</span>)</span><br><span class=\"line\">importScripts(<span class=\"string\">'worker2.js'</span>, <span class=\"string\">'worker3.js'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"comment\">// importScripts('worker2.js');</span></span><br><span class=\"line\"><span class=\"comment\">// importScripts('worker3.js');</span></span><br></pre></td></tr></table></figure></p>\n<p>worker2.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker2\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>worker3.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker3\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p><a href=\"https://caniuse.com/#feat=webworkers\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/#feat=webworkers</a><br>兼容性还不是很乐观，不过在移动端的兼容性还不错</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">使用 Web Workers</a><br><a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\" target=\"_blank\" rel=\"noopener\">Web Worker 使用教程</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。此外，他们可以使用XMLHttpRequest执行 I/O  (尽管responseXML和channel属性总是为空)。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。</p>\n</blockquote>\n<h1 id=\"Web-Worker使用要点\"><a href=\"#Web-Worker使用要点\" class=\"headerlink\" title=\"Web Worker使用要点\"></a>Web Worker使用要点</h1><ul>\n<li><p>同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p>\n</li>\n<li><p>DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。</p>\n</li>\n<li><p>通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p>\n</li>\n<li><p>脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p>\n</li>\n<li><p>文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。后面我们允许会做处理。</p>\n</li>\n</ul>","more":"<h1 id=\"安装http-server\"><a href=\"#安装http-server\" class=\"headerlink\" title=\"安装http-server\"></a>安装http-server</h1><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。所以我们得起一个项目。使用<code>http-server</code>最简单<br>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i -g http-server</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; http-server</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><p>我们新建一个文件夹名叫<code>worker</code>，里面新建三个文件分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.html</span><br><span class=\"line\">main.js</span><br><span class=\"line\">worker.js</span><br></pre></td></tr></table></figure></p>\n<p>新建一个<code>worker</code>线程很简单，只需：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var worker = new Worker(&apos;worker.js&apos;)</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'./worker.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'worker running'</span>)</span><br><span class=\"line\">worker.addEventListener(<span class=\"string\">'message'</span>,e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'main: '</span>, e.data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 也可使用：</span></span><br><span class=\"line\"><span class=\"comment\">// worker.onmessage = (e)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log('main: ', e.data);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">worker.postMessage(<span class=\"string\">'hello worker,I am from main.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>worker.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'worker task running'</span>)</span><br><span class=\"line\">onmessage = <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker task receive'</span>, e.data);</span><br><span class=\"line\">    <span class=\"comment\">// 发送数据事件</span></span><br><span class=\"line\">    postMessage(<span class=\"string\">'Hello, I am from Worker.js'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在worker文件夹下，命令行输入http-server,启动项目，用浏览器打开，看控制台：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker running</span><br><span class=\"line\">worker task running</span><br><span class=\"line\">worker task receive hello worker,I am from main.js</span><br><span class=\"line\">main:  Hello, I am from Worker.js</span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看到，<code>worker</code>通过<code>onmessage</code>来监听数据，通过<code>postMessgae</code>来发送数据</p>\n<h2 id=\"终止-worker\"><a href=\"#终止-worker\" class=\"headerlink\" title=\"终止 worker\"></a>终止 worker</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.terminate();</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理错误\"><a href=\"#处理错误\" class=\"headerlink\" title=\"处理错误\"></a>处理错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.addEventListener(&apos;error&apos;,  (e) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;main error&apos;, &apos;filename:&apos; + e.filename + &apos;message:&apos; + e.message + &apos;lineno:&apos; + e.lineno;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>event.filename: 导致错误的 Worker 脚本的名称；</li>\n<li>event.message: 错误的信息；</li>\n<li>event.lineno: 出现错误的行号；</li>\n</ul>\n<h2 id=\"加载外部脚本\"><a href=\"#加载外部脚本\" class=\"headerlink\" title=\"加载外部脚本\"></a>加载外部脚本</h2><p>main.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'./worker1.js'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>worker1.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker1\"</span>)</span><br><span class=\"line\">importScripts(<span class=\"string\">'worker2.js'</span>, <span class=\"string\">'worker3.js'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"comment\">// importScripts('worker2.js');</span></span><br><span class=\"line\"><span class=\"comment\">// importScripts('worker3.js');</span></span><br></pre></td></tr></table></figure></p>\n<p>worker2.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker2\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>worker3.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm worker3\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p><a href=\"https://caniuse.com/#feat=webworkers\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/#feat=webworkers</a><br>兼容性还不是很乐观，不过在移动端的兼容性还不错</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">使用 Web Workers</a><br><a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\" target=\"_blank\" rel=\"noopener\">Web Worker 使用教程</a></p>"},{"title":"JavaScript之函数记忆","date":"2018-07-12T07:43:34.000Z","_content":"\n最近在读语言精粹，读到函数记忆这块，觉得有必要记录一下\n\n我们在开发过程中经常使用递归的方式调用函数，但是开发过程中很少有关心性能问题\n\n我们看一下下面这段代码\n```js\nvar count = 0\nvar f = function(n){\n    count++\n    return n < 2 ? n : f(n - 1) + f(n - 2);\n}\nfor(var i = 0; i <= 10; i++){\n    console.log(i,f(i))\n}\nconsole.log('执行次数', count)\n```\n结果\n```js\n0 0\n1 1\n2 1\n3 2\n4 3\n5 5\n6 8\n7 13\n8 21\n9 34\n10 55\n'执行次数', 453\n```\n执行一遍发现，f这个函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已经被刚计算过的值。如果我们让函数具备记忆功能，就可以显著减少运算量。\n\n接下来，我们定义一个memo的数组来保存我们得储存结果，并把它隐藏在闭包中，让该函数能一直访问到这个数组，不被垃圾回收机制回收\n\n```js\nvar count = 0\nvar f = function(){\n    var memo = [0,1];\n    var fib = function(n){\n        count++\n        var result = memo[n];\n        if(typeof result !== 'number'){\n            result = fib(n - 1) + fib(n - 2)\n            memo[n] = result\n        }\n        return result\n    }\n    return fib\n}()\nfor(var i = 0; i <= 10; i++){\n    console.log(i,f(i))\n}\nconsole.log('执行次数', count)\n\n```\n执行结果\n```js\n0 0\n1 1\n2 1\n3 2\n4 3\n5 5\n6 8\n7 13\n8 21\n9 34\n10 55\n执行次数 29\n```\n现在f函数只被调用了29次，我们调用了它11次，它调用了18次去取得之前储存的结果。\n\n先就分享到这吧，关键拓宽思路\n\nGitHub：[wclimb](https://github.com/wclimb)","source":"_posts/JavaScript之函数记忆.md","raw":"---\ntitle: JavaScript之函数记忆\ndate: 2018-07-12 15:43:34\ntags:\n- javascript\n- 原创\ncategories: [javascript]\n---\n\n最近在读语言精粹，读到函数记忆这块，觉得有必要记录一下\n\n我们在开发过程中经常使用递归的方式调用函数，但是开发过程中很少有关心性能问题\n\n我们看一下下面这段代码\n```js\nvar count = 0\nvar f = function(n){\n    count++\n    return n < 2 ? n : f(n - 1) + f(n - 2);\n}\nfor(var i = 0; i <= 10; i++){\n    console.log(i,f(i))\n}\nconsole.log('执行次数', count)\n```\n结果\n```js\n0 0\n1 1\n2 1\n3 2\n4 3\n5 5\n6 8\n7 13\n8 21\n9 34\n10 55\n'执行次数', 453\n```\n执行一遍发现，f这个函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已经被刚计算过的值。如果我们让函数具备记忆功能，就可以显著减少运算量。\n\n接下来，我们定义一个memo的数组来保存我们得储存结果，并把它隐藏在闭包中，让该函数能一直访问到这个数组，不被垃圾回收机制回收\n\n```js\nvar count = 0\nvar f = function(){\n    var memo = [0,1];\n    var fib = function(n){\n        count++\n        var result = memo[n];\n        if(typeof result !== 'number'){\n            result = fib(n - 1) + fib(n - 2)\n            memo[n] = result\n        }\n        return result\n    }\n    return fib\n}()\nfor(var i = 0; i <= 10; i++){\n    console.log(i,f(i))\n}\nconsole.log('执行次数', count)\n\n```\n执行结果\n```js\n0 0\n1 1\n2 1\n3 2\n4 3\n5 5\n6 8\n7 13\n8 21\n9 34\n10 55\n执行次数 29\n```\n现在f函数只被调用了29次，我们调用了它11次，它调用了18次去取得之前储存的结果。\n\n先就分享到这吧，关键拓宽思路\n\nGitHub：[wclimb](https://github.com/wclimb)","slug":"JavaScript之函数记忆","published":1,"updated":"2019-06-06T01:06:26.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8w000a59x3brzx1yee","content":"<p>最近在读语言精粹，读到函数记忆这块，觉得有必要记录一下</p>\n<p>我们在开发过程中经常使用递归的方式调用函数，但是开发过程中很少有关心性能问题</p>\n<p>我们看一下下面这段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">2</span> ? n : f(n - <span class=\"number\">1</span>) + f(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i,f(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行次数'</span>, count)</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"string\">'执行次数'</span>, <span class=\"number\">453</span></span><br></pre></td></tr></table></figure></p>\n<p>执行一遍发现，f这个函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已经被刚计算过的值。如果我们让函数具备记忆功能，就可以显著减少运算量。</p>\n<p>接下来，我们定义一个memo的数组来保存我们得储存结果，并把它隐藏在闭包中，让该函数能一直访问到这个数组，不被垃圾回收机制回收</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> memo = [<span class=\"number\">0</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = memo[n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> result !== <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">            result = fib(n - <span class=\"number\">1</span>) + fib(n - <span class=\"number\">2</span>)</span><br><span class=\"line\">            memo[n] = result</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i,f(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行次数'</span>, count)</span><br></pre></td></tr></table></figure>\n<p>执行结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">55</span></span><br><span class=\"line\">执行次数 <span class=\"number\">29</span></span><br></pre></td></tr></table></figure></p>\n<p>现在f函数只被调用了29次，我们调用了它11次，它调用了18次去取得之前储存的结果。</p>\n<p>先就分享到这吧，关键拓宽思路</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在读语言精粹，读到函数记忆这块，觉得有必要记录一下</p>\n<p>我们在开发过程中经常使用递归的方式调用函数，但是开发过程中很少有关心性能问题</p>\n<p>我们看一下下面这段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &lt; <span class=\"number\">2</span> ? n : f(n - <span class=\"number\">1</span>) + f(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i,f(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行次数'</span>, count)</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"string\">'执行次数'</span>, <span class=\"number\">453</span></span><br></pre></td></tr></table></figure></p>\n<p>执行一遍发现，f这个函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已经被刚计算过的值。如果我们让函数具备记忆功能，就可以显著减少运算量。</p>\n<p>接下来，我们定义一个memo的数组来保存我们得储存结果，并把它隐藏在闭包中，让该函数能一直访问到这个数组，不被垃圾回收机制回收</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> memo = [<span class=\"number\">0</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = memo[n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> result !== <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">            result = fib(n - <span class=\"number\">1</span>) + fib(n - <span class=\"number\">2</span>)</span><br><span class=\"line\">            memo[n] = result</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i,f(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行次数'</span>, count)</span><br></pre></td></tr></table></figure>\n<p>执行结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">55</span></span><br><span class=\"line\">执行次数 <span class=\"number\">29</span></span><br></pre></td></tr></table></figure></p>\n<p>现在f函数只被调用了29次，我们调用了它11次，它调用了18次去取得之前储存的结果。</p>\n<p>先就分享到这吧，关键拓宽思路</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n"},{"title":"JavaScript之原型与原型链","date":"2018-06-13T03:39:41.000Z","_content":"\n# 万物皆对象\n\n在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子\n我们可以使用`typeof`来做类型判断\n\n```js\ntypeof a;             // undefined\ntypeof 1;             // number\ntypeof 'wclimb';      // string\ntypeof true;          // boolean\n\ntypeof function(){};  // function\ntypeof [];            // object\ntypeof null;          // object\ntypeof {};            // object\n```\n除了`undefined`、`number`、`string`、`boolean`属于值类型之外，其他都是对象。你可能要问了，不是还有一个是`function`吗？要校验他是不是应该对象可以这样做:\n```js\nvar fn = function(){}\nfn instanceof Object // true\n```\n由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子\n```js\nfunction Person(name){\n    this.name = name; \n}\nvar person = new Person('wclimb');\nconsole.log(person) // Person {name: \"wclimb\"}\n```\n由此我们可以得知，对象都是通过函数创建的，这么说你可能又会说不对，你看下面的就不是函数创建的\n<!-- more -->\n```js\nvar person = {name:'wclimb'}\n```\n你咋就这么飘呢？我竟无言以对，没错，这是个意外、意外、意外。但是归根结底他还是通过函数创建的\n```js\n    var person = new Object()\n    person.name = 'wclimb'\n```\nso，现在你只要知道对象是通过函数创建的就可以了，来跟着我读：\n第一遍 对象都是通过函数创建的\n第二遍 对象都是通过函数创建的\n第三遍 对象都是通过函数创建的\n\n# 构造函数(constructor)\n\n```js\nfunction Person(name){\n    this.name = name\n}\nvar person1 = new Person('wclimb 1')\nvar person2 = new Person('wclimb 2')\n```\n上面`Person`就是一个构造函数，我们通过`new`的方式创建了一个实例对象`person`\n我们来看看person1和person2的`constructor`(构造函数)是不是指向Person的\n```js\nperson1.constructor === Person // true\nperson2.constructor === Person // true\n```\n# 原型(prototype)\n\n在JavaScript中，每定义一个函数都会产生一个`prototype`(原型)属性，这个属性指向函数的原型对象\n```js\nfunction Person(){}\nPerson.prototype.name = 'wclimb'\nPerson.prototype.age = '24'\nPerson.prototype.sayAge = function(){\n    console.log(this.age)\n}\nvar person = new Person()\nperson.sayAge(); //  24\n```\n那么这个`prototype`到底是什么呢？跟构造函数有关系吗？\n\n![](/img/prototype.png)\n\n上图就可以反映出他们之间的关系\n\n其实函数的`prototype`指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成：\n```js\nPerson.prototype = {\n    name: 'wclimb',\n    age: 24,\n    satAge: function(){\n        console.log(this.age)\n    }\n}\n```\n# 隐式原型(`__proto__`)\n\n上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个`__proto__`(隐式原型)\n每个对象都有一个`__proto__`属性，指向创建该对象函数的`prototype`，我们可以来试试，还是上面的例子：\n```js\nfunction Person(){}\nvar person = new Person()\nperson.__proto__ === Person.prototype // true\n```\n现在他们的关系图如下\n\n![](/img/proto.png)\n\n由上图我们可以知道：\n```js\nPerson.prototype.constructor = Person\nperson.__proto__ = Person.prototype\nperson.constructor = Person\n```\n我们可以看到`person.__proto__`指向构造函数的原型，那么构造函数的原型即`Person`的`__proto__`指向哪里呢？\n我们知道构造函数其实就是由`Function`来创建的，由此得出:\n```js\nPerson.__proto__ === Function.prototype\n```\n那么构造函数的原型即`Person.prototype`的`__proto__`指向哪里呢？\n原型对象其实是通过`Object`生成的，自然而然的得出:\n```js\nPerson.prototype.__proto__ === Object.prototype\n```\n\n那么`Object.prototype`的`__proto__`指向哪里呢？答案是`null`，最终得到下面的图\n\n![](/img/allProto.png)\n\n\n抛开这张图，来看看下面几道题\n\n1. `person.__proto__`\n2. `Person.__proto__`\n3. `Person.prototype.__proto__`\n4. `Object.__proto__`\n5. `Object.prototype.__proto__`\n\n解：\n1. 每个对象都有一个`__proto__`属性，指向创建该对象函数的`prototype`，因为Person是person的构造函数\n`Person === person.constructor`为`true`,所以：`person.__proto__ === Person.prototype`\n2. `Person`构造函数是由`Function`创建的，所以可以得出`Person.__proto__ === Fucntion.prototype`\n3. 我们上面说过`Person.prototype`其实是一个对象，而对象是由`Object`创建的，所以 `Person.prototype.__proto__ === Object.prototype`\n4. `Object`对象都是函数创建的，所以`Object.__proto__ === Function.prototype`\n5. 虽然`Object.prototype`是一个对象但是他的`__proto__`为`null`\n\n\n# 实例和原型\n\n当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到\n\n```js\nfunction Person(){}\nPerson.prototype.name = '我来自原型'\n\nvar person = new Person()\nperson.name = '我来自实例'\nconsole.log(person.name); // 我来自实例\ndelete person.name\nconsole.log(person.name)); // 我来自原型\n```\n首先person实例中有这个属性，返回`我来自实例`,然后将它删除之后，会从原型中招，也就是`person.__proto__`，因为`Person.prototype === person.__proto__`，所以得到`我来自原型`\n\n\n# 总结\n\n原型和原型链基本已经讲解完，不过还有待完善，如有错误，还望指正\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n# 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n\n# QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n","source":"_posts/JavaScript之原型与原型链.md","raw":"---\ntitle: JavaScript之原型与原型链\ndate: 2018-06-13 11:39:41\ntags:\n- javascript\n- 原创\ncategories: [javascript]\n---\n\n# 万物皆对象\n\n在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子\n我们可以使用`typeof`来做类型判断\n\n```js\ntypeof a;             // undefined\ntypeof 1;             // number\ntypeof 'wclimb';      // string\ntypeof true;          // boolean\n\ntypeof function(){};  // function\ntypeof [];            // object\ntypeof null;          // object\ntypeof {};            // object\n```\n除了`undefined`、`number`、`string`、`boolean`属于值类型之外，其他都是对象。你可能要问了，不是还有一个是`function`吗？要校验他是不是应该对象可以这样做:\n```js\nvar fn = function(){}\nfn instanceof Object // true\n```\n由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子\n```js\nfunction Person(name){\n    this.name = name; \n}\nvar person = new Person('wclimb');\nconsole.log(person) // Person {name: \"wclimb\"}\n```\n由此我们可以得知，对象都是通过函数创建的，这么说你可能又会说不对，你看下面的就不是函数创建的\n<!-- more -->\n```js\nvar person = {name:'wclimb'}\n```\n你咋就这么飘呢？我竟无言以对，没错，这是个意外、意外、意外。但是归根结底他还是通过函数创建的\n```js\n    var person = new Object()\n    person.name = 'wclimb'\n```\nso，现在你只要知道对象是通过函数创建的就可以了，来跟着我读：\n第一遍 对象都是通过函数创建的\n第二遍 对象都是通过函数创建的\n第三遍 对象都是通过函数创建的\n\n# 构造函数(constructor)\n\n```js\nfunction Person(name){\n    this.name = name\n}\nvar person1 = new Person('wclimb 1')\nvar person2 = new Person('wclimb 2')\n```\n上面`Person`就是一个构造函数，我们通过`new`的方式创建了一个实例对象`person`\n我们来看看person1和person2的`constructor`(构造函数)是不是指向Person的\n```js\nperson1.constructor === Person // true\nperson2.constructor === Person // true\n```\n# 原型(prototype)\n\n在JavaScript中，每定义一个函数都会产生一个`prototype`(原型)属性，这个属性指向函数的原型对象\n```js\nfunction Person(){}\nPerson.prototype.name = 'wclimb'\nPerson.prototype.age = '24'\nPerson.prototype.sayAge = function(){\n    console.log(this.age)\n}\nvar person = new Person()\nperson.sayAge(); //  24\n```\n那么这个`prototype`到底是什么呢？跟构造函数有关系吗？\n\n![](/img/prototype.png)\n\n上图就可以反映出他们之间的关系\n\n其实函数的`prototype`指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成：\n```js\nPerson.prototype = {\n    name: 'wclimb',\n    age: 24,\n    satAge: function(){\n        console.log(this.age)\n    }\n}\n```\n# 隐式原型(`__proto__`)\n\n上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个`__proto__`(隐式原型)\n每个对象都有一个`__proto__`属性，指向创建该对象函数的`prototype`，我们可以来试试，还是上面的例子：\n```js\nfunction Person(){}\nvar person = new Person()\nperson.__proto__ === Person.prototype // true\n```\n现在他们的关系图如下\n\n![](/img/proto.png)\n\n由上图我们可以知道：\n```js\nPerson.prototype.constructor = Person\nperson.__proto__ = Person.prototype\nperson.constructor = Person\n```\n我们可以看到`person.__proto__`指向构造函数的原型，那么构造函数的原型即`Person`的`__proto__`指向哪里呢？\n我们知道构造函数其实就是由`Function`来创建的，由此得出:\n```js\nPerson.__proto__ === Function.prototype\n```\n那么构造函数的原型即`Person.prototype`的`__proto__`指向哪里呢？\n原型对象其实是通过`Object`生成的，自然而然的得出:\n```js\nPerson.prototype.__proto__ === Object.prototype\n```\n\n那么`Object.prototype`的`__proto__`指向哪里呢？答案是`null`，最终得到下面的图\n\n![](/img/allProto.png)\n\n\n抛开这张图，来看看下面几道题\n\n1. `person.__proto__`\n2. `Person.__proto__`\n3. `Person.prototype.__proto__`\n4. `Object.__proto__`\n5. `Object.prototype.__proto__`\n\n解：\n1. 每个对象都有一个`__proto__`属性，指向创建该对象函数的`prototype`，因为Person是person的构造函数\n`Person === person.constructor`为`true`,所以：`person.__proto__ === Person.prototype`\n2. `Person`构造函数是由`Function`创建的，所以可以得出`Person.__proto__ === Fucntion.prototype`\n3. 我们上面说过`Person.prototype`其实是一个对象，而对象是由`Object`创建的，所以 `Person.prototype.__proto__ === Object.prototype`\n4. `Object`对象都是函数创建的，所以`Object.__proto__ === Function.prototype`\n5. 虽然`Object.prototype`是一个对象但是他的`__proto__`为`null`\n\n\n# 实例和原型\n\n当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到\n\n```js\nfunction Person(){}\nPerson.prototype.name = '我来自原型'\n\nvar person = new Person()\nperson.name = '我来自实例'\nconsole.log(person.name); // 我来自实例\ndelete person.name\nconsole.log(person.name)); // 我来自原型\n```\n首先person实例中有这个属性，返回`我来自实例`,然后将它删除之后，会从原型中招，也就是`person.__proto__`，因为`Person.prototype === person.__proto__`，所以得到`我来自原型`\n\n\n# 总结\n\n原型和原型链基本已经讲解完，不过还有待完善，如有错误，还望指正\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n# 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n\n# QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n","slug":"JavaScript之原型与原型链","published":1,"updated":"2019-06-06T01:06:26.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns8z000d59x3x2ptaqb2","content":"<h1 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h1><p>在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子<br>我们可以使用<code>typeof</code>来做类型判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> a;             <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>;             <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'wclimb'</span>;      <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>;          <span class=\"comment\">// boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;  <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [];            <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;          <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;;            <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n<p>除了<code>undefined</code>、<code>number</code>、<code>string</code>、<code>boolean</code>属于值类型之外，其他都是对象。你可能要问了，不是还有一个是<code>function</code>吗？要校验他是不是应该对象可以这样做:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person) <span class=\"comment\">// Person &#123;name: \"wclimb\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>由此我们可以得知，对象都是通过函数创建的，这么说你可能又会说不对，你看下面的就不是函数创建的<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'wclimb'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你咋就这么飘呢？我竟无言以对，没错，这是个意外、意外、意外。但是归根结底他还是通过函数创建的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">person.name = <span class=\"string\">'wclimb'</span></span><br></pre></td></tr></table></figure></p>\n<p>so，现在你只要知道对象是通过函数创建的就可以了，来跟着我读：<br>第一遍 对象都是通过函数创建的<br>第二遍 对象都是通过函数创建的<br>第三遍 对象都是通过函数创建的</p>\n<h1 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数(constructor)\"></a>构造函数(constructor)</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb 1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb 2'</span>)</span><br></pre></td></tr></table></figure>\n<p>上面<code>Person</code>就是一个构造函数，我们通过<code>new</code>的方式创建了一个实例对象<code>person</code><br>我们来看看person1和person2的<code>constructor</code>(构造函数)是不是指向Person的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1.constructor === Person <span class=\"comment\">// true</span></span><br><span class=\"line\">person2.constructor === Person <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"原型-prototype\"><a href=\"#原型-prototype\" class=\"headerlink\" title=\"原型(prototype)\"></a>原型(prototype)</h1><p>在JavaScript中，每定义一个函数都会产生一个<code>prototype</code>(原型)属性，这个属性指向函数的原型对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'wclimb'</span></span><br><span class=\"line\">Person.prototype.age = <span class=\"string\">'24'</span></span><br><span class=\"line\">Person.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.sayAge(); <span class=\"comment\">//  24</span></span><br></pre></td></tr></table></figure></p>\n<p>那么这个<code>prototype</code>到底是什么呢？跟构造函数有关系吗？</p>\n<p><img src=\"/img/prototype.png\" alt></p>\n<p>上图就可以反映出他们之间的关系</p>\n<p>其实函数的<code>prototype</code>指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">24</span>,</span><br><span class=\"line\">    satAge: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"隐式原型-proto\"><a href=\"#隐式原型-proto\" class=\"headerlink\" title=\"隐式原型(__proto__)\"></a>隐式原型(<code>__proto__</code>)</h1><p>上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个<code>__proto__</code>(隐式原型)<br>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，我们可以来试试，还是上面的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.__proto__ === Person.prototype <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>现在他们的关系图如下</p>\n<p><img src=\"/img/proto.png\" alt></p>\n<p>由上图我们可以知道：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.constructor = Person</span><br><span class=\"line\">person.__proto__ = Person.prototype</span><br><span class=\"line\">person.constructor = Person</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到<code>person.__proto__</code>指向构造函数的原型，那么构造函数的原型即<code>Person</code>的<code>__proto__</code>指向哪里呢？<br>我们知道构造函数其实就是由<code>Function</code>来创建的，由此得出:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.__proto__ === <span class=\"built_in\">Function</span>.prototype</span><br></pre></td></tr></table></figure></p>\n<p>那么构造函数的原型即<code>Person.prototype</code>的<code>__proto__</code>指向哪里呢？<br>原型对象其实是通过<code>Object</code>生成的，自然而然的得出:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br></pre></td></tr></table></figure></p>\n<p>那么<code>Object.prototype</code>的<code>__proto__</code>指向哪里呢？答案是<code>null</code>，最终得到下面的图</p>\n<p><img src=\"/img/allProto.png\" alt></p>\n<p>抛开这张图，来看看下面几道题</p>\n<ol>\n<li><code>person.__proto__</code></li>\n<li><code>Person.__proto__</code></li>\n<li><code>Person.prototype.__proto__</code></li>\n<li><code>Object.__proto__</code></li>\n<li><code>Object.prototype.__proto__</code></li>\n</ol>\n<p>解：</p>\n<ol>\n<li>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，因为Person是person的构造函数<br><code>Person === person.constructor</code>为<code>true</code>,所以：<code>person.__proto__ === Person.prototype</code></li>\n<li><code>Person</code>构造函数是由<code>Function</code>创建的，所以可以得出<code>Person.__proto__ === Fucntion.prototype</code></li>\n<li>我们上面说过<code>Person.prototype</code>其实是一个对象，而对象是由<code>Object</code>创建的，所以 <code>Person.prototype.__proto__ === Object.prototype</code></li>\n<li><code>Object</code>对象都是函数创建的，所以<code>Object.__proto__ === Function.prototype</code></li>\n<li>虽然<code>Object.prototype</code>是一个对象但是他的<code>__proto__</code>为<code>null</code></li>\n</ol>\n<h1 id=\"实例和原型\"><a href=\"#实例和原型\" class=\"headerlink\" title=\"实例和原型\"></a>实例和原型</h1><p>当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'我来自原型'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.name = <span class=\"string\">'我来自实例'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 我来自实例</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.name</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)); <span class=\"comment\">// 我来自原型</span></span><br></pre></td></tr></table></figure>\n<p>首先person实例中有这个属性，返回<code>我来自实例</code>,然后将它删除之后，会从原型中招，也就是<code>person.__proto__</code>，因为<code>Person.prototype === person.__proto__</code>，所以得到<code>我来自原型</code></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>原型和原型链基本已经讲解完，不过还有待完善，如有错误，还望指正</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h1 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h1><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n<h1 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"万物皆对象\"><a href=\"#万物皆对象\" class=\"headerlink\" title=\"万物皆对象\"></a>万物皆对象</h1><p>在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子<br>我们可以使用<code>typeof</code>来做类型判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> a;             <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>;             <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'wclimb'</span>;      <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>;          <span class=\"comment\">// boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;  <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [];            <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;          <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;;            <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n<p>除了<code>undefined</code>、<code>number</code>、<code>string</code>、<code>boolean</code>属于值类型之外，其他都是对象。你可能要问了，不是还有一个是<code>function</code>吗？要校验他是不是应该对象可以这样做:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person) <span class=\"comment\">// Person &#123;name: \"wclimb\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>由此我们可以得知，对象都是通过函数创建的，这么说你可能又会说不对，你看下面的就不是函数创建的<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'wclimb'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你咋就这么飘呢？我竟无言以对，没错，这是个意外、意外、意外。但是归根结底他还是通过函数创建的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">person.name = <span class=\"string\">'wclimb'</span></span><br></pre></td></tr></table></figure></p>\n<p>so，现在你只要知道对象是通过函数创建的就可以了，来跟着我读：<br>第一遍 对象都是通过函数创建的<br>第二遍 对象都是通过函数创建的<br>第三遍 对象都是通过函数创建的</p>\n<h1 id=\"构造函数-constructor\"><a href=\"#构造函数-constructor\" class=\"headerlink\" title=\"构造函数(constructor)\"></a>构造函数(constructor)</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb 1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'wclimb 2'</span>)</span><br></pre></td></tr></table></figure>\n<p>上面<code>Person</code>就是一个构造函数，我们通过<code>new</code>的方式创建了一个实例对象<code>person</code><br>我们来看看person1和person2的<code>constructor</code>(构造函数)是不是指向Person的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1.constructor === Person <span class=\"comment\">// true</span></span><br><span class=\"line\">person2.constructor === Person <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"原型-prototype\"><a href=\"#原型-prototype\" class=\"headerlink\" title=\"原型(prototype)\"></a>原型(prototype)</h1><p>在JavaScript中，每定义一个函数都会产生一个<code>prototype</code>(原型)属性，这个属性指向函数的原型对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'wclimb'</span></span><br><span class=\"line\">Person.prototype.age = <span class=\"string\">'24'</span></span><br><span class=\"line\">Person.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.sayAge(); <span class=\"comment\">//  24</span></span><br></pre></td></tr></table></figure></p>\n<p>那么这个<code>prototype</code>到底是什么呢？跟构造函数有关系吗？</p>\n<p><img src=\"/img/prototype.png\" alt></p>\n<p>上图就可以反映出他们之间的关系</p>\n<p>其实函数的<code>prototype</code>指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">24</span>,</span><br><span class=\"line\">    satAge: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"隐式原型-proto\"><a href=\"#隐式原型-proto\" class=\"headerlink\" title=\"隐式原型(__proto__)\"></a>隐式原型(<code>__proto__</code>)</h1><p>上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个<code>__proto__</code>(隐式原型)<br>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，我们可以来试试，还是上面的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.__proto__ === Person.prototype <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>现在他们的关系图如下</p>\n<p><img src=\"/img/proto.png\" alt></p>\n<p>由上图我们可以知道：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.constructor = Person</span><br><span class=\"line\">person.__proto__ = Person.prototype</span><br><span class=\"line\">person.constructor = Person</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到<code>person.__proto__</code>指向构造函数的原型，那么构造函数的原型即<code>Person</code>的<code>__proto__</code>指向哪里呢？<br>我们知道构造函数其实就是由<code>Function</code>来创建的，由此得出:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.__proto__ === <span class=\"built_in\">Function</span>.prototype</span><br></pre></td></tr></table></figure></p>\n<p>那么构造函数的原型即<code>Person.prototype</code>的<code>__proto__</code>指向哪里呢？<br>原型对象其实是通过<code>Object</code>生成的，自然而然的得出:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br></pre></td></tr></table></figure></p>\n<p>那么<code>Object.prototype</code>的<code>__proto__</code>指向哪里呢？答案是<code>null</code>，最终得到下面的图</p>\n<p><img src=\"/img/allProto.png\" alt></p>\n<p>抛开这张图，来看看下面几道题</p>\n<ol>\n<li><code>person.__proto__</code></li>\n<li><code>Person.__proto__</code></li>\n<li><code>Person.prototype.__proto__</code></li>\n<li><code>Object.__proto__</code></li>\n<li><code>Object.prototype.__proto__</code></li>\n</ol>\n<p>解：</p>\n<ol>\n<li>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，因为Person是person的构造函数<br><code>Person === person.constructor</code>为<code>true</code>,所以：<code>person.__proto__ === Person.prototype</code></li>\n<li><code>Person</code>构造函数是由<code>Function</code>创建的，所以可以得出<code>Person.__proto__ === Fucntion.prototype</code></li>\n<li>我们上面说过<code>Person.prototype</code>其实是一个对象，而对象是由<code>Object</code>创建的，所以 <code>Person.prototype.__proto__ === Object.prototype</code></li>\n<li><code>Object</code>对象都是函数创建的，所以<code>Object.__proto__ === Function.prototype</code></li>\n<li>虽然<code>Object.prototype</code>是一个对象但是他的<code>__proto__</code>为<code>null</code></li>\n</ol>\n<h1 id=\"实例和原型\"><a href=\"#实例和原型\" class=\"headerlink\" title=\"实例和原型\"></a>实例和原型</h1><p>当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'我来自原型'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">person.name = <span class=\"string\">'我来自实例'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 我来自实例</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.name</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)); <span class=\"comment\">// 我来自原型</span></span><br></pre></td></tr></table></figure>\n<p>首先person实例中有这个属性，返回<code>我来自实例</code>,然后将它删除之后，会从原型中招，也就是<code>person.__proto__</code>，因为<code>Person.prototype === person.__proto__</code>，所以得到<code>我来自原型</code></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>原型和原型链基本已经讲解完，不过还有待完善，如有错误，还望指正</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h1 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h1><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n<h1 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>"},{"title":"JavaScript之实现一个简单的Vue","date":"2018-09-11T09:48:22.000Z","_content":"\n\nvue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vue\n\n# Object.defineProperty()\n\n实现之前我们得先看一下[Object.defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)的实现，因为vue主要是通过数据劫持来实现的，通过`get`、`set`来完成数据的读取和更新。\n\n```js\nvar obj = {name:'wclimb'}\nvar age = 24\nObject.defineProperty(obj,'age',{\n\tenumerable: true, // 可枚举\n    configurable: false, // 不能再define\n    get () {\n        return age\n    },\n    set (newVal) {\n        console.log('我改变了',age +' -> '+newVal);\n        age = newVal\n    }\n})\n\n> obj.age\n> 24\n\n> obj.age = 25;\n> 我改变了 24 -> 25\n> 25\n```\n从上面可以看到通过`get`获取数据，通过`set`监听到数据变化执行相应操作，还是不明白的话可以去看看[Object.defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)文档。\n<!-- more -->\n# 流程图\n\n![](http://www.wclimb.site/img/vue.png)\n\n# html代码结构\n\n```\n<div id=\"wrap\">\n    <p v-html=\"test\"></p>\n    <input type=\"text\" v-model=\"form\">\n    <input type=\"text\" v-model=\"form\">\n    <button @click=\"changeValue\">改变值</button>\n    {{form}}\n</div>\n```\n\n# js调用\n\n```js\n    new Vue({\n        el: '#wrap',\n        data:{\n            form: '这是form的值',\n            test: '<strong>我是粗体</strong>',\n        },\n        methods:{\n            changeValue(){\n                console.log(this.form)\n                this.form = '值被我改变了，气不气？'\n            }\n        }\n    })\n```\n\n# Vue结构\n\n```js\n    class Vue{\n        constructor(){}\n        proxyData(){}\n        observer(){}\n        compile(){}\n        compileText(){}\n    }\n    class Watcher{\n        constructor(){}\n        update(){}\n    }\n```\n- `Vue constructor` 构造函数主要是数据的初始化\n- `proxyData` 数据代理\n- `observer` 劫持监听所有数据\n- `compile` 解析dom\n- `compileText` 解析`dom`里处理纯双花括号的操作\n- `Watcher` 更新视图操作\n\n# Vue constructor 初始化\n\n```js\n    class Vue{\n        constructor(options = {}){\n            this.$el = document.querySelector(options.el);\n            let data = this.data = options.data; \n            // 代理data，使其能直接this.xxx的方式访问data，正常的话需要this.data.xxx\n            Object.keys(data).forEach((key)=> {\n                this.proxyData(key);\n            });\n            this.methods = options.methods // 事件方法\n            this.watcherTask = {}; // 需要监听的任务列表\n            this.observer(data); // 初始化劫持监听所有数据\n            this.compile(this.$el); // 解析dom\n        }\n    }\n```\n上面主要是初始化操作，针对传过来的数据进行处理\n\n# proxyData 代理data\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            let that = this;\n            Object.defineProperty(that, key, {\n                configurable: false,\n                enumerable: true,\n                get () {\n                    return that.data[key];\n                },\n                set (newVal) {\n                    that.data[key] = newVal;\n                }\n            });\n        }\n    }\n\n```\n上面主要是代理`data`到最上层，`this.xxx`的方式直接访问`data`\n\n# observer 劫持监听\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            ......\n        }\n        observer(data){\n            let that = this\n            Object.keys(data).forEach(key=>{\n                let value = data[key]\n                this.watcherTask[key] = []\n                Object.defineProperty(data,key,{\n                    configurable: false,\n                    enumerable: true,\n                    get(){\n                        return value\n                    },\n                    set(newValue){\n                        if(newValue !== value){\n                            value = newValue\n                            that.watcherTask[key].forEach(task => {\n                                task.update()\n                            })\n                        }\n                    }\n                })\n            })\n        }\n    }\n```\n同样是使用`Object.defineProperty`来监听数据，初始化需要订阅的数据。\n把需要订阅的数据到`push`到`watcherTask`里，等到时候需要更新的时候就可以批量更新数据了。👇下面就是；\n遍历订阅池，批量更新视图。\n```js\n    set(newValue){\n        if(newValue !== value){\n            value = newValue\n            // 批量更新视图\n            that.watcherTask[key].forEach(task => {\n                task.update()\n            })\n        }\n    }              \n```\n\n# compile 解析dom\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            ......\n        }\n        observer(data){\n            ......\n        }\n        compile(el){\n            var nodes = el.childNodes;\n            for (let i = 0; i < nodes.length; i++) {\n                const node = nodes[i];\n                if(node.nodeType === 3){\n                    var text = node.textContent.trim();\n                    if (!text) continue;\n                    this.compileText(node,'textContent')                \n                }else if(node.nodeType === 1){\n                    if(node.childNodes.length > 0){\n                        this.compile(node)\n                    }\n                    if(node.hasAttribute('v-model') && (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA')){\n                        node.addEventListener('input',(()=>{\n                            let attrVal = node.getAttribute('v-model')\n                            this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'value'))\n                            node.removeAttribute('v-model')\n                            return () => {\n                                this.data[attrVal] = node.value\n                            }\n                        })())\n                    }\n                    if(node.hasAttribute('v-html')){\n                        let attrVal = node.getAttribute('v-html');\n                        this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'innerHTML'))\n                        node.removeAttribute('v-html')\n                    }\n                    this.compileText(node,'innerHTML')\n                    if(node.hasAttribute('@click')){\n                        let attrVal = node.getAttribute('@click')\n                        node.removeAttribute('@click')\n                        node.addEventListener('click',e => {\n                            this.methods[attrVal] && this.methods[attrVal].bind(this)()\n                        })\n                    }\n                }\n            }\n        },\n        compileText(node,type){\n            let reg = /\\{\\{(.*?)\\}\\}/g, txt = node.textContent;\n            if(reg.test(txt)){\n                node.textContent = txt.replace(reg,(matched,value)=>{\n                    let tpl = this.watcherTask[value] || []\n                    tpl.push(new Watcher(node,this,value,type))\n                    if(value.split('.').length > 1){\n                        let v = null\n                        value.split('.').forEach((val,i)=>{\n                            v = !v ? this[val] : v[val]\n                        })\n                        return v\n                    }else{\n                        return this[value]\n                    }\n                })\n            }\n        }\n    }\n```\n这里代码比较多，我们拆分看你就会觉得很简单了\n\n1. 首先我们先遍历`el`元素下面的所有子节点，`node.nodeType === 3` 的意思是当前元素是文本节点，`node.nodeType === 1` 的意思是当前元素是元素节点。因为可能有的是纯文本的形式，如`纯双花括号`就是纯文本的文本节点，然后通过判断元素节点是否还存在子节点，如果有的话就递归调用`compile`方法。下面重头戏来了，我们拆开看：\n```js\nif(node.hasAttribute('v-html')){\n    let attrVal = node.getAttribute('v-html');\n    this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'innerHTML'))\n    node.removeAttribute('v-html')\n}\n```\n上面这个首先判断node节点上是否有`v-html`这种指令，如果存在的话，我们就发布订阅，怎么发布订阅呢？只需要把当前需要订阅的数据`push`到`watcherTask`里面，然后到时候在设置值的时候就可以批量更新了，实现双向数据绑定，也就是下面的操作\n```js\nthat.watcherTask[key].forEach(task => {\n    task.update()\n})\n```\n然后`push`的值是一个`Watcher`的实例，首先他new的时候会先执行一次，执行的操作就是去把`纯双花括号` -> 1，也就是说把我们写好的模板数据更新到模板视图上。\n最后把当前元素属性剔除出去，我们用`Vue`的时候也是看不到这种指令的，不剔除也不影响\n\n至于`Watcher`是什么，看下面就知道了\n\n# Watcher \n\n```js\nclass Watcher{\n    constructor(el,vm,value,type){\n        this.el = el;\n        this.vm = vm;\n        this.value = value;\n        this.type = type;\n        this.update()\n    }\n    update(){\n        this.el[this.type] = this.vm.data[this.value]\n    }\n}\n```\n\n之前发布订阅之后走了这里面的操作，意思就是把当前元素如：node.innerHTML = '这是data里面的值'、node.value = '这个是表单的数据'\n\n那么我们为什么不直接去更新呢，还需要`update`做什么，不是多此一举吗？\n其实`update`记得吗？我们在订阅池里面需要批量更新，就是通过调用`Watcher`原型上的`update`方法。\n\n\n# 效果\n\n[在线效果地址](http://www.wclimb.site/myVue)，大家可以浏览器看一下效果，由于本人太懒了，`gif`效果图就先不放了，哈哈😄😄\n\n# 完整代码\n\n完整代码已经放到`github`上了 -> [MyVue](https://github.com/wclimb/MyVue)\n\n# 参考\n\n[剖析Vue原理&实现双向绑定MVVM](https://segmentfault.com/a/1190000006599500)\n[仿Vue实现极简双向绑定](https://segmentfault.com/a/1190000015375217)\n\n# QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)","source":"_posts/JavaScript之实现一个简单的Vue.md","raw":"---\ntitle: JavaScript之实现一个简单的Vue\ndate: 2018-09-11 17:48:22\ntags:\n- javascript\n- 原创\ncategories: [javascript,vue]\n---\n\n\nvue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vue\n\n# Object.defineProperty()\n\n实现之前我们得先看一下[Object.defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)的实现，因为vue主要是通过数据劫持来实现的，通过`get`、`set`来完成数据的读取和更新。\n\n```js\nvar obj = {name:'wclimb'}\nvar age = 24\nObject.defineProperty(obj,'age',{\n\tenumerable: true, // 可枚举\n    configurable: false, // 不能再define\n    get () {\n        return age\n    },\n    set (newVal) {\n        console.log('我改变了',age +' -> '+newVal);\n        age = newVal\n    }\n})\n\n> obj.age\n> 24\n\n> obj.age = 25;\n> 我改变了 24 -> 25\n> 25\n```\n从上面可以看到通过`get`获取数据，通过`set`监听到数据变化执行相应操作，还是不明白的话可以去看看[Object.defineProperty](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)文档。\n<!-- more -->\n# 流程图\n\n![](http://www.wclimb.site/img/vue.png)\n\n# html代码结构\n\n```\n<div id=\"wrap\">\n    <p v-html=\"test\"></p>\n    <input type=\"text\" v-model=\"form\">\n    <input type=\"text\" v-model=\"form\">\n    <button @click=\"changeValue\">改变值</button>\n    {{form}}\n</div>\n```\n\n# js调用\n\n```js\n    new Vue({\n        el: '#wrap',\n        data:{\n            form: '这是form的值',\n            test: '<strong>我是粗体</strong>',\n        },\n        methods:{\n            changeValue(){\n                console.log(this.form)\n                this.form = '值被我改变了，气不气？'\n            }\n        }\n    })\n```\n\n# Vue结构\n\n```js\n    class Vue{\n        constructor(){}\n        proxyData(){}\n        observer(){}\n        compile(){}\n        compileText(){}\n    }\n    class Watcher{\n        constructor(){}\n        update(){}\n    }\n```\n- `Vue constructor` 构造函数主要是数据的初始化\n- `proxyData` 数据代理\n- `observer` 劫持监听所有数据\n- `compile` 解析dom\n- `compileText` 解析`dom`里处理纯双花括号的操作\n- `Watcher` 更新视图操作\n\n# Vue constructor 初始化\n\n```js\n    class Vue{\n        constructor(options = {}){\n            this.$el = document.querySelector(options.el);\n            let data = this.data = options.data; \n            // 代理data，使其能直接this.xxx的方式访问data，正常的话需要this.data.xxx\n            Object.keys(data).forEach((key)=> {\n                this.proxyData(key);\n            });\n            this.methods = options.methods // 事件方法\n            this.watcherTask = {}; // 需要监听的任务列表\n            this.observer(data); // 初始化劫持监听所有数据\n            this.compile(this.$el); // 解析dom\n        }\n    }\n```\n上面主要是初始化操作，针对传过来的数据进行处理\n\n# proxyData 代理data\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            let that = this;\n            Object.defineProperty(that, key, {\n                configurable: false,\n                enumerable: true,\n                get () {\n                    return that.data[key];\n                },\n                set (newVal) {\n                    that.data[key] = newVal;\n                }\n            });\n        }\n    }\n\n```\n上面主要是代理`data`到最上层，`this.xxx`的方式直接访问`data`\n\n# observer 劫持监听\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            ......\n        }\n        observer(data){\n            let that = this\n            Object.keys(data).forEach(key=>{\n                let value = data[key]\n                this.watcherTask[key] = []\n                Object.defineProperty(data,key,{\n                    configurable: false,\n                    enumerable: true,\n                    get(){\n                        return value\n                    },\n                    set(newValue){\n                        if(newValue !== value){\n                            value = newValue\n                            that.watcherTask[key].forEach(task => {\n                                task.update()\n                            })\n                        }\n                    }\n                })\n            })\n        }\n    }\n```\n同样是使用`Object.defineProperty`来监听数据，初始化需要订阅的数据。\n把需要订阅的数据到`push`到`watcherTask`里，等到时候需要更新的时候就可以批量更新数据了。👇下面就是；\n遍历订阅池，批量更新视图。\n```js\n    set(newValue){\n        if(newValue !== value){\n            value = newValue\n            // 批量更新视图\n            that.watcherTask[key].forEach(task => {\n                task.update()\n            })\n        }\n    }              \n```\n\n# compile 解析dom\n\n```js\nclass Vue{\n        constructor(options = {}){\n            ......\n        }\n        proxyData(key){\n            ......\n        }\n        observer(data){\n            ......\n        }\n        compile(el){\n            var nodes = el.childNodes;\n            for (let i = 0; i < nodes.length; i++) {\n                const node = nodes[i];\n                if(node.nodeType === 3){\n                    var text = node.textContent.trim();\n                    if (!text) continue;\n                    this.compileText(node,'textContent')                \n                }else if(node.nodeType === 1){\n                    if(node.childNodes.length > 0){\n                        this.compile(node)\n                    }\n                    if(node.hasAttribute('v-model') && (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA')){\n                        node.addEventListener('input',(()=>{\n                            let attrVal = node.getAttribute('v-model')\n                            this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'value'))\n                            node.removeAttribute('v-model')\n                            return () => {\n                                this.data[attrVal] = node.value\n                            }\n                        })())\n                    }\n                    if(node.hasAttribute('v-html')){\n                        let attrVal = node.getAttribute('v-html');\n                        this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'innerHTML'))\n                        node.removeAttribute('v-html')\n                    }\n                    this.compileText(node,'innerHTML')\n                    if(node.hasAttribute('@click')){\n                        let attrVal = node.getAttribute('@click')\n                        node.removeAttribute('@click')\n                        node.addEventListener('click',e => {\n                            this.methods[attrVal] && this.methods[attrVal].bind(this)()\n                        })\n                    }\n                }\n            }\n        },\n        compileText(node,type){\n            let reg = /\\{\\{(.*?)\\}\\}/g, txt = node.textContent;\n            if(reg.test(txt)){\n                node.textContent = txt.replace(reg,(matched,value)=>{\n                    let tpl = this.watcherTask[value] || []\n                    tpl.push(new Watcher(node,this,value,type))\n                    if(value.split('.').length > 1){\n                        let v = null\n                        value.split('.').forEach((val,i)=>{\n                            v = !v ? this[val] : v[val]\n                        })\n                        return v\n                    }else{\n                        return this[value]\n                    }\n                })\n            }\n        }\n    }\n```\n这里代码比较多，我们拆分看你就会觉得很简单了\n\n1. 首先我们先遍历`el`元素下面的所有子节点，`node.nodeType === 3` 的意思是当前元素是文本节点，`node.nodeType === 1` 的意思是当前元素是元素节点。因为可能有的是纯文本的形式，如`纯双花括号`就是纯文本的文本节点，然后通过判断元素节点是否还存在子节点，如果有的话就递归调用`compile`方法。下面重头戏来了，我们拆开看：\n```js\nif(node.hasAttribute('v-html')){\n    let attrVal = node.getAttribute('v-html');\n    this.watcherTask[attrVal].push(new Watcher(node,this,attrVal,'innerHTML'))\n    node.removeAttribute('v-html')\n}\n```\n上面这个首先判断node节点上是否有`v-html`这种指令，如果存在的话，我们就发布订阅，怎么发布订阅呢？只需要把当前需要订阅的数据`push`到`watcherTask`里面，然后到时候在设置值的时候就可以批量更新了，实现双向数据绑定，也就是下面的操作\n```js\nthat.watcherTask[key].forEach(task => {\n    task.update()\n})\n```\n然后`push`的值是一个`Watcher`的实例，首先他new的时候会先执行一次，执行的操作就是去把`纯双花括号` -> 1，也就是说把我们写好的模板数据更新到模板视图上。\n最后把当前元素属性剔除出去，我们用`Vue`的时候也是看不到这种指令的，不剔除也不影响\n\n至于`Watcher`是什么，看下面就知道了\n\n# Watcher \n\n```js\nclass Watcher{\n    constructor(el,vm,value,type){\n        this.el = el;\n        this.vm = vm;\n        this.value = value;\n        this.type = type;\n        this.update()\n    }\n    update(){\n        this.el[this.type] = this.vm.data[this.value]\n    }\n}\n```\n\n之前发布订阅之后走了这里面的操作，意思就是把当前元素如：node.innerHTML = '这是data里面的值'、node.value = '这个是表单的数据'\n\n那么我们为什么不直接去更新呢，还需要`update`做什么，不是多此一举吗？\n其实`update`记得吗？我们在订阅池里面需要批量更新，就是通过调用`Watcher`原型上的`update`方法。\n\n\n# 效果\n\n[在线效果地址](http://www.wclimb.site/myVue)，大家可以浏览器看一下效果，由于本人太懒了，`gif`效果图就先不放了，哈哈😄😄\n\n# 完整代码\n\n完整代码已经放到`github`上了 -> [MyVue](https://github.com/wclimb/MyVue)\n\n# 参考\n\n[剖析Vue原理&实现双向绑定MVVM](https://segmentfault.com/a/1190000006599500)\n[仿Vue实现极简双向绑定](https://segmentfault.com/a/1190000015375217)\n\n# QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)","slug":"JavaScript之实现一个简单的Vue","published":1,"updated":"2019-06-06T01:06:26.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns90000e59x3i3b6uiom","content":"<p>vue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vue</p>\n<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h1><p>实现之前我们得先看一下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a>的实现，因为vue主要是通过数据劫持来实现的，通过<code>get</code>、<code>set</code>来完成数据的读取和更新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'wclimb'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tenumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">    configurable: <span class=\"literal\">false</span>, <span class=\"comment\">// 不能再define</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> (newVal) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'我改变了'</span>,age +<span class=\"string\">' -&gt; '</span>+newVal);</span><br><span class=\"line\">        age = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; obj.age</span><br><span class=\"line\">&gt; <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; obj.age = <span class=\"number\">25</span>;</span><br><span class=\"line\">&gt; 我改变了 <span class=\"number\">24</span> -&gt; <span class=\"number\">25</span></span><br><span class=\"line\">&gt; <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>从上面可以看到通过<code>get</code>获取数据，通过<code>set</code>监听到数据变化执行相应操作，还是不明白的话可以去看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a>文档。<br><a id=\"more\"></a></p>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"http://www.wclimb.site/img/vue.png\" alt></p>\n<h1 id=\"html代码结构\"><a href=\"#html代码结构\" class=\"headerlink\" title=\"html代码结构\"></a>html代码结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;p v-html=&quot;test&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeValue&quot;&gt;改变值&lt;/button&gt;</span><br><span class=\"line\">    &#123;&#123;form&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"js调用\"><a href=\"#js调用\" class=\"headerlink\" title=\"js调用\"></a>js调用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#wrap'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        form: <span class=\"string\">'这是form的值'</span>,</span><br><span class=\"line\">        test: <span class=\"string\">'&lt;strong&gt;我是粗体&lt;/strong&gt;'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        changeValue()&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.form)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form = <span class=\"string\">'值被我改变了，气不气？'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Vue结构\"><a href=\"#Vue结构\" class=\"headerlink\" title=\"Vue结构\"></a>Vue结构</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    proxyData()&#123;&#125;</span><br><span class=\"line\">    observer()&#123;&#125;</span><br><span class=\"line\">    compile()&#123;&#125;</span><br><span class=\"line\">    compileText()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    update()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Vue constructor</code> 构造函数主要是数据的初始化</li>\n<li><code>proxyData</code> 数据代理</li>\n<li><code>observer</code> 劫持监听所有数据</li>\n<li><code>compile</code> 解析dom</li>\n<li><code>compileText</code> 解析<code>dom</code>里处理纯双花括号的操作</li>\n<li><code>Watcher</code> 更新视图操作</li>\n</ul>\n<h1 id=\"Vue-constructor-初始化\"><a href=\"#Vue-constructor-初始化\" class=\"headerlink\" title=\"Vue constructor 初始化\"></a>Vue constructor 初始化</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$el = <span class=\"built_in\">document</span>.querySelector(options.el);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"keyword\">this</span>.data = options.data; </span><br><span class=\"line\">        <span class=\"comment\">// 代理data，使其能直接this.xxx的方式访问data，正常的话需要this.data.xxx</span></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.proxyData(key);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.methods = options.methods <span class=\"comment\">// 事件方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.watcherTask = &#123;&#125;; <span class=\"comment\">// 需要监听的任务列表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observer(data); <span class=\"comment\">// 初始化劫持监听所有数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.compile(<span class=\"keyword\">this</span>.$el); <span class=\"comment\">// 解析dom</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面主要是初始化操作，针对传过来的数据进行处理</p>\n<h1 id=\"proxyData-代理data\"><a href=\"#proxyData-代理data\" class=\"headerlink\" title=\"proxyData 代理data\"></a>proxyData 代理data</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(that, key, &#123;</span><br><span class=\"line\">                configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> that.data[key];</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">set</span> (newVal) &#123;</span><br><span class=\"line\">                    that.data[key] = newVal;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面主要是代理<code>data</code>到最上层，<code>this.xxx</code>的方式直接访问<code>data</code></p>\n<h1 id=\"observer-劫持监听\"><a href=\"#observer-劫持监听\" class=\"headerlink\" title=\"observer 劫持监听\"></a>observer 劫持监听</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer(data)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.watcherTask[key] = []</span><br><span class=\"line\">                <span class=\"built_in\">Object</span>.defineProperty(data,key,&#123;</span><br><span class=\"line\">                    configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(newValue !== value)&#123;</span><br><span class=\"line\">                            value = newValue</span><br><span class=\"line\">                            that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                task.update()</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>同样是使用<code>Object.defineProperty</code>来监听数据，初始化需要订阅的数据。<br>把需要订阅的数据到<code>push</code>到<code>watcherTask</code>里，等到时候需要更新的时候就可以批量更新数据了。👇下面就是；<br>遍历订阅池，批量更新视图。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(newValue !== value)&#123;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        <span class=\"comment\">// 批量更新视图</span></span><br><span class=\"line\">        that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">            task.update()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"compile-解析dom\"><a href=\"#compile-解析dom\" class=\"headerlink\" title=\"compile 解析dom\"></a>compile 解析dom</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer(data)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        compile(el)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> nodes = el.childNodes;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> node = nodes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> text = node.textContent.trim();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.compileText(node,<span class=\"string\">'textContent'</span>)                </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.childNodes.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.compile(node)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-model'</span>) &amp;&amp; (node.tagName === <span class=\"string\">'INPUT'</span> || node.tagName === <span class=\"string\">'TEXTAREA'</span>))&#123;</span><br><span class=\"line\">                        node.addEventListener(<span class=\"string\">'input'</span>,(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-model'</span>)</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'value'</span>))</span><br><span class=\"line\">                            node.removeAttribute(<span class=\"string\">'v-model'</span>)</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.data[attrVal] = node.value</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)())</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-html'</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-html'</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'innerHTML'</span>))</span><br><span class=\"line\">                        node.removeAttribute(<span class=\"string\">'v-html'</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.compileText(node,<span class=\"string\">'innerHTML'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'@click'</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'@click'</span>)</span><br><span class=\"line\">                        node.removeAttribute(<span class=\"string\">'@click'</span>)</span><br><span class=\"line\">                        node.addEventListener(<span class=\"string\">'click'</span>,e =&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.methods[attrVal] &amp;&amp; <span class=\"keyword\">this</span>.methods[attrVal].bind(<span class=\"keyword\">this</span>)()</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        compileText(node,type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*?)\\&#125;\\&#125;/g</span>, txt = node.textContent;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reg.test(txt))&#123;</span><br><span class=\"line\">                node.textContent = txt.replace(reg,(matched,value)=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> tpl = <span class=\"keyword\">this</span>.watcherTask[value] || []</span><br><span class=\"line\">                    tpl.push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,value,type))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value.split(<span class=\"string\">'.'</span>).length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> v = <span class=\"literal\">null</span></span><br><span class=\"line\">                        value.split(<span class=\"string\">'.'</span>).forEach(<span class=\"function\">(<span class=\"params\">val,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                            v = !v ? <span class=\"keyword\">this</span>[val] : v[val]</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> v</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[value]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里代码比较多，我们拆分看你就会觉得很简单了</p>\n<ol>\n<li>首先我们先遍历<code>el</code>元素下面的所有子节点，<code>node.nodeType === 3</code> 的意思是当前元素是文本节点，<code>node.nodeType === 1</code> 的意思是当前元素是元素节点。因为可能有的是纯文本的形式，如<code>纯双花括号</code>就是纯文本的文本节点，然后通过判断元素节点是否还存在子节点，如果有的话就递归调用<code>compile</code>方法。下面重头戏来了，我们拆开看：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-html'</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-html'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'innerHTML'</span>))</span><br><span class=\"line\">    node.removeAttribute(<span class=\"string\">'v-html'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这个首先判断node节点上是否有<code>v-html</code>这种指令，如果存在的话，我们就发布订阅，怎么发布订阅呢？只需要把当前需要订阅的数据<code>push</code>到<code>watcherTask</code>里面，然后到时候在设置值的时候就可以批量更新了，实现双向数据绑定，也就是下面的操作<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task.update()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>然后<code>push</code>的值是一个<code>Watcher</code>的实例，首先他new的时候会先执行一次，执行的操作就是去把<code>纯双花括号</code> -&gt; 1，也就是说把我们写好的模板数据更新到模板视图上。<br>最后把当前元素属性剔除出去，我们用<code>Vue</code>的时候也是看不到这种指令的，不剔除也不影响</p>\n<p>至于<code>Watcher</code>是什么，看下面就知道了</p>\n<h1 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(el,vm,value,type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.el = el;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.el[<span class=\"keyword\">this</span>.type] = <span class=\"keyword\">this</span>.vm.data[<span class=\"keyword\">this</span>.value]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前发布订阅之后走了这里面的操作，意思就是把当前元素如：node.innerHTML = ‘这是data里面的值’、node.value = ‘这个是表单的数据’</p>\n<p>那么我们为什么不直接去更新呢，还需要<code>update</code>做什么，不是多此一举吗？<br>其实<code>update</code>记得吗？我们在订阅池里面需要批量更新，就是通过调用<code>Watcher</code>原型上的<code>update</code>方法。</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p><a href=\"http://www.wclimb.site/myVue\">在线效果地址</a>，大家可以浏览器看一下效果，由于本人太懒了，<code>gif</code>效果图就先不放了，哈哈😄😄</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><p>完整代码已经放到<code>github</code>上了 -&gt; <a href=\"https://github.com/wclimb/MyVue\" target=\"_blank\" rel=\"noopener\">MyVue</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://segmentfault.com/a/1190000006599500\" target=\"_blank\" rel=\"noopener\">剖析Vue原理&amp;实现双向绑定MVVM</a><br><a href=\"https://segmentfault.com/a/1190000015375217\" target=\"_blank\" rel=\"noopener\">仿Vue实现极简双向绑定</a></p>\n<h1 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n","site":{"data":{}},"excerpt":"<p>vue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vue</p>\n<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h1><p>实现之前我们得先看一下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a>的实现，因为vue主要是通过数据劫持来实现的，通过<code>get</code>、<code>set</code>来完成数据的读取和更新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'wclimb'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tenumerable: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">    configurable: <span class=\"literal\">false</span>, <span class=\"comment\">// 不能再define</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> (newVal) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'我改变了'</span>,age +<span class=\"string\">' -&gt; '</span>+newVal);</span><br><span class=\"line\">        age = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; obj.age</span><br><span class=\"line\">&gt; <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; obj.age = <span class=\"number\">25</span>;</span><br><span class=\"line\">&gt; 我改变了 <span class=\"number\">24</span> -&gt; <span class=\"number\">25</span></span><br><span class=\"line\">&gt; <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>从上面可以看到通过<code>get</code>获取数据，通过<code>set</code>监听到数据变化执行相应操作，还是不明白的话可以去看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">Object.defineProperty</a>文档。<br>","more":"</p>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"http://www.wclimb.site/img/vue.png\" alt></p>\n<h1 id=\"html代码结构\"><a href=\"#html代码结构\" class=\"headerlink\" title=\"html代码结构\"></a>html代码结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;wrap&quot;&gt;</span><br><span class=\"line\">    &lt;p v-html=&quot;test&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;changeValue&quot;&gt;改变值&lt;/button&gt;</span><br><span class=\"line\">    &#123;&#123;form&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"js调用\"><a href=\"#js调用\" class=\"headerlink\" title=\"js调用\"></a>js调用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#wrap'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        form: <span class=\"string\">'这是form的值'</span>,</span><br><span class=\"line\">        test: <span class=\"string\">'&lt;strong&gt;我是粗体&lt;/strong&gt;'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        changeValue()&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.form)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form = <span class=\"string\">'值被我改变了，气不气？'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Vue结构\"><a href=\"#Vue结构\" class=\"headerlink\" title=\"Vue结构\"></a>Vue结构</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    proxyData()&#123;&#125;</span><br><span class=\"line\">    observer()&#123;&#125;</span><br><span class=\"line\">    compile()&#123;&#125;</span><br><span class=\"line\">    compileText()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    update()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Vue constructor</code> 构造函数主要是数据的初始化</li>\n<li><code>proxyData</code> 数据代理</li>\n<li><code>observer</code> 劫持监听所有数据</li>\n<li><code>compile</code> 解析dom</li>\n<li><code>compileText</code> 解析<code>dom</code>里处理纯双花括号的操作</li>\n<li><code>Watcher</code> 更新视图操作</li>\n</ul>\n<h1 id=\"Vue-constructor-初始化\"><a href=\"#Vue-constructor-初始化\" class=\"headerlink\" title=\"Vue constructor 初始化\"></a>Vue constructor 初始化</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$el = <span class=\"built_in\">document</span>.querySelector(options.el);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"keyword\">this</span>.data = options.data; </span><br><span class=\"line\">        <span class=\"comment\">// 代理data，使其能直接this.xxx的方式访问data，正常的话需要this.data.xxx</span></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.proxyData(key);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.methods = options.methods <span class=\"comment\">// 事件方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.watcherTask = &#123;&#125;; <span class=\"comment\">// 需要监听的任务列表</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observer(data); <span class=\"comment\">// 初始化劫持监听所有数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.compile(<span class=\"keyword\">this</span>.$el); <span class=\"comment\">// 解析dom</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面主要是初始化操作，针对传过来的数据进行处理</p>\n<h1 id=\"proxyData-代理data\"><a href=\"#proxyData-代理data\" class=\"headerlink\" title=\"proxyData 代理data\"></a>proxyData 代理data</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(that, key, &#123;</span><br><span class=\"line\">                configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> that.data[key];</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">set</span> (newVal) &#123;</span><br><span class=\"line\">                    that.data[key] = newVal;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面主要是代理<code>data</code>到最上层，<code>this.xxx</code>的方式直接访问<code>data</code></p>\n<h1 id=\"observer-劫持监听\"><a href=\"#observer-劫持监听\" class=\"headerlink\" title=\"observer 劫持监听\"></a>observer 劫持监听</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer(data)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> value = data[key]</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.watcherTask[key] = []</span><br><span class=\"line\">                <span class=\"built_in\">Object</span>.defineProperty(data,key,&#123;</span><br><span class=\"line\">                    configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(newValue !== value)&#123;</span><br><span class=\"line\">                            value = newValue</span><br><span class=\"line\">                            that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                task.update()</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>同样是使用<code>Object.defineProperty</code>来监听数据，初始化需要订阅的数据。<br>把需要订阅的数据到<code>push</code>到<code>watcherTask</code>里，等到时候需要更新的时候就可以批量更新数据了。👇下面就是；<br>遍历订阅池，批量更新视图。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(newValue !== value)&#123;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        <span class=\"comment\">// 批量更新视图</span></span><br><span class=\"line\">        that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">            task.update()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"compile-解析dom\"><a href=\"#compile-解析dom\" class=\"headerlink\" title=\"compile 解析dom\"></a>compile 解析dom</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(options = &#123;&#125;)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxyData(key)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer(data)&#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        compile(el)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> nodes = el.childNodes;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> node = nodes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> text = node.textContent.trim();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.compileText(node,<span class=\"string\">'textContent'</span>)                </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.childNodes.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.compile(node)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-model'</span>) &amp;&amp; (node.tagName === <span class=\"string\">'INPUT'</span> || node.tagName === <span class=\"string\">'TEXTAREA'</span>))&#123;</span><br><span class=\"line\">                        node.addEventListener(<span class=\"string\">'input'</span>,(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-model'</span>)</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'value'</span>))</span><br><span class=\"line\">                            node.removeAttribute(<span class=\"string\">'v-model'</span>)</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.data[attrVal] = node.value</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)())</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-html'</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-html'</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'innerHTML'</span>))</span><br><span class=\"line\">                        node.removeAttribute(<span class=\"string\">'v-html'</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.compileText(node,<span class=\"string\">'innerHTML'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'@click'</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'@click'</span>)</span><br><span class=\"line\">                        node.removeAttribute(<span class=\"string\">'@click'</span>)</span><br><span class=\"line\">                        node.addEventListener(<span class=\"string\">'click'</span>,e =&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.methods[attrVal] &amp;&amp; <span class=\"keyword\">this</span>.methods[attrVal].bind(<span class=\"keyword\">this</span>)()</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        compileText(node,type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*?)\\&#125;\\&#125;/g</span>, txt = node.textContent;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(reg.test(txt))&#123;</span><br><span class=\"line\">                node.textContent = txt.replace(reg,(matched,value)=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> tpl = <span class=\"keyword\">this</span>.watcherTask[value] || []</span><br><span class=\"line\">                    tpl.push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,value,type))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value.split(<span class=\"string\">'.'</span>).length &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> v = <span class=\"literal\">null</span></span><br><span class=\"line\">                        value.split(<span class=\"string\">'.'</span>).forEach(<span class=\"function\">(<span class=\"params\">val,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                            v = !v ? <span class=\"keyword\">this</span>[val] : v[val]</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> v</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[value]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里代码比较多，我们拆分看你就会觉得很简单了</p>\n<ol>\n<li>首先我们先遍历<code>el</code>元素下面的所有子节点，<code>node.nodeType === 3</code> 的意思是当前元素是文本节点，<code>node.nodeType === 1</code> 的意思是当前元素是元素节点。因为可能有的是纯文本的形式，如<code>纯双花括号</code>就是纯文本的文本节点，然后通过判断元素节点是否还存在子节点，如果有的话就递归调用<code>compile</code>方法。下面重头戏来了，我们拆开看：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(node.hasAttribute(<span class=\"string\">'v-html'</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> attrVal = node.getAttribute(<span class=\"string\">'v-html'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.watcherTask[attrVal].push(<span class=\"keyword\">new</span> Watcher(node,<span class=\"keyword\">this</span>,attrVal,<span class=\"string\">'innerHTML'</span>))</span><br><span class=\"line\">    node.removeAttribute(<span class=\"string\">'v-html'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这个首先判断node节点上是否有<code>v-html</code>这种指令，如果存在的话，我们就发布订阅，怎么发布订阅呢？只需要把当前需要订阅的数据<code>push</code>到<code>watcherTask</code>里面，然后到时候在设置值的时候就可以批量更新了，实现双向数据绑定，也就是下面的操作<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">that.watcherTask[key].forEach(<span class=\"function\"><span class=\"params\">task</span> =&gt;</span> &#123;</span><br><span class=\"line\">    task.update()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>然后<code>push</code>的值是一个<code>Watcher</code>的实例，首先他new的时候会先执行一次，执行的操作就是去把<code>纯双花括号</code> -&gt; 1，也就是说把我们写好的模板数据更新到模板视图上。<br>最后把当前元素属性剔除出去，我们用<code>Vue</code>的时候也是看不到这种指令的，不剔除也不影响</p>\n<p>至于<code>Watcher</code>是什么，看下面就知道了</p>\n<h1 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(el,vm,value,type)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.el = el;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.el[<span class=\"keyword\">this</span>.type] = <span class=\"keyword\">this</span>.vm.data[<span class=\"keyword\">this</span>.value]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前发布订阅之后走了这里面的操作，意思就是把当前元素如：node.innerHTML = ‘这是data里面的值’、node.value = ‘这个是表单的数据’</p>\n<p>那么我们为什么不直接去更新呢，还需要<code>update</code>做什么，不是多此一举吗？<br>其实<code>update</code>记得吗？我们在订阅池里面需要批量更新，就是通过调用<code>Watcher</code>原型上的<code>update</code>方法。</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p><a href=\"http://www.wclimb.site/myVue\">在线效果地址</a>，大家可以浏览器看一下效果，由于本人太懒了，<code>gif</code>效果图就先不放了，哈哈😄😄</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><p>完整代码已经放到<code>github</code>上了 -&gt; <a href=\"https://github.com/wclimb/MyVue\" target=\"_blank\" rel=\"noopener\">MyVue</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://segmentfault.com/a/1190000006599500\" target=\"_blank\" rel=\"noopener\">剖析Vue原理&amp;实现双向绑定MVVM</a><br><a href=\"https://segmentfault.com/a/1190000015375217\" target=\"_blank\" rel=\"noopener\">仿Vue实现极简双向绑定</a></p>\n<h1 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>"},{"title":"JavaScript之节流与防抖","date":"2018-06-12T09:13:49.000Z","_content":"\n# 背景\n\n我们在开发的过程中会经常使用如scroll、resize、touchmove等事件，如果正常绑定事件处理函数的话，有可能在很短的时间内多次连续触发事件，十分影响性能。\n因此针对这类事件要进行节流或者防抖处理\n\n# 节流\n\n节流的意思是，在规定的时间内只会触发一次函数，如我们设置函数`500ms`触发一次，之后你无论你触发了多少次函数，在这个时间内也只会有一次执行效果\n\n先来看一个例子\n\n<p data-height=\"373\" data-theme-id=\"0\" data-slug-hash=\"gKWLpO\" data-default-tab=\"html,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"gKWLpO\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/gKWLpO/\">gKWLpO</a> by wclimb (<a href=\"https://codepen.io/wclimb\">@wclimb</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n我们看到使用了节流的在`1000ms`内只触发了一次，而没有使用节流的则频繁触发了调用的函数\n\n接下来看看代码实现\nv1 第一次不触发，不传参实现\n```js\nfunction throttle(fn,interval){\n    var timer;\n    return function(){\n        if(timer){\n            return\n        }\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn()\n        }, interval || 1000);\n    }   \n}\n```\n效果是实现了，但是我在尝试在执行函数里`console.log(this)`，结果发现`this`指向的是`window`，而且还发现我们不能传递参数，下面就来改进一下\n<!-- more -->\nv2 第一次触发函数，接收参数\n```js\nfunction throttle(fn,interval){\n    var timer,\n        isFirst = true;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(isFirst){\n            fn.apply(that,args)\n            return isFirst = false\n        }\n        if(timer){\n            return\n        }\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn.apply(that,args)\n        }, interval || 1000);\n    }   \n}\n```\n\n# 防抖\n\n防抖的意思是无论你触发多少次函数，只会触发最后一次函数。最常用的就是在表单提交的时候，用户可能会一段时间内点击很多次，这个时候可以增加防抖处理，我们只需要最后一次触发的事件\n\n先来看一个例子\n\n<p data-height=\"424\" data-theme-id=\"0\" data-slug-hash=\"pKPeyv\" data-default-tab=\"js,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"pKPeyv\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/pKPeyv/\">pKPeyv</a> by wclimb (<a href=\"https://codepen.io/wclimb\">@wclimb</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n我们看到使用了防抖的方框，无论你在里面触发了多少次函数，都只会触发最后的那一次函数，而没有使用防抖的则频繁触发了调用的函数\n\nv1 第一次不触发函数\n\n```js\nfunction debounce(fn,interval){\n    var timer;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(timer){\n            clearTimeout(timer)\n            timer = null\n        }\n        timer = setTimeout(() => {\n            fn.apply(null,args)\n        }, interval || 1000);\n    }\n}\n```\n上面这段代码仍然可以正常执行，但是我们并没有指定他的`this`\n\nv2 第一次就触发函数\n```js\nfunction debounce(fn,interval){\n    var timer,\n        isFirst  = true,\n            can = false;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(timer){\n            clearTimeout(timer)\n            timer = null\n        }\n        if(isFirst){\n            fn.apply(that,args)\n            isFirst = false\n            setTimeout(() => {\n                can = true\n            }, interval || 1000);\n        }else if(can){\n            timer = setTimeout(() => {\n                fn.apply(null,args)\n            }, interval || 1000);\n        }\n    }\n}\n```\n\n如有雷同，纯属抄我（开玩笑）\n\n如有错误，还望指正，仅供参考\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n","source":"_posts/JavaScript之节流与防抖.md","raw":"---\ntitle: JavaScript之节流与防抖\ndate: 2018-06-12 17:13:49\ntags:\n- javascript\n- 原创\ncategories: [javascript]\n---\n\n# 背景\n\n我们在开发的过程中会经常使用如scroll、resize、touchmove等事件，如果正常绑定事件处理函数的话，有可能在很短的时间内多次连续触发事件，十分影响性能。\n因此针对这类事件要进行节流或者防抖处理\n\n# 节流\n\n节流的意思是，在规定的时间内只会触发一次函数，如我们设置函数`500ms`触发一次，之后你无论你触发了多少次函数，在这个时间内也只会有一次执行效果\n\n先来看一个例子\n\n<p data-height=\"373\" data-theme-id=\"0\" data-slug-hash=\"gKWLpO\" data-default-tab=\"html,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"gKWLpO\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/gKWLpO/\">gKWLpO</a> by wclimb (<a href=\"https://codepen.io/wclimb\">@wclimb</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n我们看到使用了节流的在`1000ms`内只触发了一次，而没有使用节流的则频繁触发了调用的函数\n\n接下来看看代码实现\nv1 第一次不触发，不传参实现\n```js\nfunction throttle(fn,interval){\n    var timer;\n    return function(){\n        if(timer){\n            return\n        }\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn()\n        }, interval || 1000);\n    }   \n}\n```\n效果是实现了，但是我在尝试在执行函数里`console.log(this)`，结果发现`this`指向的是`window`，而且还发现我们不能传递参数，下面就来改进一下\n<!-- more -->\nv2 第一次触发函数，接收参数\n```js\nfunction throttle(fn,interval){\n    var timer,\n        isFirst = true;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(isFirst){\n            fn.apply(that,args)\n            return isFirst = false\n        }\n        if(timer){\n            return\n        }\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn.apply(that,args)\n        }, interval || 1000);\n    }   \n}\n```\n\n# 防抖\n\n防抖的意思是无论你触发多少次函数，只会触发最后一次函数。最常用的就是在表单提交的时候，用户可能会一段时间内点击很多次，这个时候可以增加防抖处理，我们只需要最后一次触发的事件\n\n先来看一个例子\n\n<p data-height=\"424\" data-theme-id=\"0\" data-slug-hash=\"pKPeyv\" data-default-tab=\"js,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"pKPeyv\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/pKPeyv/\">pKPeyv</a> by wclimb (<a href=\"https://codepen.io/wclimb\">@wclimb</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n我们看到使用了防抖的方框，无论你在里面触发了多少次函数，都只会触发最后的那一次函数，而没有使用防抖的则频繁触发了调用的函数\n\nv1 第一次不触发函数\n\n```js\nfunction debounce(fn,interval){\n    var timer;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(timer){\n            clearTimeout(timer)\n            timer = null\n        }\n        timer = setTimeout(() => {\n            fn.apply(null,args)\n        }, interval || 1000);\n    }\n}\n```\n上面这段代码仍然可以正常执行，但是我们并没有指定他的`this`\n\nv2 第一次就触发函数\n```js\nfunction debounce(fn,interval){\n    var timer,\n        isFirst  = true,\n            can = false;\n    return function(){\n        var args = arguments,\n            that = this;\n        if(timer){\n            clearTimeout(timer)\n            timer = null\n        }\n        if(isFirst){\n            fn.apply(that,args)\n            isFirst = false\n            setTimeout(() => {\n                can = true\n            }, interval || 1000);\n        }else if(can){\n            timer = setTimeout(() => {\n                fn.apply(null,args)\n            }, interval || 1000);\n        }\n    }\n}\n```\n\n如有雷同，纯属抄我（开玩笑）\n\n如有错误，还望指正，仅供参考\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## QQ群\n\n有兴趣的同学可以加qq群: 725165362 [点击加入](http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)\n\n","slug":"JavaScript之节流与防抖","published":1,"updated":"2019-06-06T01:06:26.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns92000h59x3yitbmipw","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们在开发的过程中会经常使用如scroll、resize、touchmove等事件，如果正常绑定事件处理函数的话，有可能在很短的时间内多次连续触发事件，十分影响性能。<br>因此针对这类事件要进行节流或者防抖处理</p>\n<h1 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h1><p>节流的意思是，在规定的时间内只会触发一次函数，如我们设置函数<code>500ms</code>触发一次，之后你无论你触发了多少次函数，在这个时间内也只会有一次执行效果</p>\n<p>先来看一个例子</p>\n<p></p><p data-height=\"373\" data-theme-id=\"0\" data-slug-hash=\"gKWLpO\" data-default-tab=\"html,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"gKWLpO\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/gKWLpO/\" target=\"_blank\" rel=\"noopener\">gKWLpO</a> by wclimb (<a href=\"https://codepen.io/wclimb\" target=\"_blank\" rel=\"noopener\">@wclimb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>我们看到使用了节流的在<code>1000ms</code>内只触发了一次，而没有使用节流的则频繁触发了调用的函数</p>\n<p>接下来看看代码实现<br>v1 第一次不触发，不传参实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn()</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果是实现了，但是我在尝试在执行函数里<code>console.log(this)</code>，结果发现<code>this</code>指向的是<code>window</code>，而且还发现我们不能传递参数，下面就来改进一下<br><a id=\"more\"></a><br>v2 第一次触发函数，接收参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        isFirst = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h1><p>防抖的意思是无论你触发多少次函数，只会触发最后一次函数。最常用的就是在表单提交的时候，用户可能会一段时间内点击很多次，这个时候可以增加防抖处理，我们只需要最后一次触发的事件</p>\n<p>先来看一个例子</p>\n<p></p><p data-height=\"424\" data-theme-id=\"0\" data-slug-hash=\"pKPeyv\" data-default-tab=\"js,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"pKPeyv\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/pKPeyv/\" target=\"_blank\" rel=\"noopener\">pKPeyv</a> by wclimb (<a href=\"https://codepen.io/wclimb\" target=\"_blank\" rel=\"noopener\">@wclimb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>我们看到使用了防抖的方框，无论你在里面触发了多少次函数，都只会触发最后的那一次函数，而没有使用防抖的则频繁触发了调用的函数</p>\n<p>v1 第一次不触发函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>,args)</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码仍然可以正常执行，但是我们并没有指定他的<code>this</code></p>\n<p>v2 第一次就触发函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        isFirst  = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            can = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">            isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                can = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can)&#123;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"literal\">null</span>,args)</span><br><span class=\"line\">            &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如有雷同，纯属抄我（开玩笑）</p>\n<p>如有错误，还望指正，仅供参考</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h2><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们在开发的过程中会经常使用如scroll、resize、touchmove等事件，如果正常绑定事件处理函数的话，有可能在很短的时间内多次连续触发事件，十分影响性能。<br>因此针对这类事件要进行节流或者防抖处理</p>\n<h1 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h1><p>节流的意思是，在规定的时间内只会触发一次函数，如我们设置函数<code>500ms</code>触发一次，之后你无论你触发了多少次函数，在这个时间内也只会有一次执行效果</p>\n<p>先来看一个例子</p>\n<p></p><p data-height=\"373\" data-theme-id=\"0\" data-slug-hash=\"gKWLpO\" data-default-tab=\"html,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"gKWLpO\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/gKWLpO/\" target=\"_blank\" rel=\"noopener\">gKWLpO</a> by wclimb (<a href=\"https://codepen.io/wclimb\" target=\"_blank\" rel=\"noopener\">@wclimb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>我们看到使用了节流的在<code>1000ms</code>内只触发了一次，而没有使用节流的则频繁触发了调用的函数</p>\n<p>接下来看看代码实现<br>v1 第一次不触发，不传参实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn()</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果是实现了，但是我在尝试在执行函数里<code>console.log(this)</code>，结果发现<code>this</code>指向的是<code>window</code>，而且还发现我们不能传递参数，下面就来改进一下<br>","more":"<br>v2 第一次触发函数，接收参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        isFirst = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h1><p>防抖的意思是无论你触发多少次函数，只会触发最后一次函数。最常用的就是在表单提交的时候，用户可能会一段时间内点击很多次，这个时候可以增加防抖处理，我们只需要最后一次触发的事件</p>\n<p>先来看一个例子</p>\n<p></p><p data-height=\"424\" data-theme-id=\"0\" data-slug-hash=\"pKPeyv\" data-default-tab=\"js,result\" data-user=\"wclimb\" data-embed-version=\"2\" data-pen-title=\"pKPeyv\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wclimb/pen/pKPeyv/\" target=\"_blank\" rel=\"noopener\">pKPeyv</a> by wclimb (<a href=\"https://codepen.io/wclimb\" target=\"_blank\" rel=\"noopener\">@wclimb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>我们看到使用了防抖的方框，无论你在里面触发了多少次函数，都只会触发最后的那一次函数，而没有使用防抖的则频繁触发了调用的函数</p>\n<p>v1 第一次不触发函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>,args)</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码仍然可以正常执行，但是我们并没有指定他的<code>this</code></p>\n<p>v2 第一次就触发函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn,interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        isFirst  = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            can = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirst)&#123;</span><br><span class=\"line\">            fn.apply(that,args)</span><br><span class=\"line\">            isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                can = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(can)&#123;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"literal\">null</span>,args)</span><br><span class=\"line\">            &#125;, interval || <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如有雷同，纯属抄我（开玩笑）</p>\n<p>如有错误，还望指正，仅供参考</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"QQ群\"><a href=\"#QQ群\" class=\"headerlink\" title=\"QQ群\"></a>QQ群</h2><p>有兴趣的同学可以加qq群: 725165362 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59\" target=\"_blank\" rel=\"noopener\">点击加入</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"JavaScript之实现一个简单的promise","date":"2018-09-09T14:04:26.000Z","_content":"\n\n我们在开发过程中大多会用到`promise`，想必大家对`promise`的使用都很熟练了，今天我们就来实现一个简单的`promise`，实现的效果如有出入还往指正。\n\n\n## 整体结构\n\n我们先来梳理一下整体的结果，以便后续好操作\n\n```js\nclass MyPromise {\n    constructor(fn){\n        \n    }\n    resolve(){\n\n    }\n    then(){\n\n    }\n    reject(){\n\n    }\n    catch(){\n\n    }\n}\n```\n<!-- more -->\n## Promise理论知识\n\n> 摘抄至 http://es6.ruanyifeng.com/#docs/promise#Promise-all\n\n`Promise`对象有以下两个特点。\n\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n总结一下就是promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），还有就是状态的改变只能是pending -> fulfilled 或者 pending -> rejected，这些很重要\n\n## 实现构造函数\n\n现在我们开始实现构造函数\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    ...\n}\n```\n构造函数接收一个参数`fn`，且这个参数必须是一个函数，因为我们一般这样使用`new Promise((resolve,reject)=>{})`;\n然后初始化一下promise的状态，默认开始为pending，初始化value的值。\n`fn`接收两个参数，`resolve`、`reject`\n\n## resolve\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    ...\n}\n```\n当`resolve`执行，接收到一个值之后；状态就由 `pending` -> `fulfilled`；当前的值为接收的值\n\n## reject\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n}\n```\n当`reject`执行，接收到一个值之后；状态就由 `pending` -> `rejected`；当前的值为接收的值\n\n## then\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n    then(fulfilled,rejected){\n        if (typeof fulfilled !== 'function' && typeof rejected !== 'function' ) {\n            return this;\n        }\n        if (typeof fulfilled !== 'function' && this.state === 'fulfilled' ||\n            typeof rejected !== 'function' && this.state === 'rejected') {\n            return this;\n        }\n        return new MyPromise((resolve,reject)=>{\n            if(fulfilled && typeof fulfilled === 'function' && this.state === 'fulfilled'){\n                let result = fulfilled(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n            if(rejected && typeof rejected === 'function' && this.state === 'rejected'){\n                let result = rejected(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n        })\n    }\n}\n```\n`then`的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果部不是`return this`执行下一步操作。\n第二个判断的作用是，比如，现在状态从`pending` -> `rejected`;但是中间代码中有许多个`.then`的操作，我们需要跳过这些操作执行`.catch`的代码。如下面的代码，执行结果只会打印`1`\n```\nnew Promise((resolve,reject)=>{\n    reject(1)\n}).then(()=>{\n    console.log(2)\n}).then(()=>{\n    console.log(3)\n}).catch((e)=>{\n    console.log(e)\n})\n```\n我们继续，接下来看到的是返回了一个新的`promise`，真正`then`的实现的确都是返回一个`promise`实例。这里不多说\n\n下面有两个判断，作用是判断是`rejected`还是`fulfilled`,首先看`fulfilled`，如果是`fulfilled`的话，首先执行`fulfilled`函数，并把当前的`value`值传过去，也就是下面这步操作,`res`就是传过去的`value`值，并执行了`(res)=>{console.log(res)}`这段代码;执行完成之后我们得到了`result`；也就是`2`这个结果，下面就是判断当前结果是否是一个`promise`实例了，也就是下面注释了的情况，现在我们直接执行`resolve(result)`;\n```\nnew Promise((resolve,reject)=>{\n    resolve(1)\n}).then((res)=>{\n    console.log(res)\n    return 2\n    //return new Promise(resolve=>{})\n})\n```\n剩下的就不多说了，可以`debugger`看看执行结果\n\n## catch\n```js\nclass MyPromise {\n    ...\n    catch(rejected){\n        return this.then(null,rejected)\n    }\n}\n```\n\n## 完整代码\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n    then(fulfilled,rejected){\n        if (typeof fulfilled !== 'function' && typeof rejected !== 'function' ) {\n            return this;\n        }\n        if (typeof fulfilled !== 'function' && this.state === 'fulfilled' ||\n            typeof rejected !== 'function' && this.state === 'rejected') {\n            return this;\n        }\n        return new MyPromise((resolve,reject)=>{\n            if(fulfilled && typeof fulfilled === 'function' && this.state === 'fulfilled'){\n                let result = fulfilled(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n            if(rejected && typeof rejected === 'function' && this.state === 'rejected'){\n                let result = rejected(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n        })\n    }\n    catch(rejected){\n        return this.then(null,rejected)\n    }\n}\n```\n\n## 测试\n\n```js\nnew MyPromise((resolve,reject)=>{\n\tconsole.log(1);\n\t//reject(2)\n\tresolve(2)\n\tconsole.log(3)\n\tsetTimeout(()=>{console.log(4)},0)\n}).then(res=>{\n\tconsole.log(res)\n\treturn new MyPromise((resolve,reject)=>{\n\t\tresolve(5)\n\t}).then(res=>{\n\t\treturn res\n\t})\n}).then(res=>{\n\tconsole.log(res)\n}).catch(e=>{\n\tconsole.log('e',e)\n})\n执行结果：\n> 1\n> 3\n> 2\n> 5\n> 4\n```\n\n原生promise\n```js\nnew Promise((resolve,reject)=>{\n\tconsole.log(1);\n\t//reject(2)\n\tresolve(2)\n\tconsole.log(3)\n\tsetTimeout(()=>{console.log(4)},0)\n}).then(res=>{\n\tconsole.log(res)\n\treturn new Promise((resolve,reject)=>{\n\t\tresolve(5)\n\t}).then(res=>{\n\t\treturn res\n\t})\n}).then(res=>{\n\tconsole.log(res)\n}).catch(e=>{\n\tconsole.log('e',e)\n})\n执行结果：\n> 1\n> 3\n> 2\n> 5\n> 4\n```","source":"_posts/JavaScript之实现一个简单的promise.md","raw":"---\ntitle: JavaScript之实现一个简单的promise\ndate: 2018-09-09 22:04:26\ntags:\n- javascript\n- 原创\ncategories: [javascript,promise]\n---\n\n\n我们在开发过程中大多会用到`promise`，想必大家对`promise`的使用都很熟练了，今天我们就来实现一个简单的`promise`，实现的效果如有出入还往指正。\n\n\n## 整体结构\n\n我们先来梳理一下整体的结果，以便后续好操作\n\n```js\nclass MyPromise {\n    constructor(fn){\n        \n    }\n    resolve(){\n\n    }\n    then(){\n\n    }\n    reject(){\n\n    }\n    catch(){\n\n    }\n}\n```\n<!-- more -->\n## Promise理论知识\n\n> 摘抄至 http://es6.ruanyifeng.com/#docs/promise#Promise-all\n\n`Promise`对象有以下两个特点。\n\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n总结一下就是promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），还有就是状态的改变只能是pending -> fulfilled 或者 pending -> rejected，这些很重要\n\n## 实现构造函数\n\n现在我们开始实现构造函数\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    ...\n}\n```\n构造函数接收一个参数`fn`，且这个参数必须是一个函数，因为我们一般这样使用`new Promise((resolve,reject)=>{})`;\n然后初始化一下promise的状态，默认开始为pending，初始化value的值。\n`fn`接收两个参数，`resolve`、`reject`\n\n## resolve\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    ...\n}\n```\n当`resolve`执行，接收到一个值之后；状态就由 `pending` -> `fulfilled`；当前的值为接收的值\n\n## reject\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n}\n```\n当`reject`执行，接收到一个值之后；状态就由 `pending` -> `rejected`；当前的值为接收的值\n\n## then\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n    then(fulfilled,rejected){\n        if (typeof fulfilled !== 'function' && typeof rejected !== 'function' ) {\n            return this;\n        }\n        if (typeof fulfilled !== 'function' && this.state === 'fulfilled' ||\n            typeof rejected !== 'function' && this.state === 'rejected') {\n            return this;\n        }\n        return new MyPromise((resolve,reject)=>{\n            if(fulfilled && typeof fulfilled === 'function' && this.state === 'fulfilled'){\n                let result = fulfilled(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n            if(rejected && typeof rejected === 'function' && this.state === 'rejected'){\n                let result = rejected(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n        })\n    }\n}\n```\n`then`的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果部不是`return this`执行下一步操作。\n第二个判断的作用是，比如，现在状态从`pending` -> `rejected`;但是中间代码中有许多个`.then`的操作，我们需要跳过这些操作执行`.catch`的代码。如下面的代码，执行结果只会打印`1`\n```\nnew Promise((resolve,reject)=>{\n    reject(1)\n}).then(()=>{\n    console.log(2)\n}).then(()=>{\n    console.log(3)\n}).catch((e)=>{\n    console.log(e)\n})\n```\n我们继续，接下来看到的是返回了一个新的`promise`，真正`then`的实现的确都是返回一个`promise`实例。这里不多说\n\n下面有两个判断，作用是判断是`rejected`还是`fulfilled`,首先看`fulfilled`，如果是`fulfilled`的话，首先执行`fulfilled`函数，并把当前的`value`值传过去，也就是下面这步操作,`res`就是传过去的`value`值，并执行了`(res)=>{console.log(res)}`这段代码;执行完成之后我们得到了`result`；也就是`2`这个结果，下面就是判断当前结果是否是一个`promise`实例了，也就是下面注释了的情况，现在我们直接执行`resolve(result)`;\n```\nnew Promise((resolve,reject)=>{\n    resolve(1)\n}).then((res)=>{\n    console.log(res)\n    return 2\n    //return new Promise(resolve=>{})\n})\n```\n剩下的就不多说了，可以`debugger`看看执行结果\n\n## catch\n```js\nclass MyPromise {\n    ...\n    catch(rejected){\n        return this.then(null,rejected)\n    }\n}\n```\n\n## 完整代码\n\n```js\nclass MyPromise {\n    constructor(fn){\n        if(typeof fn !== 'function') {\n            throw new TypeError(`MyPromise fn ${fn} is not a function`)\n        }\n        this.state = 'pending';\n        this.value = void 0;\n        fn(this.resolve.bind(this),this.reject.bind(this))\n    }\n    resolve(value){\n        if(this.state !== 'pending') return;\n        this.state = 'fulfilled';\n        this.value = value\n    }\n    reject(reason){\n        if(this.state !== 'pending') return;\n        this.state = 'rejected';\n        this.value = reason\n    }\n    then(fulfilled,rejected){\n        if (typeof fulfilled !== 'function' && typeof rejected !== 'function' ) {\n            return this;\n        }\n        if (typeof fulfilled !== 'function' && this.state === 'fulfilled' ||\n            typeof rejected !== 'function' && this.state === 'rejected') {\n            return this;\n        }\n        return new MyPromise((resolve,reject)=>{\n            if(fulfilled && typeof fulfilled === 'function' && this.state === 'fulfilled'){\n                let result = fulfilled(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n            if(rejected && typeof rejected === 'function' && this.state === 'rejected'){\n                let result = rejected(this.value);\n                if(result && typeof result.then === 'function'){\n                    return result.then(resolve,reject)\n                }else{\n                    resolve(result)\n                }\n            }\n        })\n    }\n    catch(rejected){\n        return this.then(null,rejected)\n    }\n}\n```\n\n## 测试\n\n```js\nnew MyPromise((resolve,reject)=>{\n\tconsole.log(1);\n\t//reject(2)\n\tresolve(2)\n\tconsole.log(3)\n\tsetTimeout(()=>{console.log(4)},0)\n}).then(res=>{\n\tconsole.log(res)\n\treturn new MyPromise((resolve,reject)=>{\n\t\tresolve(5)\n\t}).then(res=>{\n\t\treturn res\n\t})\n}).then(res=>{\n\tconsole.log(res)\n}).catch(e=>{\n\tconsole.log('e',e)\n})\n执行结果：\n> 1\n> 3\n> 2\n> 5\n> 4\n```\n\n原生promise\n```js\nnew Promise((resolve,reject)=>{\n\tconsole.log(1);\n\t//reject(2)\n\tresolve(2)\n\tconsole.log(3)\n\tsetTimeout(()=>{console.log(4)},0)\n}).then(res=>{\n\tconsole.log(res)\n\treturn new Promise((resolve,reject)=>{\n\t\tresolve(5)\n\t}).then(res=>{\n\t\treturn res\n\t})\n}).then(res=>{\n\tconsole.log(res)\n}).catch(e=>{\n\tconsole.log('e',e)\n})\n执行结果：\n> 1\n> 3\n> 2\n> 5\n> 4\n```","slug":"JavaScript之实现一个简单的promise","published":1,"updated":"2019-06-06T01:06:26.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns93000i59x3tmmhmyyw","content":"<p>我们在开发过程中大多会用到<code>promise</code>，想必大家对<code>promise</code>的使用都很熟练了，今天我们就来实现一个简单的<code>promise</code>，实现的效果如有出入还往指正。</p>\n<h2 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h2><p>我们先来梳理一下整体的结果，以便后续好操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Promise理论知识\"><a href=\"#Promise理论知识\" class=\"headerlink\" title=\"Promise理论知识\"></a>Promise理论知识</h2><blockquote>\n<p>摘抄至 <a href=\"http://es6.ruanyifeng.com/#docs/promise#Promise-all\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise#Promise-all</a></p>\n</blockquote>\n<p><code>Promise</code>对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<p>总结一下就是promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），还有就是状态的改变只能是pending -&gt; fulfilled 或者 pending -&gt; rejected，这些很重要</p>\n<h2 id=\"实现构造函数\"><a href=\"#实现构造函数\" class=\"headerlink\" title=\"实现构造函数\"></a>实现构造函数</h2><p>现在我们开始实现构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数接收一个参数<code>fn</code>，且这个参数必须是一个函数，因为我们一般这样使用<code>new Promise((resolve,reject)=&gt;{})</code>;<br>然后初始化一下promise的状态，默认开始为pending，初始化value的值。<br><code>fn</code>接收两个参数，<code>resolve</code>、<code>reject</code></p>\n<h2 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>resolve</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>fulfilled</code>；当前的值为接收的值</p>\n<h2 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"reject\"></a>reject</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>reject</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>rejected</code>；当前的值为接收的值</p>\n<h2 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(fulfilled,rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fulfilled &amp;&amp; <span class=\"keyword\">typeof</span> fulfilled === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = fulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rejected &amp;&amp; <span class=\"keyword\">typeof</span> rejected === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = rejected(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>then</code>的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果部不是<code>return this</code>执行下一步操作。<br>第二个判断的作用是，比如，现在状态从<code>pending</code> -&gt; <code>rejected</code>;但是中间代码中有许多个<code>.then</code>的操作，我们需要跳过这些操作执行<code>.catch</code>的代码。如下面的代码，执行结果只会打印<code>1</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    reject(1)</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(3)</span><br><span class=\"line\">&#125;).catch((e)=&gt;&#123;</span><br><span class=\"line\">    console.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们继续，接下来看到的是返回了一个新的<code>promise</code>，真正<code>then</code>的实现的确都是返回一个<code>promise</code>实例。这里不多说</p>\n<p>下面有两个判断，作用是判断是<code>rejected</code>还是<code>fulfilled</code>,首先看<code>fulfilled</code>，如果是<code>fulfilled</code>的话，首先执行<code>fulfilled</code>函数，并把当前的<code>value</code>值传过去，也就是下面这步操作,<code>res</code>就是传过去的<code>value</code>值，并执行了<code>(res)=&gt;{console.log(res)}</code>这段代码;执行完成之后我们得到了<code>result</code>；也就是<code>2</code>这个结果，下面就是判断当前结果是否是一个<code>promise</code>实例了，也就是下面注释了的情况，现在我们直接执行<code>resolve(result)</code>;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    resolve(1)</span><br><span class=\"line\">&#125;).then((res)=&gt;&#123;</span><br><span class=\"line\">    console.log(res)</span><br><span class=\"line\">    return 2</span><br><span class=\"line\">    //return new Promise(resolve=&gt;&#123;&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>剩下的就不多说了，可以<code>debugger</code>看看执行结果</p>\n<h2 id=\"catch\"><a href=\"#catch\" class=\"headerlink\" title=\"catch\"></a>catch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,rejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(fulfilled,rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fulfilled &amp;&amp; <span class=\"keyword\">typeof</span> fulfilled === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = fulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rejected &amp;&amp; <span class=\"keyword\">typeof</span> rejected === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = rejected(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,rejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//reject(2)</span></span><br><span class=\"line\">\tresolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'e'</span>,e)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\">&gt; <span class=\"number\">1</span></span><br><span class=\"line\">&gt; <span class=\"number\">3</span></span><br><span class=\"line\">&gt; <span class=\"number\">2</span></span><br><span class=\"line\">&gt; <span class=\"number\">5</span></span><br><span class=\"line\">&gt; <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>原生promise<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//reject(2)</span></span><br><span class=\"line\">\tresolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'e'</span>,e)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\">&gt; <span class=\"number\">1</span></span><br><span class=\"line\">&gt; <span class=\"number\">3</span></span><br><span class=\"line\">&gt; <span class=\"number\">2</span></span><br><span class=\"line\">&gt; <span class=\"number\">5</span></span><br><span class=\"line\">&gt; <span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>我们在开发过程中大多会用到<code>promise</code>，想必大家对<code>promise</code>的使用都很熟练了，今天我们就来实现一个简单的<code>promise</code>，实现的效果如有出入还往指正。</p>\n<h2 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h2><p>我们先来梳理一下整体的结果，以便后续好操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Promise理论知识\"><a href=\"#Promise理论知识\" class=\"headerlink\" title=\"Promise理论知识\"></a>Promise理论知识</h2><blockquote>\n<p>摘抄至 <a href=\"http://es6.ruanyifeng.com/#docs/promise#Promise-all\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise#Promise-all</a></p>\n</blockquote>\n<p><code>Promise</code>对象有以下两个特点。</p>\n<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<p>总结一下就是promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），还有就是状态的改变只能是pending -&gt; fulfilled 或者 pending -&gt; rejected，这些很重要</p>\n<h2 id=\"实现构造函数\"><a href=\"#实现构造函数\" class=\"headerlink\" title=\"实现构造函数\"></a>实现构造函数</h2><p>现在我们开始实现构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数接收一个参数<code>fn</code>，且这个参数必须是一个函数，因为我们一般这样使用<code>new Promise((resolve,reject)=&gt;{})</code>;<br>然后初始化一下promise的状态，默认开始为pending，初始化value的值。<br><code>fn</code>接收两个参数，<code>resolve</code>、<code>reject</code></p>\n<h2 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>resolve</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>fulfilled</code>；当前的值为接收的值</p>\n<h2 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"reject\"></a>reject</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>reject</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>rejected</code>；当前的值为接收的值</p>\n<h2 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(fulfilled,rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fulfilled &amp;&amp; <span class=\"keyword\">typeof</span> fulfilled === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = fulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rejected &amp;&amp; <span class=\"keyword\">typeof</span> rejected === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = rejected(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>then</code>的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果部不是<code>return this</code>执行下一步操作。<br>第二个判断的作用是，比如，现在状态从<code>pending</code> -&gt; <code>rejected</code>;但是中间代码中有许多个<code>.then</code>的操作，我们需要跳过这些操作执行<code>.catch</code>的代码。如下面的代码，执行结果只会打印<code>1</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    reject(1)</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;).then(()=&gt;&#123;</span><br><span class=\"line\">    console.log(3)</span><br><span class=\"line\">&#125;).catch((e)=&gt;&#123;</span><br><span class=\"line\">    console.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们继续，接下来看到的是返回了一个新的<code>promise</code>，真正<code>then</code>的实现的确都是返回一个<code>promise</code>实例。这里不多说</p>\n<p>下面有两个判断，作用是判断是<code>rejected</code>还是<code>fulfilled</code>,首先看<code>fulfilled</code>，如果是<code>fulfilled</code>的话，首先执行<code>fulfilled</code>函数，并把当前的<code>value</code>值传过去，也就是下面这步操作,<code>res</code>就是传过去的<code>value</code>值，并执行了<code>(res)=&gt;{console.log(res)}</code>这段代码;执行完成之后我们得到了<code>result</code>；也就是<code>2</code>这个结果，下面就是判断当前结果是否是一个<code>promise</code>实例了，也就是下面注释了的情况，现在我们直接执行<code>resolve(result)</code>;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    resolve(1)</span><br><span class=\"line\">&#125;).then((res)=&gt;&#123;</span><br><span class=\"line\">    console.log(res)</span><br><span class=\"line\">    return 2</span><br><span class=\"line\">    //return new Promise(resolve=&gt;&#123;&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>剩下的就不多说了，可以<code>debugger</code>看看执行结果</p>\n<h2 id=\"catch\"><a href=\"#catch\" class=\"headerlink\" title=\"catch\"></a>catch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,rejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(fn)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`MyPromise fn <span class=\"subst\">$&#123;fn&#125;</span> is not a function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        fn(<span class=\"keyword\">this</span>.resolve.bind(<span class=\"keyword\">this</span>),<span class=\"keyword\">this</span>.reject.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reject(reason)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(fulfilled,rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fulfilled !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> rejected !== <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fulfilled &amp;&amp; <span class=\"keyword\">typeof</span> fulfilled === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = fulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rejected &amp;&amp; <span class=\"keyword\">typeof</span> rejected === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = rejected(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result.then(resolve,reject)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(rejected)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,rejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//reject(2)</span></span><br><span class=\"line\">\tresolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'e'</span>,e)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\">&gt; <span class=\"number\">1</span></span><br><span class=\"line\">&gt; <span class=\"number\">3</span></span><br><span class=\"line\">&gt; <span class=\"number\">2</span></span><br><span class=\"line\">&gt; <span class=\"number\">5</span></span><br><span class=\"line\">&gt; <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>原生promise<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//reject(2)</span></span><br><span class=\"line\">\tresolve(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">\t&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'e'</span>,e)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\">&gt; <span class=\"number\">1</span></span><br><span class=\"line\">&gt; <span class=\"number\">3</span></span><br><span class=\"line\">&gt; <span class=\"number\">2</span></span><br><span class=\"line\">&gt; <span class=\"number\">5</span></span><br><span class=\"line\">&gt; <span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>"},{"title":"JavsScript之浅拷贝与深拷贝","date":"2018-07-29T08:04:57.000Z","_content":"在开发的过程中，我们往往需要复制一个数据，在复制基本数据类型的时候不会出现问题，如`string`、`number`、`null`等。\n但是我们复制一个引用类型的数据时，往往会出现问题，如`array`、`object`。\n\n\n## 浅拷贝\n\n看下面这段代码\n```js\nvar arr1 = [1,2,3];\nvar arr2 = arr1;\narr2.push(4)\n```\n我们打印一下看看`arr1` `arr2`的结果\n```js\narr1: [1, 2, 3, 4]\narr2: [1, 2, 3, 4]\n```\n我们发现，改变`arr2`的同时也改变了`arr1`，WTF？\n\n接下来我们看看对象\n```js\nvar obj1 = {\n        name:'wclimb'\n    };\nvar obj2 = obj1\nobj2.age = 24\n```\n<!-- more -->\n我们打印一下看看`arr1``arr2`的结果\n```js\nobj1: {name: \"wclimb\", age: 24}\nobj2: {name: \"wclimb\", age: 24}\n```\n和预想的一样，都被影响了。\nwhy?\n因为引用类型的复制，两个引用类型的指针都指向同一个堆内存\n\n网上偶尔会看到有人说`slice`、`concat`是深拷贝，其实这两个是浅复制，如下\n```js\nvar arr1 = [1,2,3];\nvar arr2 = arr1.slice();\narr2.push(4)\n```\n结果：\n```js\narr1 [1, 2, 3]\narr2 [1, 2, 3, 4]\n```\n数组元素只是基本数据类型不会有影响，那么我们看下面的\n```js\nvar arr1 = [1,2,3,[4]];\nvar arr2 = arr1.slice();\narr2[3].push(5)\n```\n结果\n```js\narr1: [1,2,3,[4,5]]   <-----  被影响了\narr2: [1,2,3,[4,5]]\n```\n即使使用了`slice`, 两个数组也相互影响了，类似方法除了`slice`、`concat`还有`Array.from`、`...`\n\n**深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的拷贝实体，而不是引用**\n\n## 深拷贝\n\n### Object.assign\n\nObject.assign可以进行一层的深度拷贝，也就是跟slice类型的效果\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n\t\ttest4: {}\n    };\nvar obj2 = Object.assign({}, obj1)\nobj2.age = 24\n\n结果：\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nobj2: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {},\n        age: 24\n    };\n```\n但是我们看下面的例子\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = Object.assign({}, obj1)\nobj2.age = 24\nobj2.test4.val = '1';\n\n结果： \n\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: 1}   <-----  被影响了\n    };\nobj2: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: 1},\n        age: 24\n    };\n```\n\n### JSON.parse(JSON.stringify(obj))\n\n说到深拷贝，你一定会想到`JSON.parse(JSON.stringify(obj))`;\n没错，这样可以完成一个深拷贝，看下面的例子：\n\n```js\nvar obj1 = {\n        name: 'wclimb'\n    };\nvar obj2 = JSON.parse(JSON.stringify(obj1))\nobj2.age = 24\n```\n结果\n```js\nobj1: {name: \"wclimb\"}   <-----  没有被影响了\nobj2: {name: \"wclimb\", age: 24}\n```\nperfect，但是这个方法会有一个问题，如下例：\n```js\nvar var obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = JSON.parse(JSON.stringify(obj1))\nobj2.age = 24\n```\n结果\n```js\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nobj2: {\n        name: \"wclimb\",\n        age: 24, \n        test1: null,\n        test4: {}\n    }\n```\nWTF，那两个个跑哪去了？所以这个方法不能够拷贝值为`undefined`、`function`\n\n### 深拷贝实现\n那么怎么进行深拷贝呢？我的方法是：\n```js\nfunction deepCopy(obj){\n    var result;\n    var toString = Object.prototype.toString\n    if(toString.call(obj) === '[object Array]'){\n        result = []\n        for(var i = 0 ;i < obj.length; i++){\n            result[i] = deepCopy(obj[i])\n        }\n    }else if(toString.call(obj) === '[object Object]'){\n        result = {};\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                result[key] = deepCopy(obj[key])\n            }\n        }\n    }else{\n        return obj\n    }\n    return result\n}\n\n\n测试一下：\n\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = deepCopy(obj1)\nobj2.age = 24\nobj2.test4.val = '1';\n\n返回： \n\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}   <-----  没有被影响了\n    };\nobj2: {\n        age: 24,\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: '1'}\n    };\n```\n\n### jQuery的实现\n\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = $.extend(true, {}, obj1)\nobj2.age = 24\n```\n### lodash的实现\n\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = _.cloneDeep(obj1)\nobj2.age = 24\n```\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/JavsScript之浅拷贝与深拷贝.md","raw":"---\ntitle: JavsScript之浅拷贝与深拷贝\ndate: 2018-07-29 16:04:57\ntags:\n- javascript\n- 原创\ncategories: [javascript]\n\n---\n在开发的过程中，我们往往需要复制一个数据，在复制基本数据类型的时候不会出现问题，如`string`、`number`、`null`等。\n但是我们复制一个引用类型的数据时，往往会出现问题，如`array`、`object`。\n\n\n## 浅拷贝\n\n看下面这段代码\n```js\nvar arr1 = [1,2,3];\nvar arr2 = arr1;\narr2.push(4)\n```\n我们打印一下看看`arr1` `arr2`的结果\n```js\narr1: [1, 2, 3, 4]\narr2: [1, 2, 3, 4]\n```\n我们发现，改变`arr2`的同时也改变了`arr1`，WTF？\n\n接下来我们看看对象\n```js\nvar obj1 = {\n        name:'wclimb'\n    };\nvar obj2 = obj1\nobj2.age = 24\n```\n<!-- more -->\n我们打印一下看看`arr1``arr2`的结果\n```js\nobj1: {name: \"wclimb\", age: 24}\nobj2: {name: \"wclimb\", age: 24}\n```\n和预想的一样，都被影响了。\nwhy?\n因为引用类型的复制，两个引用类型的指针都指向同一个堆内存\n\n网上偶尔会看到有人说`slice`、`concat`是深拷贝，其实这两个是浅复制，如下\n```js\nvar arr1 = [1,2,3];\nvar arr2 = arr1.slice();\narr2.push(4)\n```\n结果：\n```js\narr1 [1, 2, 3]\narr2 [1, 2, 3, 4]\n```\n数组元素只是基本数据类型不会有影响，那么我们看下面的\n```js\nvar arr1 = [1,2,3,[4]];\nvar arr2 = arr1.slice();\narr2[3].push(5)\n```\n结果\n```js\narr1: [1,2,3,[4,5]]   <-----  被影响了\narr2: [1,2,3,[4,5]]\n```\n即使使用了`slice`, 两个数组也相互影响了，类似方法除了`slice`、`concat`还有`Array.from`、`...`\n\n**深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的拷贝实体，而不是引用**\n\n## 深拷贝\n\n### Object.assign\n\nObject.assign可以进行一层的深度拷贝，也就是跟slice类型的效果\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n\t\ttest4: {}\n    };\nvar obj2 = Object.assign({}, obj1)\nobj2.age = 24\n\n结果：\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nobj2: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {},\n        age: 24\n    };\n```\n但是我们看下面的例子\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = Object.assign({}, obj1)\nobj2.age = 24\nobj2.test4.val = '1';\n\n结果： \n\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: 1}   <-----  被影响了\n    };\nobj2: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: 1},\n        age: 24\n    };\n```\n\n### JSON.parse(JSON.stringify(obj))\n\n说到深拷贝，你一定会想到`JSON.parse(JSON.stringify(obj))`;\n没错，这样可以完成一个深拷贝，看下面的例子：\n\n```js\nvar obj1 = {\n        name: 'wclimb'\n    };\nvar obj2 = JSON.parse(JSON.stringify(obj1))\nobj2.age = 24\n```\n结果\n```js\nobj1: {name: \"wclimb\"}   <-----  没有被影响了\nobj2: {name: \"wclimb\", age: 24}\n```\nperfect，但是这个方法会有一个问题，如下例：\n```js\nvar var obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = JSON.parse(JSON.stringify(obj1))\nobj2.age = 24\n```\n结果\n```js\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nobj2: {\n        name: \"wclimb\",\n        age: 24, \n        test1: null,\n        test4: {}\n    }\n```\nWTF，那两个个跑哪去了？所以这个方法不能够拷贝值为`undefined`、`function`\n\n### 深拷贝实现\n那么怎么进行深拷贝呢？我的方法是：\n```js\nfunction deepCopy(obj){\n    var result;\n    var toString = Object.prototype.toString\n    if(toString.call(obj) === '[object Array]'){\n        result = []\n        for(var i = 0 ;i < obj.length; i++){\n            result[i] = deepCopy(obj[i])\n        }\n    }else if(toString.call(obj) === '[object Object]'){\n        result = {};\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                result[key] = deepCopy(obj[key])\n            }\n        }\n    }else{\n        return obj\n    }\n    return result\n}\n\n\n测试一下：\n\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = deepCopy(obj1)\nobj2.age = 24\nobj2.test4.val = '1';\n\n返回： \n\nobj1: {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}   <-----  没有被影响了\n    };\nobj2: {\n        age: 24,\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {val: '1'}\n    };\n```\n\n### jQuery的实现\n\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = $.extend(true, {}, obj1)\nobj2.age = 24\n```\n### lodash的实现\n\n```js\nvar obj1 = {\n        name: 'wclimb',\n        test1: null,\n        test2: undefined,\n        test3: function(){alert(1)},\n        test4: {}\n    };\nvar obj2 = _.cloneDeep(obj1)\nobj2.age = 24\n```\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"JavsScript之浅拷贝与深拷贝","published":1,"updated":"2019-06-06T01:06:26.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns96000l59x33slcuu2e","content":"<p>在开发的过程中，我们往往需要复制一个数据，在复制基本数据类型的时候不会出现问题，如<code>string</code>、<code>number</code>、<code>null</code>等。<br>但是我们复制一个引用类型的数据时，往往会出现问题，如<code>array</code>、<code>object</code>。</p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>看下面这段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;</span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我们打印一下看看<code>arr1</code> <code>arr2</code>的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr2: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>我们发现，改变<code>arr2</code>的同时也改变了<code>arr1</code>，WTF？</p>\n<p>接下来我们看看对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'wclimb'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>我们打印一下看看<code>arr1`</code>arr2`的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br><span class=\"line\">obj2: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和预想的一样，都被影响了。<br>why?<br>因为引用类型的复制，两个引用类型的指针都指向同一个堆内存</p>\n<p>网上偶尔会看到有人说<code>slice</code>、<code>concat</code>是深拷贝，其实这两个是浅复制，如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.slice();</span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">arr2 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>数组元素只是基本数据类型不会有影响，那么我们看下面的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.slice();</span><br><span class=\"line\">arr2[<span class=\"number\">3</span>].push(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]   &lt;-----  被影响了</span><br><span class=\"line\">arr2: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br></pre></td></tr></table></figure></p>\n<p>即使使用了<code>slice</code>, 两个数组也相互影响了，类似方法除了<code>slice</code>、<code>concat</code>还有<code>Array.from</code>、<code>...</code></p>\n<p><strong>深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的拷贝实体，而不是引用</strong></p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign\"></a>Object.assign</h3><p>Object.assign可以进行一层的深度拷贝，也就是跟slice类型的效果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">\t\ttest4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>但是我们看下面的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\">obj2.test4.val = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">结果： </span><br><span class=\"line\"></span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"number\">1</span>&#125;   &lt;-----  被影响了</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSON-parse-JSON-stringify-obj\"><a href=\"#JSON-parse-JSON-stringify-obj\" class=\"headerlink\" title=\"JSON.parse(JSON.stringify(obj))\"></a>JSON.parse(JSON.stringify(obj))</h3><p>说到深拷贝，你一定会想到<code>JSON.parse(JSON.stringify(obj))</code>;<br>没错，这样可以完成一个深拷贝，看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>&#125;   &lt;-----  没有被影响了</span><br><span class=\"line\">obj2: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>perfect，但是这个方法会有一个问题，如下例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"wclimb\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">24</span>, </span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>WTF，那两个个跑哪去了？所以这个方法不能够拷贝值为<code>undefined</code>、<code>function</code></p>\n<h3 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h3><p>那么怎么进行深拷贝呢？我的方法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(toString.call(obj) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt; obj.length; i++)&#123;</span><br><span class=\"line\">            result[i] = deepCopy(obj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(toString.call(obj) === <span class=\"string\">'[object Object]'</span>)&#123;</span><br><span class=\"line\">        result = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                result[key] = deepCopy(obj[key])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">测试一下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = deepCopy(obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\">obj2.test4.val = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回： </span><br><span class=\"line\"></span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;   &lt;-----  没有被影响了</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">24</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"jQuery的实现\"><a href=\"#jQuery的实现\" class=\"headerlink\" title=\"jQuery的实现\"></a>jQuery的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"lodash的实现\"><a href=\"#lodash的实现\" class=\"headerlink\" title=\"lodash的实现\"></a>lodash的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>在开发的过程中，我们往往需要复制一个数据，在复制基本数据类型的时候不会出现问题，如<code>string</code>、<code>number</code>、<code>null</code>等。<br>但是我们复制一个引用类型的数据时，往往会出现问题，如<code>array</code>、<code>object</code>。</p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>看下面这段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1;</span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我们打印一下看看<code>arr1</code> <code>arr2</code>的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr2: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>我们发现，改变<code>arr2</code>的同时也改变了<code>arr1</code>，WTF？</p>\n<p>接下来我们看看对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'wclimb'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure></p>","more":"<p>我们打印一下看看<code>arr1`</code>arr2`的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br><span class=\"line\">obj2: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和预想的一样，都被影响了。<br>why?<br>因为引用类型的复制，两个引用类型的指针都指向同一个堆内存</p>\n<p>网上偶尔会看到有人说<code>slice</code>、<code>concat</code>是深拷贝，其实这两个是浅复制，如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.slice();</span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">arr2 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure></p>\n<p>数组元素只是基本数据类型不会有影响，那么我们看下面的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr1.slice();</span><br><span class=\"line\">arr2[<span class=\"number\">3</span>].push(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]   &lt;-----  被影响了</span><br><span class=\"line\">arr2: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br></pre></td></tr></table></figure></p>\n<p>即使使用了<code>slice</code>, 两个数组也相互影响了，类似方法除了<code>slice</code>、<code>concat</code>还有<code>Array.from</code>、<code>...</code></p>\n<p><strong>深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的拷贝实体，而不是引用</strong></p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign\"></a>Object.assign</h3><p>Object.assign可以进行一层的深度拷贝，也就是跟slice类型的效果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">\t\ttest4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>但是我们看下面的例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\">obj2.test4.val = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">结果： </span><br><span class=\"line\"></span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"number\">1</span>&#125;   &lt;-----  被影响了</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSON-parse-JSON-stringify-obj\"><a href=\"#JSON-parse-JSON-stringify-obj\" class=\"headerlink\" title=\"JSON.parse(JSON.stringify(obj))\"></a>JSON.parse(JSON.stringify(obj))</h3><p>说到深拷贝，你一定会想到<code>JSON.parse(JSON.stringify(obj))</code>;<br>没错，这样可以完成一个深拷贝，看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>&#125;   &lt;-----  没有被影响了</span><br><span class=\"line\">obj2: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"wclimb\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">24</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>perfect，但是这个方法会有一个问题，如下例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"wclimb\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">24</span>, </span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>WTF，那两个个跑哪去了？所以这个方法不能够拷贝值为<code>undefined</code>、<code>function</code></p>\n<h3 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h3><p>那么怎么进行深拷贝呢？我的方法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(toString.call(obj) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt; obj.length; i++)&#123;</span><br><span class=\"line\">            result[i] = deepCopy(obj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(toString.call(obj) === <span class=\"string\">'[object Object]'</span>)&#123;</span><br><span class=\"line\">        result = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                result[key] = deepCopy(obj[key])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">测试一下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = deepCopy(obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br><span class=\"line\">obj2.test4.val = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">返回： </span><br><span class=\"line\"></span><br><span class=\"line\">obj1: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;   &lt;-----  没有被影响了</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">obj2: &#123;</span><br><span class=\"line\">        age: <span class=\"number\">24</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;<span class=\"attr\">val</span>: <span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"jQuery的实现\"><a href=\"#jQuery的实现\" class=\"headerlink\" title=\"jQuery的实现\"></a>jQuery的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"lodash的实现\"><a href=\"#lodash的实现\" class=\"headerlink\" title=\"lodash的实现\"></a>lodash的实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'wclimb'</span>,</span><br><span class=\"line\">        test1: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        test2: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        test3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"number\">1</span>)&#125;,</span><br><span class=\"line\">        test4: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.cloneDeep(obj1)</span><br><span class=\"line\">obj2.age = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"MySQL基础","date":"2017-07-20T13:30:38.000Z","_content":"转载自\t[mysql-tutorial](https://github.com/jaywcjlove/mysql-tutorial)\n### 开始使用\n\nMySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, 如图所示的一个表格：\n\n- `表头(header)`: 每一列的名称;\n- `列(col)`: 具有相同数据类型的数据的集合;\n- `行(row)`: 每一行用来描述某个人/物的具体信息;\n- `值(value)`: 行的具体信息, 每个值必须与该列的数据类型相同;\n- `键(key)`: 表中用来识别某个特定的人\\物的方法, 键的值在当前列中具有唯一性。\n### 登录MySQL\n\n```shell\nmysql -h 127.0.0.1 -u 用户名 -p\nmysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p\nmysql> exit # 退出 使用 “quit;” 或 “\\q;” 一样的效果\nmysql> status;  # 显示当前mysql的version的各种信息\nmysql> select version(); # 显示当前mysql的version信息\nmysql> show global variables like 'port'; # 查看MySQL端口号\n```\n\n### 创建数据库\n\n对于表的操作需要先进入库`use 库名;`\n\n```sql\n-- 创建一个名为 samp_db 的数据库，数据库字符编码指定为 gbk\ncreate database samp_db character set gbk;\ndrop database samp_db; -- 删除 库名为samp_db的库\nshow databases;        -- 显示数据库列表。\nuse samp_db;     -- 选择创建的数据库samp_db\nshow tables;     -- 显示samp_db下面所有的表名字\ndescribe 表名;    -- 显示数据表的结构\ndelete from 表名; -- 清空表中记录\n```\n<!-- more -->\n### 创建数据库表\n\n> 使用 create table 语句可完成对表的创建, create table 的常见形式:\n> 语法：create table 表名称(列声明);\n\n```sql\n-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉\nDROP TABLE IF EXISTS `user_accounts`;\nCREATE TABLE `user_accounts` (\n  `id`             int(100) unsigned NOT NULL AUTO_INCREMENT primary key,\n  `password`       varchar(32)       NOT NULL DEFAULT '' COMMENT '用户密码',\n  `reset_password` tinyint(32)       NOT NULL DEFAULT 0 COMMENT '用户类型：0－不需要重置密码；1-需要重置密码',\n  `mobile`         varchar(20)       NOT NULL DEFAULT '' COMMENT '手机',\n  `create_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `update_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n  -- 创建唯一索引，不允许重复\n  UNIQUE INDEX idx_user_mobile(`mobile`)\n)\nENGINE=InnoDB DEFAULT CHARSET=utf8\nCOMMENT='用户表信息';\n```\n\n数据类型的属性解释\n\n- `NULL`：数据列可包含NULL值；\n- `NOT NULL`：数据列不允许包含NULL值；\n- `DEFAULT`：默认值；\n- `PRIMARY`：KEY 主键；\n- `AUTO_INCREMENT`：自动递增，适用于整数类型；\n- `UNSIGNED`：是指数值类型只能为正数；\n- `CHARACTER SET name`：指定一个字符集；\n- `COMMENT`：对表或者字段说明；\n\n### 增删改查\n\n### SELECT\n\n> SELECT 语句用于从表中选取数据。  \n> 语法：`SELECT 列名称 FROM 表名称`  \n> 语法：`SELECT * FROM 表名称`  \n\n```sql\n-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id\nSELECT s.id from station s WHERE id in (13,14) and id not in (4);\n\n-- 从表 Persons 选取 LastName 列的数据\nSELECT LastName FROM Persons\n\n-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)\nSELECT * FROM users where id=3 limit 1\n\n-- 结果集中会自动去重复数据\nSELECT DISTINCT Company FROM Orders \n-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，\n-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段\nSELECT p.LastName, p.FirstName, o.OrderNo FROM Persons p, Orders o WHERE p.Id_P = o.Id_P \n\n-- gbk 和 utf8 中英文混合排序最简单的办法 \n-- ci是 case insensitive, 即 “大小写不敏感”\nSELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using gbk) collate gbk_chinese_ci;\nSELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using utf8) collate utf8_unicode_ci;\n```\n\n### UPDATE\n\n> Update 语句用于修改表中的数据。  \n> 语法：`UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值`  \n\n```sql \n-- update语句设置字段值为另一个结果取出来的字段\nupdate user set name = (select name from user1 where user1 .id = 1 )\nwhere id = (select id from user2 where user2 .name='小苏');\n-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段\nUPDATE `orders` set title='这里是标题' WHERE id=1;\n```\n\n\n### INSERT\n\n> INSERT INTO 语句用于向表格中插入新的行。  \n> 语法：`INSERT INTO 表名称 VALUES (值1, 值2,....)`  \n> 语法：`INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)`  \n\n```sql\n-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai\nINSERT INTO Persons (LastName, Address) VALUES ('JSLite', 'shanghai');\n-- 向表 meeting 插入 字段 a=1 和字段 b=2\nINSERT INTO meeting SET a=1,b=2;\n-- \n-- SQL实现将一个表的数据插入到另外一个表的代码\n-- 如果只希望导入指定字段，可以用这种方法：\n-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;\nINSERT INTO orders (user_account_id, title) SELECT m.user_id, m.title FROM meeting m where m.id=1;\n\n-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；\nINSERT INTO `charger` (`id`,`type`,`create_at`,`update_at`) VALUES (3,2,'2017-05-18 11:06:17','2017-05-18 11:06:17') ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `type`=VALUES(`type`), `update_at`=VALUES(`update_at`);\n```\n\n### DELETE\n\n> DELETE 语句用于删除表中的行。  \n> 语法：`DELETE FROM 表名称 WHERE 列名称 = 值`  \n\n```sql\n-- 在不删除table_name表的情况下删除所有的行，清空表。\nDELETE FROM table_name\n-- 或者\nDELETE * FROM table_name\n-- 删除 Person表字段 LastName = 'JSLite' \nDELETE FROM Person WHERE LastName = 'JSLite' \n-- 删除 表meeting id 为2和3的两条数据\nDELETE from meeting where id in (2,3);\n```\n\n### WHERE\n\n> WHERE 子句用于规定选择的标准。  \n> 语法：`SELECT 列名称 FROM 表名称 WHERE 列 运算符 值`  \n\n```sql \n-- 从表 Persons 中选出 Year 字段大于 1965 的数据\nSELECT * FROM Persons WHERE Year>1965\n```\n\n### AND 和 OR\n\n> AND - 如果第一个条件和第二个条件都成立；  \n> OR - 如果第一个条件和第二个条件中只要有一个成立；  \n\n### AND\n\n```sql \n-- 删除 meeting 表字段 \n-- id=2 并且 user_id=5 的数据  和\n-- id=3 并且 user_id=6 的数据 \nDELETE from meeting where id in (2,3) and user_id in (5,6);\n\n-- 使用 AND 来显示所有姓为 \"Carter\" 并且名为 \"Thomas\" 的人：\nSELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter';\n```\n\n### OR\n\n```sql \n-- 使用 OR 来显示所有姓为 \"Carter\" 或者名为 \"Thomas\" 的人：\nSELECT * FROM Persons WHERE firstname='Thomas' OR lastname='Carter'\n```\n\n### ORDER BY\n\n> 语句默认按照升序对记录进行排序。  \n> `ORDER BY` - 语句用于根据指定的列对结果集进行排序。  \n> `DESC` - 按照降序对记录进行排序。  \n> `ASC` - 按照顺序对记录进行排序。  \n\n```sql\n-- Company在表Orders中为字母，则会以字母顺序显示公司名称\nSELECT Company, OrderNumber FROM Orders ORDER BY Company\n\n-- 后面跟上 DESC 则为降序显示\nSELECT Company, OrderNumber FROM Orders ORDER BY Company DESC\n\n-- Company以降序显示公司名称，并OrderNumber以顺序显示\nSELECT Company, OrderNumber FROM Orders ORDER BY Company DESC, OrderNumber ASC\n```\n\n### IN\n\n> IN - 操作符允许我们在 WHERE 子句中规定多个值。  \n> IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。\n> 语法：`SELECT \"字段名\"FROM \"表格名\"WHERE \"字段名\" IN ('值一', '值二', ...);`\n\n```sql \n-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter\nSELECT * FROM Persons WHERE LastName IN ('Adams','Carter')\n```\n\n### NOT\n\n> NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。\n\n```sql\nSELECT vend_id, prod_name FROM Products WHERE NOT vend_id = 'DLL01' ORDER BY prod_name;\n```\n\n\n### UNION\n\n> UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。\n\n\n```sql\n-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名\nSELECT E_Name FROM Employees_China UNION SELECT E_Name FROM Employees_USA\n\n-- 列出 meeting 表中的 pic_url，\n-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错\n-- 按更新时间排序\nSELECT id,pic_url FROM meeting UNION ALL SELECT id,number_station AS pic_url FROM station  ORDER BY update_at;\n-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序\nSELECT 'product' AS type, count(*) as count FROM `products` union select 'comment' as type, count(*) as count FROM `comments` order by count;\n```\n\n\n### AS \n\n> as - 可理解为：用作、当成，作为；别名  \n> 一般是重命名列名或者表名。  \n> 语法：`select column_1 as 列1,column_2 as 列2 from table as 表`\n\n```sql \nSELECT * FROM Employee AS emp\n-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。\n-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.\n-- 例如 SELECT * FROM emp.\n\nSELECT MAX(OrderPrice) AS LargestOrderPrice FROM Orders\n-- 列出表 Orders 字段 OrderPrice 列最大值，\n-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice\n\n-- 显示表 users_profile 中的 name 列\nSELECT t.name from (SELECT * from users_profile a) AS t;\n\n-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up\n-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id\n-- 结果集只显示mobile、name两列\nSELECT ua.mobile,up.name FROM user_accounts as ua INNER JOIN users_profile as up ON ua.id = up.user_id;\n```\n\n### JOIN \n\n> 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  \n\n- `JOIN`: 如果表中有至少一个匹配，则返回行\n- `INNER JOIN`:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。\n- `LEFT JOIN`: 即使右表中没有匹配，也从左表返回所有的行\n- `RIGHT JOIN`: 即使左表中没有匹配，也从右表返回所有的行\n- `FULL JOIN`: 只要其中一个表中存在匹配，就返回行\n\n```sql\nSELECT Persons.LastName, Persons.FirstName, Orders.OrderNo\nFROM Persons\nINNER JOIN Orders\nON Persons.Id_P = Orders.Id_P\nORDER BY Persons.LastName;\n```\n\n### SQL 函数\n\n### COUNT\n\n> COUNT 让我们能够数出在表格中有多少笔资料被选出来。  \n> 语法：`SELECT COUNT(\"字段名\") FROM \"表格名\";`\n\n```sql \n-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。\n-- \"IS NOT NULL\" 是 \"这个栏位不是空白\" 的意思。\nSELECT COUNT (Store_Name) FROM Store_Information WHERE Store_Name IS NOT NULL; \n-- 获取 Persons 表的总数\nSELECT COUNT(1) AS totals FROM Persons;\n-- 获取表 station 字段 user_id 相同的总数\nselect user_id, count(*) as totals from station group by user_id;\n```\n\n### MAX\n\n> MAX 函数返回一列中的最大值。NULL 值不包括在计算中。  \n> 语法：`SELECT MAX(\"字段名\") FROM \"表格名\"`  \n\n```sql \n-- 列出表 Orders 字段 OrderPrice 列最大值，\n-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice\nSELECT MAX(OrderPrice) AS LargestOrderPrice FROM Orders\n```\n\n### 触发器\n\n> 语法：\n> create trigger <触发器名称>\n> { before | after}             # 之前或者之后出发\n> insert | update | delete      # 指明了激活触发程序的语句的类型\n> on <表名>                     # 操作哪张表\n> for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。\n> <触发器SQL语句>\n\n```sql\ndelimiter $\nCREATE TRIGGER set_userdate BEFORE INSERT \non `message`\nfor EACH ROW\nBEGIN\n  set @statu = new.status; -- 声明复制变量 statu\n  if @statu = 0 then       -- 判断 statu 是否等于 0\n    UPDATE `user_accounts` SET status=1 WHERE openid=NEW.openid;\n  end if;\nEND\n$\nDELIMITER ; -- 恢复结束符号\n```\n\nOLD和NEW不区分大小写\n- NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。\n- OLD 用OLD.col_name来引用更新前的某一行的列\n\n### 添加索引\n\n### 普通索引(INDEX)\n\n> 语法：ALTER TABLE `表名字` ADD INDEX 索引名字 ( `字段名字` )\n\n```sql\n-- –直接创建索引\nCREATE INDEX index_user ON user(title)\n-- –修改表结构的方式添加索引\nALTER TABLE table_name ADD INDEX index_name ON (column(length))\n-- 给 user 表中的 name字段 添加普通索引(INDEX)\nALTER TABLE `table` ADD INDEX index_name (name)\n-- –创建表的时候同时创建索引\nCREATE TABLE `table` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,\n    `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,\n    `time` int(10) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    INDEX index_name (title(length))\n)\n-- –删除索引\nDROP INDEX index_name ON table\n```\n\n### 主键索引(PRIMARY key)\n\n> 语法：ALTER TABLE `表名字` ADD PRIMARY KEY ( `字段名字` )\n\n```sql\n-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)\nALTER TABLE `user` ADD PRIMARY key (id);\n```\n\n### 唯一索引(UNIQUE)\n\n> 语法：ALTER TABLE `表名字` ADD UNIQUE (`字段名字`)\n\n```sql\n-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)\nALTER TABLE `user` ADD UNIQUE (creattime);\n```\n\n### 全文索引(FULLTEXT)\n\n> 语法：ALTER TABLE `表名字` ADD FULLTEXT (`字段名字`)\n\n```sql\n-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)\nALTER TABLE `user` ADD FULLTEXT (description);\n```\n\n### 添加多列索引\n\n> 语法：\nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3`)\n\n```sql\n-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)\nALTER TABLE user ADD INDEX name_city_age (name(10),city,age); \n```\n\n### 建立索引的时机\n\n在`WHERE`和`JOIN`中出现的列需要建立索引，但也不完全如此：\n\n- MySQL只对`<`，`<=`，`=`，`>`，`>=`，`BETWEEN`，`IN`使用索引\n- 某些时候的`LIKE`也会使用索引。\n- 在`LIKE`以通配符%和_开头作查询时，MySQL不会使用索引。\n\n```sql\n-- 此时就需要对city和age建立索引，\n-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。\nSELECT t.Name  \nFROM mytable t LEFT JOIN mytable m ON t.Name=m.username \nWHERE m.age=20 AND m.city='上海';\n\nSELECT * FROM mytable WHERE username like'admin%'; -- 而下句就不会使用：\nSELECT * FROM mytable WHEREt Name like'%admin'; -- 因此，在使用LIKE时应注意以上的区别。\n```\n\n索引的注意事项\n\n- 索引不会包含有NULL值的列\n- 使用短索引\n- 不要在列上进行运算 索引会失效\n\n### 创建后表的修改\n\n### 添加列\n\n> 语法：`alter table 表名 add 列名 列数据类型 [after 插入位置];`\n\n示例:\n\n```sql\n-- 在表students的最后追加列 address: \nalter table students add address char(60);\n-- 在名为 age 的列后插入列 birthday: \nalter table students add birthday date after age;\n-- 在名为 number_people 的列后插入列 weeks: \nalter table students add column `weeks` varchar(5) not null default \"\" after `number_people`;\n```\n\n### 修改列\n\n> 语法：`alter table 表名 change 列名称 列新名称 新数据类型;`\n\n```sql\n-- 将表 tel 列改名为 telphone: \nalter table students change tel telphone char(13) default \"-\";\n-- 将 name 列的数据类型改为 char(16): \nalter table students change name name char(16) not null;\n-- 修改 COMMENT 前面必须得有类型属性\nalter table students change name name char(16) COMMENT '这里是名字';\n-- 修改列属性的时候 建议使用modify,不需要重建表\n-- change用于修改列名字，这个需要重建表\nalter table meeting modify `weeks` varchar(20) NOT NULL DEFAULT \"\" COMMENT \"开放日期 周一到周日：0~6，间隔用英文逗号隔开\";\n```\n\n### 删除列\n\n> 语法：`alter table 表名 drop 列名称;`\n\n```sql\n-- 删除表students中的 birthday 列: \nalter table students drop birthday;\n```\n\n### 重命名表\n\n> 语法：`alter table 表名 rename 新表名;`\n\n```sql\n-- 重命名 students 表为 workmates: \nalter table students rename workmates;\n```\n\n### 清空表数据\n\n> 方法一：`delete from 表名;`\n> 方法二：`truncate from \"表名\";`\n\n- `DELETE:`1. DML语言;2. 可以回退;3. 可以有条件的删除;\n- `TRUNCATE:`1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。\n\n```sql\n-- 清空表为 workmates 里面的数据，不删除表。 \ndelete from workmates;\n-- 删除workmates表中的所有数据，且无法恢复\ntruncate from workmates;\n```\n\n### 删除整张表\n\n> 语法：`drop table 表名;`\n\n```sql\n-- 删除 workmates 表: \ndrop table workmates;\n```\n\n### 删除整个数据库\n\n> 语法：`drop database 数据库名;`\n\n```sql\n-- 删除 samp_db 数据库: \ndrop database samp_db;\n```\n\n### 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/MySQL基础.md","raw":"---\ntitle: MySQL基础\ndate: 2017-07-20 21:30:38\ntags:\n- 数据库\n- mysql\n- 转载\n---\n转载自\t[mysql-tutorial](https://github.com/jaywcjlove/mysql-tutorial)\n### 开始使用\n\nMySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, 如图所示的一个表格：\n\n- `表头(header)`: 每一列的名称;\n- `列(col)`: 具有相同数据类型的数据的集合;\n- `行(row)`: 每一行用来描述某个人/物的具体信息;\n- `值(value)`: 行的具体信息, 每个值必须与该列的数据类型相同;\n- `键(key)`: 表中用来识别某个特定的人\\物的方法, 键的值在当前列中具有唯一性。\n### 登录MySQL\n\n```shell\nmysql -h 127.0.0.1 -u 用户名 -p\nmysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p\nmysql> exit # 退出 使用 “quit;” 或 “\\q;” 一样的效果\nmysql> status;  # 显示当前mysql的version的各种信息\nmysql> select version(); # 显示当前mysql的version信息\nmysql> show global variables like 'port'; # 查看MySQL端口号\n```\n\n### 创建数据库\n\n对于表的操作需要先进入库`use 库名;`\n\n```sql\n-- 创建一个名为 samp_db 的数据库，数据库字符编码指定为 gbk\ncreate database samp_db character set gbk;\ndrop database samp_db; -- 删除 库名为samp_db的库\nshow databases;        -- 显示数据库列表。\nuse samp_db;     -- 选择创建的数据库samp_db\nshow tables;     -- 显示samp_db下面所有的表名字\ndescribe 表名;    -- 显示数据表的结构\ndelete from 表名; -- 清空表中记录\n```\n<!-- more -->\n### 创建数据库表\n\n> 使用 create table 语句可完成对表的创建, create table 的常见形式:\n> 语法：create table 表名称(列声明);\n\n```sql\n-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉\nDROP TABLE IF EXISTS `user_accounts`;\nCREATE TABLE `user_accounts` (\n  `id`             int(100) unsigned NOT NULL AUTO_INCREMENT primary key,\n  `password`       varchar(32)       NOT NULL DEFAULT '' COMMENT '用户密码',\n  `reset_password` tinyint(32)       NOT NULL DEFAULT 0 COMMENT '用户类型：0－不需要重置密码；1-需要重置密码',\n  `mobile`         varchar(20)       NOT NULL DEFAULT '' COMMENT '手机',\n  `create_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `update_at`      timestamp(6)      NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n  -- 创建唯一索引，不允许重复\n  UNIQUE INDEX idx_user_mobile(`mobile`)\n)\nENGINE=InnoDB DEFAULT CHARSET=utf8\nCOMMENT='用户表信息';\n```\n\n数据类型的属性解释\n\n- `NULL`：数据列可包含NULL值；\n- `NOT NULL`：数据列不允许包含NULL值；\n- `DEFAULT`：默认值；\n- `PRIMARY`：KEY 主键；\n- `AUTO_INCREMENT`：自动递增，适用于整数类型；\n- `UNSIGNED`：是指数值类型只能为正数；\n- `CHARACTER SET name`：指定一个字符集；\n- `COMMENT`：对表或者字段说明；\n\n### 增删改查\n\n### SELECT\n\n> SELECT 语句用于从表中选取数据。  \n> 语法：`SELECT 列名称 FROM 表名称`  \n> 语法：`SELECT * FROM 表名称`  \n\n```sql\n-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id\nSELECT s.id from station s WHERE id in (13,14) and id not in (4);\n\n-- 从表 Persons 选取 LastName 列的数据\nSELECT LastName FROM Persons\n\n-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)\nSELECT * FROM users where id=3 limit 1\n\n-- 结果集中会自动去重复数据\nSELECT DISTINCT Company FROM Orders \n-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，\n-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段\nSELECT p.LastName, p.FirstName, o.OrderNo FROM Persons p, Orders o WHERE p.Id_P = o.Id_P \n\n-- gbk 和 utf8 中英文混合排序最简单的办法 \n-- ci是 case insensitive, 即 “大小写不敏感”\nSELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using gbk) collate gbk_chinese_ci;\nSELECT tag, COUNT(tag) from news GROUP BY tag order by convert(tag using utf8) collate utf8_unicode_ci;\n```\n\n### UPDATE\n\n> Update 语句用于修改表中的数据。  \n> 语法：`UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值`  \n\n```sql \n-- update语句设置字段值为另一个结果取出来的字段\nupdate user set name = (select name from user1 where user1 .id = 1 )\nwhere id = (select id from user2 where user2 .name='小苏');\n-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段\nUPDATE `orders` set title='这里是标题' WHERE id=1;\n```\n\n\n### INSERT\n\n> INSERT INTO 语句用于向表格中插入新的行。  \n> 语法：`INSERT INTO 表名称 VALUES (值1, 值2,....)`  \n> 语法：`INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)`  \n\n```sql\n-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai\nINSERT INTO Persons (LastName, Address) VALUES ('JSLite', 'shanghai');\n-- 向表 meeting 插入 字段 a=1 和字段 b=2\nINSERT INTO meeting SET a=1,b=2;\n-- \n-- SQL实现将一个表的数据插入到另外一个表的代码\n-- 如果只希望导入指定字段，可以用这种方法：\n-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;\nINSERT INTO orders (user_account_id, title) SELECT m.user_id, m.title FROM meeting m where m.id=1;\n\n-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；\nINSERT INTO `charger` (`id`,`type`,`create_at`,`update_at`) VALUES (3,2,'2017-05-18 11:06:17','2017-05-18 11:06:17') ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `type`=VALUES(`type`), `update_at`=VALUES(`update_at`);\n```\n\n### DELETE\n\n> DELETE 语句用于删除表中的行。  \n> 语法：`DELETE FROM 表名称 WHERE 列名称 = 值`  \n\n```sql\n-- 在不删除table_name表的情况下删除所有的行，清空表。\nDELETE FROM table_name\n-- 或者\nDELETE * FROM table_name\n-- 删除 Person表字段 LastName = 'JSLite' \nDELETE FROM Person WHERE LastName = 'JSLite' \n-- 删除 表meeting id 为2和3的两条数据\nDELETE from meeting where id in (2,3);\n```\n\n### WHERE\n\n> WHERE 子句用于规定选择的标准。  \n> 语法：`SELECT 列名称 FROM 表名称 WHERE 列 运算符 值`  \n\n```sql \n-- 从表 Persons 中选出 Year 字段大于 1965 的数据\nSELECT * FROM Persons WHERE Year>1965\n```\n\n### AND 和 OR\n\n> AND - 如果第一个条件和第二个条件都成立；  \n> OR - 如果第一个条件和第二个条件中只要有一个成立；  \n\n### AND\n\n```sql \n-- 删除 meeting 表字段 \n-- id=2 并且 user_id=5 的数据  和\n-- id=3 并且 user_id=6 的数据 \nDELETE from meeting where id in (2,3) and user_id in (5,6);\n\n-- 使用 AND 来显示所有姓为 \"Carter\" 并且名为 \"Thomas\" 的人：\nSELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter';\n```\n\n### OR\n\n```sql \n-- 使用 OR 来显示所有姓为 \"Carter\" 或者名为 \"Thomas\" 的人：\nSELECT * FROM Persons WHERE firstname='Thomas' OR lastname='Carter'\n```\n\n### ORDER BY\n\n> 语句默认按照升序对记录进行排序。  \n> `ORDER BY` - 语句用于根据指定的列对结果集进行排序。  \n> `DESC` - 按照降序对记录进行排序。  \n> `ASC` - 按照顺序对记录进行排序。  \n\n```sql\n-- Company在表Orders中为字母，则会以字母顺序显示公司名称\nSELECT Company, OrderNumber FROM Orders ORDER BY Company\n\n-- 后面跟上 DESC 则为降序显示\nSELECT Company, OrderNumber FROM Orders ORDER BY Company DESC\n\n-- Company以降序显示公司名称，并OrderNumber以顺序显示\nSELECT Company, OrderNumber FROM Orders ORDER BY Company DESC, OrderNumber ASC\n```\n\n### IN\n\n> IN - 操作符允许我们在 WHERE 子句中规定多个值。  \n> IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。\n> 语法：`SELECT \"字段名\"FROM \"表格名\"WHERE \"字段名\" IN ('值一', '值二', ...);`\n\n```sql \n-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter\nSELECT * FROM Persons WHERE LastName IN ('Adams','Carter')\n```\n\n### NOT\n\n> NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。\n\n```sql\nSELECT vend_id, prod_name FROM Products WHERE NOT vend_id = 'DLL01' ORDER BY prod_name;\n```\n\n\n### UNION\n\n> UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。\n\n\n```sql\n-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名\nSELECT E_Name FROM Employees_China UNION SELECT E_Name FROM Employees_USA\n\n-- 列出 meeting 表中的 pic_url，\n-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错\n-- 按更新时间排序\nSELECT id,pic_url FROM meeting UNION ALL SELECT id,number_station AS pic_url FROM station  ORDER BY update_at;\n-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序\nSELECT 'product' AS type, count(*) as count FROM `products` union select 'comment' as type, count(*) as count FROM `comments` order by count;\n```\n\n\n### AS \n\n> as - 可理解为：用作、当成，作为；别名  \n> 一般是重命名列名或者表名。  \n> 语法：`select column_1 as 列1,column_2 as 列2 from table as 表`\n\n```sql \nSELECT * FROM Employee AS emp\n-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。\n-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.\n-- 例如 SELECT * FROM emp.\n\nSELECT MAX(OrderPrice) AS LargestOrderPrice FROM Orders\n-- 列出表 Orders 字段 OrderPrice 列最大值，\n-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice\n\n-- 显示表 users_profile 中的 name 列\nSELECT t.name from (SELECT * from users_profile a) AS t;\n\n-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up\n-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id\n-- 结果集只显示mobile、name两列\nSELECT ua.mobile,up.name FROM user_accounts as ua INNER JOIN users_profile as up ON ua.id = up.user_id;\n```\n\n### JOIN \n\n> 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  \n\n- `JOIN`: 如果表中有至少一个匹配，则返回行\n- `INNER JOIN`:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。\n- `LEFT JOIN`: 即使右表中没有匹配，也从左表返回所有的行\n- `RIGHT JOIN`: 即使左表中没有匹配，也从右表返回所有的行\n- `FULL JOIN`: 只要其中一个表中存在匹配，就返回行\n\n```sql\nSELECT Persons.LastName, Persons.FirstName, Orders.OrderNo\nFROM Persons\nINNER JOIN Orders\nON Persons.Id_P = Orders.Id_P\nORDER BY Persons.LastName;\n```\n\n### SQL 函数\n\n### COUNT\n\n> COUNT 让我们能够数出在表格中有多少笔资料被选出来。  \n> 语法：`SELECT COUNT(\"字段名\") FROM \"表格名\";`\n\n```sql \n-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。\n-- \"IS NOT NULL\" 是 \"这个栏位不是空白\" 的意思。\nSELECT COUNT (Store_Name) FROM Store_Information WHERE Store_Name IS NOT NULL; \n-- 获取 Persons 表的总数\nSELECT COUNT(1) AS totals FROM Persons;\n-- 获取表 station 字段 user_id 相同的总数\nselect user_id, count(*) as totals from station group by user_id;\n```\n\n### MAX\n\n> MAX 函数返回一列中的最大值。NULL 值不包括在计算中。  \n> 语法：`SELECT MAX(\"字段名\") FROM \"表格名\"`  \n\n```sql \n-- 列出表 Orders 字段 OrderPrice 列最大值，\n-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice\nSELECT MAX(OrderPrice) AS LargestOrderPrice FROM Orders\n```\n\n### 触发器\n\n> 语法：\n> create trigger <触发器名称>\n> { before | after}             # 之前或者之后出发\n> insert | update | delete      # 指明了激活触发程序的语句的类型\n> on <表名>                     # 操作哪张表\n> for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。\n> <触发器SQL语句>\n\n```sql\ndelimiter $\nCREATE TRIGGER set_userdate BEFORE INSERT \non `message`\nfor EACH ROW\nBEGIN\n  set @statu = new.status; -- 声明复制变量 statu\n  if @statu = 0 then       -- 判断 statu 是否等于 0\n    UPDATE `user_accounts` SET status=1 WHERE openid=NEW.openid;\n  end if;\nEND\n$\nDELIMITER ; -- 恢复结束符号\n```\n\nOLD和NEW不区分大小写\n- NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。\n- OLD 用OLD.col_name来引用更新前的某一行的列\n\n### 添加索引\n\n### 普通索引(INDEX)\n\n> 语法：ALTER TABLE `表名字` ADD INDEX 索引名字 ( `字段名字` )\n\n```sql\n-- –直接创建索引\nCREATE INDEX index_user ON user(title)\n-- –修改表结构的方式添加索引\nALTER TABLE table_name ADD INDEX index_name ON (column(length))\n-- 给 user 表中的 name字段 添加普通索引(INDEX)\nALTER TABLE `table` ADD INDEX index_name (name)\n-- –创建表的时候同时创建索引\nCREATE TABLE `table` (\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\n    `title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,\n    `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,\n    `time` int(10) NULL DEFAULT NULL ,\n    PRIMARY KEY (`id`),\n    INDEX index_name (title(length))\n)\n-- –删除索引\nDROP INDEX index_name ON table\n```\n\n### 主键索引(PRIMARY key)\n\n> 语法：ALTER TABLE `表名字` ADD PRIMARY KEY ( `字段名字` )\n\n```sql\n-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)\nALTER TABLE `user` ADD PRIMARY key (id);\n```\n\n### 唯一索引(UNIQUE)\n\n> 语法：ALTER TABLE `表名字` ADD UNIQUE (`字段名字`)\n\n```sql\n-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)\nALTER TABLE `user` ADD UNIQUE (creattime);\n```\n\n### 全文索引(FULLTEXT)\n\n> 语法：ALTER TABLE `表名字` ADD FULLTEXT (`字段名字`)\n\n```sql\n-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)\nALTER TABLE `user` ADD FULLTEXT (description);\n```\n\n### 添加多列索引\n\n> 语法：\nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3`)\n\n```sql\n-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)\nALTER TABLE user ADD INDEX name_city_age (name(10),city,age); \n```\n\n### 建立索引的时机\n\n在`WHERE`和`JOIN`中出现的列需要建立索引，但也不完全如此：\n\n- MySQL只对`<`，`<=`，`=`，`>`，`>=`，`BETWEEN`，`IN`使用索引\n- 某些时候的`LIKE`也会使用索引。\n- 在`LIKE`以通配符%和_开头作查询时，MySQL不会使用索引。\n\n```sql\n-- 此时就需要对city和age建立索引，\n-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。\nSELECT t.Name  \nFROM mytable t LEFT JOIN mytable m ON t.Name=m.username \nWHERE m.age=20 AND m.city='上海';\n\nSELECT * FROM mytable WHERE username like'admin%'; -- 而下句就不会使用：\nSELECT * FROM mytable WHEREt Name like'%admin'; -- 因此，在使用LIKE时应注意以上的区别。\n```\n\n索引的注意事项\n\n- 索引不会包含有NULL值的列\n- 使用短索引\n- 不要在列上进行运算 索引会失效\n\n### 创建后表的修改\n\n### 添加列\n\n> 语法：`alter table 表名 add 列名 列数据类型 [after 插入位置];`\n\n示例:\n\n```sql\n-- 在表students的最后追加列 address: \nalter table students add address char(60);\n-- 在名为 age 的列后插入列 birthday: \nalter table students add birthday date after age;\n-- 在名为 number_people 的列后插入列 weeks: \nalter table students add column `weeks` varchar(5) not null default \"\" after `number_people`;\n```\n\n### 修改列\n\n> 语法：`alter table 表名 change 列名称 列新名称 新数据类型;`\n\n```sql\n-- 将表 tel 列改名为 telphone: \nalter table students change tel telphone char(13) default \"-\";\n-- 将 name 列的数据类型改为 char(16): \nalter table students change name name char(16) not null;\n-- 修改 COMMENT 前面必须得有类型属性\nalter table students change name name char(16) COMMENT '这里是名字';\n-- 修改列属性的时候 建议使用modify,不需要重建表\n-- change用于修改列名字，这个需要重建表\nalter table meeting modify `weeks` varchar(20) NOT NULL DEFAULT \"\" COMMENT \"开放日期 周一到周日：0~6，间隔用英文逗号隔开\";\n```\n\n### 删除列\n\n> 语法：`alter table 表名 drop 列名称;`\n\n```sql\n-- 删除表students中的 birthday 列: \nalter table students drop birthday;\n```\n\n### 重命名表\n\n> 语法：`alter table 表名 rename 新表名;`\n\n```sql\n-- 重命名 students 表为 workmates: \nalter table students rename workmates;\n```\n\n### 清空表数据\n\n> 方法一：`delete from 表名;`\n> 方法二：`truncate from \"表名\";`\n\n- `DELETE:`1. DML语言;2. 可以回退;3. 可以有条件的删除;\n- `TRUNCATE:`1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。\n\n```sql\n-- 清空表为 workmates 里面的数据，不删除表。 \ndelete from workmates;\n-- 删除workmates表中的所有数据，且无法恢复\ntruncate from workmates;\n```\n\n### 删除整张表\n\n> 语法：`drop table 表名;`\n\n```sql\n-- 删除 workmates 表: \ndrop table workmates;\n```\n\n### 删除整个数据库\n\n> 语法：`drop database 数据库名;`\n\n```sql\n-- 删除 samp_db 数据库: \ndrop database samp_db;\n```\n\n### 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"MySQL基础","published":1,"updated":"2019-06-06T01:06:26.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns97000n59x3bdc29jf5","content":"<p>转载自    <a href=\"https://github.com/jaywcjlove/mysql-tutorial\" target=\"_blank\" rel=\"noopener\">mysql-tutorial</a></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>MySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, 如图所示的一个表格：</p>\n<ul>\n<li><code>表头(header)</code>: 每一列的名称;</li>\n<li><code>列(col)</code>: 具有相同数据类型的数据的集合;</li>\n<li><code>行(row)</code>: 每一行用来描述某个人/物的具体信息;</li>\n<li><code>值(value)</code>: 行的具体信息, 每个值必须与该列的数据类型相同;</li>\n<li><code>键(key)</code>: 表中用来识别某个特定的人\\物的方法, 键的值在当前列中具有唯一性。<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 127.0.0.1 -u 用户名 -p</span><br><span class=\"line\">mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> exit # 退出 使用 “quit;” 或 “\\q;” 一样的效果</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> status;  # 显示当前mysql的version的各种信息</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> select version(); # 显示当前mysql的version信息</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> show global variables like 'port'; # 查看MySQL端口号</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>对于表的操作需要先进入库<code>use 库名;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建一个名为 samp_db 的数据库，数据库字符编码指定为 gbk</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> samp_db <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> samp_db; <span class=\"comment\">-- 删除 库名为samp_db的库</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;        <span class=\"comment\">-- 显示数据库列表。</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> samp_db;     <span class=\"comment\">-- 选择创建的数据库samp_db</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;     <span class=\"comment\">-- 显示samp_db下面所有的表名字</span></span><br><span class=\"line\"><span class=\"keyword\">describe</span> 表名;    <span class=\"comment\">-- 显示数据表的结构</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名; <span class=\"comment\">-- 清空表中记录</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"创建数据库表\"><a href=\"#创建数据库表\" class=\"headerlink\" title=\"创建数据库表\"></a>创建数据库表</h3><blockquote>\n<p>使用 create table 语句可完成对表的创建, create table 的常见形式:<br>语法：create table 表名称(列声明);</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`user_accounts`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user_accounts`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span>             <span class=\"built_in\">int</span>(<span class=\"number\">100</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">  <span class=\"string\">`password`</span>       <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户密码'</span>,</span><br><span class=\"line\">  <span class=\"string\">`reset_password`</span> <span class=\"built_in\">tinyint</span>(<span class=\"number\">32</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户类型：0－不需要重置密码；1-需要重置密码'</span>,</span><br><span class=\"line\">  <span class=\"string\">`mobile`</span>         <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'手机'</span>,</span><br><span class=\"line\">  <span class=\"string\">`create_at`</span>      <span class=\"built_in\">timestamp</span>(<span class=\"number\">6</span>)      <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>),</span><br><span class=\"line\">  <span class=\"string\">`update_at`</span>      <span class=\"built_in\">timestamp</span>(<span class=\"number\">6</span>)      <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>),</span><br><span class=\"line\">  <span class=\"comment\">-- 创建唯一索引，不允许重复</span></span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> idx_user_mobile(<span class=\"string\">`mobile`</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br><span class=\"line\"><span class=\"keyword\">COMMENT</span>=<span class=\"string\">'用户表信息'</span>;</span><br></pre></td></tr></table></figure>\n<p>数据类型的属性解释</p>\n<ul>\n<li><code>NULL</code>：数据列可包含NULL值；</li>\n<li><code>NOT NULL</code>：数据列不允许包含NULL值；</li>\n<li><code>DEFAULT</code>：默认值；</li>\n<li><code>PRIMARY</code>：KEY 主键；</li>\n<li><code>AUTO_INCREMENT</code>：自动递增，适用于整数类型；</li>\n<li><code>UNSIGNED</code>：是指数值类型只能为正数；</li>\n<li><code>CHARACTER SET name</code>：指定一个字符集；</li>\n<li><code>COMMENT</code>：对表或者字段说明；</li>\n</ul>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><blockquote>\n<p>SELECT 语句用于从表中选取数据。<br>语法：<code>SELECT 列名称 FROM 表名称</code><br>语法：<code>SELECT * FROM 表名称</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.id <span class=\"keyword\">from</span> station s <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">13</span>,<span class=\"number\">14</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从表 Persons 选取 LastName 列的数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> LastName <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">3</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 结果集中会自动去重复数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Company <span class=\"keyword\">FROM</span> Orders </span><br><span class=\"line\"><span class=\"comment\">-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> p.LastName, p.FirstName, o.OrderNo <span class=\"keyword\">FROM</span> Persons p, Orders o <span class=\"keyword\">WHERE</span> p.Id_P = o.Id_P </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- gbk 和 utf8 中英文混合排序最简单的办法 </span></span><br><span class=\"line\"><span class=\"comment\">-- ci是 case insensitive, 即 “大小写不敏感”</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tag, <span class=\"keyword\">COUNT</span>(tag) <span class=\"keyword\">from</span> news <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> tag <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">convert</span>(tag <span class=\"keyword\">using</span> gbk) <span class=\"keyword\">collate</span> gbk_chinese_ci;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tag, <span class=\"keyword\">COUNT</span>(tag) <span class=\"keyword\">from</span> news <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> tag <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">convert</span>(tag <span class=\"keyword\">using</span> utf8) <span class=\"keyword\">collate</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><blockquote>\n<p>Update 语句用于修改表中的数据。<br>语法：<code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- update语句设置字段值为另一个结果取出来的字段</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> <span class=\"keyword\">name</span> = (<span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user1 <span class=\"keyword\">where</span> user1 .id = <span class=\"number\">1</span> )</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> user2 <span class=\"keyword\">where</span> user2 .name=<span class=\"string\">'小苏'</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"string\">`orders`</span> <span class=\"keyword\">set</span> title=<span class=\"string\">'这里是标题'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><blockquote>\n<p>INSERT INTO 语句用于向表格中插入新的行。<br>语法：<code>INSERT INTO 表名称 VALUES (值1, 值2,....)</code><br>语法：<code>INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Persons (LastName, Address) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'JSLite'</span>, <span class=\"string\">'shanghai'</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 向表 meeting 插入 字段 a=1 和字段 b=2</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> meeting <span class=\"keyword\">SET</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">-- </span></span><br><span class=\"line\"><span class=\"comment\">-- SQL实现将一个表的数据插入到另外一个表的代码</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果只希望导入指定字段，可以用这种方法：</span></span><br><span class=\"line\"><span class=\"comment\">-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders (user_account_id, title) <span class=\"keyword\">SELECT</span> m.user_id, m.title <span class=\"keyword\">FROM</span> meeting m <span class=\"keyword\">where</span> m.id=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`charger`</span> (<span class=\"string\">`id`</span>,<span class=\"string\">`type`</span>,<span class=\"string\">`create_at`</span>,<span class=\"string\">`update_at`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"string\">'2017-05-18 11:06:17'</span>,<span class=\"string\">'2017-05-18 11:06:17'</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">DUPLICATE</span> <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"string\">`id`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`id`</span>), <span class=\"string\">`type`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`type`</span>), <span class=\"string\">`update_at`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`update_at`</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><blockquote>\n<p>DELETE 语句用于删除表中的行。<br>语法：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在不删除table_name表的情况下删除所有的行，清空表。</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> * <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"comment\">-- 删除 Person表字段 LastName = 'JSLite' </span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Person <span class=\"keyword\">WHERE</span> LastName = <span class=\"string\">'JSLite'</span> </span><br><span class=\"line\"><span class=\"comment\">-- 删除 表meeting id 为2和3的两条数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">from</span> meeting <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><blockquote>\n<p>WHERE 子句用于规定选择的标准。<br>语法：<code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从表 Persons 中选出 Year 字段大于 1965 的数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> <span class=\"keyword\">Year</span>&gt;<span class=\"number\">1965</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"AND-和-OR\"><a href=\"#AND-和-OR\" class=\"headerlink\" title=\"AND 和 OR\"></a>AND 和 OR</h3><blockquote>\n<p>AND - 如果第一个条件和第二个条件都成立；<br>OR - 如果第一个条件和第二个条件中只要有一个成立；  </p>\n</blockquote>\n<h3 id=\"AND\"><a href=\"#AND\" class=\"headerlink\" title=\"AND\"></a>AND</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 meeting 表字段 </span></span><br><span class=\"line\"><span class=\"comment\">-- id=2 并且 user_id=5 的数据  和</span></span><br><span class=\"line\"><span class=\"comment\">-- id=3 并且 user_id=6 的数据 </span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">from</span> meeting <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"keyword\">and</span> user_id <span class=\"keyword\">in</span> (<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 AND 来显示所有姓为 \"Carter\" 并且名为 \"Thomas\" 的人：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> FirstName=<span class=\"string\">'Thomas'</span> <span class=\"keyword\">AND</span> LastName=<span class=\"string\">'Carter'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用 OR 来显示所有姓为 \"Carter\" 或者名为 \"Thomas\" 的人：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> firstname=<span class=\"string\">'Thomas'</span> <span class=\"keyword\">OR</span> lastname=<span class=\"string\">'Carter'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><blockquote>\n<p>语句默认按照升序对记录进行排序。<br><code>ORDER BY</code> - 语句用于根据指定的列对结果集进行排序。<br><code>DESC</code> - 按照降序对记录进行排序。<br><code>ASC</code> - 按照顺序对记录进行排序。  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Company在表Orders中为字母，则会以字母顺序显示公司名称</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 后面跟上 DESC 则为降序显示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Company以降序显示公司名称，并OrderNumber以顺序显示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company <span class=\"keyword\">DESC</span>, OrderNumber <span class=\"keyword\">ASC</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h3><blockquote>\n<p>IN - 操作符允许我们在 WHERE 子句中规定多个值。<br>IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。<br>语法：<code>SELECT &quot;字段名&quot;FROM &quot;表格名&quot;WHERE &quot;字段名&quot; IN (&#39;值一&#39;, &#39;值二&#39;, ...);</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> LastName <span class=\"keyword\">IN</span> (<span class=\"string\">'Adams'</span>,<span class=\"string\">'Carter'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"NOT\"><a href=\"#NOT\" class=\"headerlink\" title=\"NOT\"></a>NOT</h3><blockquote>\n<p>NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_China <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_USA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 列出 meeting 表中的 pic_url，</span></span><br><span class=\"line\"><span class=\"comment\">-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错</span></span><br><span class=\"line\"><span class=\"comment\">-- 按更新时间排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,pic_url <span class=\"keyword\">FROM</span> meeting <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,number_station <span class=\"keyword\">AS</span> pic_url <span class=\"keyword\">FROM</span> station  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> update_at;</span><br><span class=\"line\"><span class=\"comment\">-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'product'</span> <span class=\"keyword\">AS</span> <span class=\"keyword\">type</span>, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">count</span> <span class=\"keyword\">FROM</span> <span class=\"string\">`products`</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"string\">'comment'</span> <span class=\"keyword\">as</span> <span class=\"keyword\">type</span>, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">count</span> <span class=\"keyword\">FROM</span> <span class=\"string\">`comments`</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">count</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AS\"><a href=\"#AS\" class=\"headerlink\" title=\"AS\"></a>AS</h3><blockquote>\n<p>as - 可理解为：用作、当成，作为；别名<br>一般是重命名列名或者表名。<br>语法：<code>select column_1 as 列1,column_2 as 列2 from table as 表</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Employee <span class=\"keyword\">AS</span> emp</span><br><span class=\"line\"><span class=\"comment\">-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。</span></span><br><span class=\"line\"><span class=\"comment\">-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.</span></span><br><span class=\"line\"><span class=\"comment\">-- 例如 SELECT * FROM emp.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(OrderPrice) <span class=\"keyword\">AS</span> LargestOrderPrice <span class=\"keyword\">FROM</span> Orders</span><br><span class=\"line\"><span class=\"comment\">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示表 users_profile 中的 name 列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> t.name <span class=\"keyword\">from</span> (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> users_profile a) <span class=\"keyword\">AS</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up</span></span><br><span class=\"line\"><span class=\"comment\">-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集只显示mobile、name两列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ua.mobile,up.name <span class=\"keyword\">FROM</span> user_accounts <span class=\"keyword\">as</span> ua <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> users_profile <span class=\"keyword\">as</span> up <span class=\"keyword\">ON</span> ua.id = up.user_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h3><blockquote>\n<p>用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  </p>\n</blockquote>\n<ul>\n<li><code>JOIN</code>: 如果表中有至少一个匹配，则返回行</li>\n<li><code>INNER JOIN</code>:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li>\n<li><code>LEFT JOIN</code>: 即使右表中没有匹配，也从左表返回所有的行</li>\n<li><code>RIGHT JOIN</code>: 即使左表中没有匹配，也从右表返回所有的行</li>\n<li><code>FULL JOIN</code>: 只要其中一个表中存在匹配，就返回行</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Orders</span><br><span class=\"line\"><span class=\"keyword\">ON</span> Persons.Id_P = Orders.Id_P</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Persons.LastName;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL-函数\"><a href=\"#SQL-函数\" class=\"headerlink\" title=\"SQL 函数\"></a>SQL 函数</h3><h3 id=\"COUNT\"><a href=\"#COUNT\" class=\"headerlink\" title=\"COUNT\"></a>COUNT</h3><blockquote>\n<p>COUNT 让我们能够数出在表格中有多少笔资料被选出来。<br>语法：<code>SELECT COUNT(&quot;字段名&quot;) FROM &quot;表格名&quot;;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。</span></span><br><span class=\"line\"><span class=\"comment\">-- \"IS NOT NULL\" 是 \"这个栏位不是空白\" 的意思。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span> (Store_Name) <span class=\"keyword\">FROM</span> Store_Information <span class=\"keyword\">WHERE</span> Store_Name <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"comment\">-- 获取 Persons 表的总数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">AS</span> totals <span class=\"keyword\">FROM</span> Persons;</span><br><span class=\"line\"><span class=\"comment\">-- 获取表 station 字段 user_id 相同的总数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> user_id, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> totals <span class=\"keyword\">from</span> station <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> user_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MAX\"><a href=\"#MAX\" class=\"headerlink\" title=\"MAX\"></a>MAX</h3><blockquote>\n<p>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。<br>语法：<code>SELECT MAX(&quot;字段名&quot;) FROM &quot;表格名&quot;</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(OrderPrice) <span class=\"keyword\">AS</span> LargestOrderPrice <span class=\"keyword\">FROM</span> Orders</span><br></pre></td></tr></table></figure>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>语法：<br>create trigger &lt;触发器名称&gt;<br>{ before | after}             # 之前或者之后出发<br>insert | update | delete      # 指明了激活触发程序的语句的类型<br>on &lt;表名&gt;                     # 操作哪张表<br>for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。<br>&lt;触发器SQL语句&gt;</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> set_userdate <span class=\"keyword\">BEFORE</span> <span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"string\">`message`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> @statu = new.status; <span class=\"comment\">-- 声明复制变量 statu</span></span><br><span class=\"line\">  if @statu = 0 then       <span class=\"comment\">-- 判断 statu 是否等于 0</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> <span class=\"string\">`user_accounts`</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">status</span>=<span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> openid=NEW.openid;</span><br><span class=\"line\">  <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">$</span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 恢复结束符号</span></span><br></pre></td></tr></table></figure>\n<p>OLD和NEW不区分大小写</p>\n<ul>\n<li>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</li>\n<li>OLD 用OLD.col_name来引用更新前的某一行的列</li>\n</ul>\n<h3 id=\"添加索引\"><a href=\"#添加索引\" class=\"headerlink\" title=\"添加索引\"></a>添加索引</h3><h3 id=\"普通索引-INDEX\"><a href=\"#普通索引-INDEX\" class=\"headerlink\" title=\"普通索引(INDEX)\"></a>普通索引(INDEX)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD INDEX 索引名字 ( <code>字段名字</code> )</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- –直接创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> index_user <span class=\"keyword\">ON</span> <span class=\"keyword\">user</span>(title)</span><br><span class=\"line\"><span class=\"comment\">-- –修改表结构的方式添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(<span class=\"keyword\">length</span>))</span><br><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 name字段 添加普通索引(INDEX)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`table`</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (<span class=\"keyword\">name</span>)</span><br><span class=\"line\"><span class=\"comment\">-- –创建表的时候同时创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`table`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT ,</span><br><span class=\"line\">    <span class=\"string\">`title`</span> <span class=\"built_in\">char</span>(<span class=\"number\">255</span>) <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    <span class=\"string\">`content`</span> <span class=\"built_in\">text</span> <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    <span class=\"string\">`time`</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>) <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name (title(<span class=\"keyword\">length</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">-- –删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主键索引-PRIMARY-key\"><a href=\"#主键索引-PRIMARY-key\" class=\"headerlink\" title=\"主键索引(PRIMARY key)\"></a>主键索引(PRIMARY key)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD PRIMARY KEY ( <code>字段名字</code> )</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"唯一索引-UNIQUE\"><a href=\"#唯一索引-UNIQUE\" class=\"headerlink\" title=\"唯一索引(UNIQUE)\"></a>唯一索引(UNIQUE)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD UNIQUE (<code>字段名字</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> (creattime);</span><br></pre></td></tr></table></figure>\n<h3 id=\"全文索引-FULLTEXT\"><a href=\"#全文索引-FULLTEXT\" class=\"headerlink\" title=\"全文索引(FULLTEXT)\"></a>全文索引(FULLTEXT)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD FULLTEXT (<code>字段名字</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> FULLTEXT (description);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加多列索引\"><a href=\"#添加多列索引\" class=\"headerlink\" title=\"添加多列索引\"></a>添加多列索引</h3><blockquote>\n<p>语法：<br>ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> name_city_age (<span class=\"keyword\">name</span>(<span class=\"number\">10</span>),city,age);</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立索引的时机\"><a href=\"#建立索引的时机\" class=\"headerlink\" title=\"建立索引的时机\"></a>建立索引的时机</h3><p>在<code>WHERE</code>和<code>JOIN</code>中出现的列需要建立索引，但也不完全如此：</p>\n<ul>\n<li>MySQL只对<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>使用索引</li>\n<li>某些时候的<code>LIKE</code>也会使用索引。</li>\n<li>在<code>LIKE</code>以通配符%和_开头作查询时，MySQL不会使用索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 此时就需要对city和age建立索引，</span></span><br><span class=\"line\"><span class=\"comment\">-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> t.Name  </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable t <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> mytable m <span class=\"keyword\">ON</span> t.Name=m.username </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> m.age=<span class=\"number\">20</span> <span class=\"keyword\">AND</span> m.city=<span class=\"string\">'上海'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mytable <span class=\"keyword\">WHERE</span> username <span class=\"keyword\">like</span><span class=\"string\">'admin%'</span>; <span class=\"comment\">-- 而下句就不会使用：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mytable WHEREt <span class=\"keyword\">Name</span> <span class=\"keyword\">like</span><span class=\"string\">'%admin'</span>; <span class=\"comment\">-- 因此，在使用LIKE时应注意以上的区别。</span></span><br></pre></td></tr></table></figure>\n<p>索引的注意事项</p>\n<ul>\n<li>索引不会包含有NULL值的列</li>\n<li>使用短索引</li>\n<li>不要在列上进行运算 索引会失效</li>\n</ul>\n<h3 id=\"创建后表的修改\"><a href=\"#创建后表的修改\" class=\"headerlink\" title=\"创建后表的修改\"></a>创建后表的修改</h3><h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a>添加列</h3><blockquote>\n<p>语法：<code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code></p>\n</blockquote>\n<p>示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在表students的最后追加列 address: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> address <span class=\"built_in\">char</span>(<span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 在名为 age 的列后插入列 birthday: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> birthday <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> age;</span><br><span class=\"line\"><span class=\"comment\">-- 在名为 number_people 的列后插入列 weeks: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> <span class=\"string\">`weeks`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">5</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">after</span> <span class=\"string\">`number_people`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改列\"><a href=\"#修改列\" class=\"headerlink\" title=\"修改列\"></a>修改列</h3><blockquote>\n<p>语法：<code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将表 tel 列改名为 telphone: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> tel telphone <span class=\"built_in\">char</span>(<span class=\"number\">13</span>) <span class=\"keyword\">default</span> <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 将 name 列的数据类型改为 char(16): </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> <span class=\"keyword\">name</span> <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">16</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改 COMMENT 前面必须得有类型属性</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> <span class=\"keyword\">name</span> <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">16</span>) <span class=\"keyword\">COMMENT</span> <span class=\"string\">'这里是名字'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改列属性的时候 建议使用modify,不需要重建表</span></span><br><span class=\"line\"><span class=\"comment\">-- change用于修改列名字，这个需要重建表</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> meeting <span class=\"keyword\">modify</span> <span class=\"string\">`weeks`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">\"开放日期 周一到周日：0~6，间隔用英文逗号隔开\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><blockquote>\n<p>语法：<code>alter table 表名 drop 列名称;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表students中的 birthday 列: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">drop</span> birthday;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><blockquote>\n<p>语法：<code>alter table 表名 rename 新表名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 重命名 students 表为 workmates: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">rename</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"清空表数据\"><a href=\"#清空表数据\" class=\"headerlink\" title=\"清空表数据\"></a>清空表数据</h3><blockquote>\n<p>方法一：<code>delete from 表名;</code><br>方法二：<code>truncate from &quot;表名&quot;;</code></p>\n</blockquote>\n<ul>\n<li><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</li>\n<li><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 清空表为 workmates 里面的数据，不删除表。 </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> workmates;</span><br><span class=\"line\"><span class=\"comment\">-- 删除workmates表中的所有数据，且无法恢复</span></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">from</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除整张表\"><a href=\"#删除整张表\" class=\"headerlink\" title=\"删除整张表\"></a>删除整张表</h3><blockquote>\n<p>语法：<code>drop table 表名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 workmates 表: </span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除整个数据库\"><a href=\"#删除整个数据库\" class=\"headerlink\" title=\"删除整个数据库\"></a>删除整个数据库</h3><blockquote>\n<p>语法：<code>drop database 数据库名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 samp_db 数据库: </span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> samp_db;</span><br></pre></td></tr></table></figure>\n<h3 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h3><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>转载自    <a href=\"https://github.com/jaywcjlove/mysql-tutorial\" target=\"_blank\" rel=\"noopener\">mysql-tutorial</a></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>MySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, 如图所示的一个表格：</p>\n<ul>\n<li><code>表头(header)</code>: 每一列的名称;</li>\n<li><code>列(col)</code>: 具有相同数据类型的数据的集合;</li>\n<li><code>行(row)</code>: 每一行用来描述某个人/物的具体信息;</li>\n<li><code>值(value)</code>: 行的具体信息, 每个值必须与该列的数据类型相同;</li>\n<li><code>键(key)</code>: 表中用来识别某个特定的人\\物的方法, 键的值在当前列中具有唯一性。<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 127.0.0.1 -u 用户名 -p</span><br><span class=\"line\">mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> exit # 退出 使用 “quit;” 或 “\\q;” 一样的效果</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> status;  # 显示当前mysql的version的各种信息</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> select version(); # 显示当前mysql的version信息</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span> show global variables like 'port'; # 查看MySQL端口号</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>对于表的操作需要先进入库<code>use 库名;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建一个名为 samp_db 的数据库，数据库字符编码指定为 gbk</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> samp_db <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> samp_db; <span class=\"comment\">-- 删除 库名为samp_db的库</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;        <span class=\"comment\">-- 显示数据库列表。</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> samp_db;     <span class=\"comment\">-- 选择创建的数据库samp_db</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;     <span class=\"comment\">-- 显示samp_db下面所有的表名字</span></span><br><span class=\"line\"><span class=\"keyword\">describe</span> 表名;    <span class=\"comment\">-- 显示数据表的结构</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名; <span class=\"comment\">-- 清空表中记录</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"创建数据库表\"><a href=\"#创建数据库表\" class=\"headerlink\" title=\"创建数据库表\"></a>创建数据库表</h3><blockquote>\n<p>使用 create table 语句可完成对表的创建, create table 的常见形式:<br>语法：create table 表名称(列声明);</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`user_accounts`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user_accounts`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span>             <span class=\"built_in\">int</span>(<span class=\"number\">100</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\">  <span class=\"string\">`password`</span>       <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户密码'</span>,</span><br><span class=\"line\">  <span class=\"string\">`reset_password`</span> <span class=\"built_in\">tinyint</span>(<span class=\"number\">32</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户类型：0－不需要重置密码；1-需要重置密码'</span>,</span><br><span class=\"line\">  <span class=\"string\">`mobile`</span>         <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>)       <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">''</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'手机'</span>,</span><br><span class=\"line\">  <span class=\"string\">`create_at`</span>      <span class=\"built_in\">timestamp</span>(<span class=\"number\">6</span>)      <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>),</span><br><span class=\"line\">  <span class=\"string\">`update_at`</span>      <span class=\"built_in\">timestamp</span>(<span class=\"number\">6</span>)      <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">6</span>),</span><br><span class=\"line\">  <span class=\"comment\">-- 创建唯一索引，不允许重复</span></span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> idx_user_mobile(<span class=\"string\">`mobile`</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br><span class=\"line\"><span class=\"keyword\">COMMENT</span>=<span class=\"string\">'用户表信息'</span>;</span><br></pre></td></tr></table></figure>\n<p>数据类型的属性解释</p>\n<ul>\n<li><code>NULL</code>：数据列可包含NULL值；</li>\n<li><code>NOT NULL</code>：数据列不允许包含NULL值；</li>\n<li><code>DEFAULT</code>：默认值；</li>\n<li><code>PRIMARY</code>：KEY 主键；</li>\n<li><code>AUTO_INCREMENT</code>：自动递增，适用于整数类型；</li>\n<li><code>UNSIGNED</code>：是指数值类型只能为正数；</li>\n<li><code>CHARACTER SET name</code>：指定一个字符集；</li>\n<li><code>COMMENT</code>：对表或者字段说明；</li>\n</ul>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><blockquote>\n<p>SELECT 语句用于从表中选取数据。<br>语法：<code>SELECT 列名称 FROM 表名称</code><br>语法：<code>SELECT * FROM 表名称</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> s.id <span class=\"keyword\">from</span> station s <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">13</span>,<span class=\"number\">14</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从表 Persons 选取 LastName 列的数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> LastName <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">3</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 结果集中会自动去重复数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> Company <span class=\"keyword\">FROM</span> Orders </span><br><span class=\"line\"><span class=\"comment\">-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> p.LastName, p.FirstName, o.OrderNo <span class=\"keyword\">FROM</span> Persons p, Orders o <span class=\"keyword\">WHERE</span> p.Id_P = o.Id_P </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- gbk 和 utf8 中英文混合排序最简单的办法 </span></span><br><span class=\"line\"><span class=\"comment\">-- ci是 case insensitive, 即 “大小写不敏感”</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tag, <span class=\"keyword\">COUNT</span>(tag) <span class=\"keyword\">from</span> news <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> tag <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">convert</span>(tag <span class=\"keyword\">using</span> gbk) <span class=\"keyword\">collate</span> gbk_chinese_ci;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tag, <span class=\"keyword\">COUNT</span>(tag) <span class=\"keyword\">from</span> news <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> tag <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">convert</span>(tag <span class=\"keyword\">using</span> utf8) <span class=\"keyword\">collate</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><blockquote>\n<p>Update 语句用于修改表中的数据。<br>语法：<code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- update语句设置字段值为另一个结果取出来的字段</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> <span class=\"keyword\">name</span> = (<span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user1 <span class=\"keyword\">where</span> user1 .id = <span class=\"number\">1</span> )</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> user2 <span class=\"keyword\">where</span> user2 .name=<span class=\"string\">'小苏'</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"string\">`orders`</span> <span class=\"keyword\">set</span> title=<span class=\"string\">'这里是标题'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><blockquote>\n<p>INSERT INTO 语句用于向表格中插入新的行。<br>语法：<code>INSERT INTO 表名称 VALUES (值1, 值2,....)</code><br>语法：<code>INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Persons (LastName, Address) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'JSLite'</span>, <span class=\"string\">'shanghai'</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 向表 meeting 插入 字段 a=1 和字段 b=2</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> meeting <span class=\"keyword\">SET</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">-- </span></span><br><span class=\"line\"><span class=\"comment\">-- SQL实现将一个表的数据插入到另外一个表的代码</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果只希望导入指定字段，可以用这种方法：</span></span><br><span class=\"line\"><span class=\"comment\">-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders (user_account_id, title) <span class=\"keyword\">SELECT</span> m.user_id, m.title <span class=\"keyword\">FROM</span> meeting m <span class=\"keyword\">where</span> m.id=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`charger`</span> (<span class=\"string\">`id`</span>,<span class=\"string\">`type`</span>,<span class=\"string\">`create_at`</span>,<span class=\"string\">`update_at`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"string\">'2017-05-18 11:06:17'</span>,<span class=\"string\">'2017-05-18 11:06:17'</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">DUPLICATE</span> <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"string\">`id`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`id`</span>), <span class=\"string\">`type`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`type`</span>), <span class=\"string\">`update_at`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"string\">`update_at`</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><blockquote>\n<p>DELETE 语句用于删除表中的行。<br>语法：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在不删除table_name表的情况下删除所有的行，清空表。</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> * <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"comment\">-- 删除 Person表字段 LastName = 'JSLite' </span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Person <span class=\"keyword\">WHERE</span> LastName = <span class=\"string\">'JSLite'</span> </span><br><span class=\"line\"><span class=\"comment\">-- 删除 表meeting id 为2和3的两条数据</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">from</span> meeting <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><blockquote>\n<p>WHERE 子句用于规定选择的标准。<br>语法：<code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从表 Persons 中选出 Year 字段大于 1965 的数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> <span class=\"keyword\">Year</span>&gt;<span class=\"number\">1965</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"AND-和-OR\"><a href=\"#AND-和-OR\" class=\"headerlink\" title=\"AND 和 OR\"></a>AND 和 OR</h3><blockquote>\n<p>AND - 如果第一个条件和第二个条件都成立；<br>OR - 如果第一个条件和第二个条件中只要有一个成立；  </p>\n</blockquote>\n<h3 id=\"AND\"><a href=\"#AND\" class=\"headerlink\" title=\"AND\"></a>AND</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 meeting 表字段 </span></span><br><span class=\"line\"><span class=\"comment\">-- id=2 并且 user_id=5 的数据  和</span></span><br><span class=\"line\"><span class=\"comment\">-- id=3 并且 user_id=6 的数据 </span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">from</span> meeting <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"keyword\">and</span> user_id <span class=\"keyword\">in</span> (<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 AND 来显示所有姓为 \"Carter\" 并且名为 \"Thomas\" 的人：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> FirstName=<span class=\"string\">'Thomas'</span> <span class=\"keyword\">AND</span> LastName=<span class=\"string\">'Carter'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用 OR 来显示所有姓为 \"Carter\" 或者名为 \"Thomas\" 的人：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> firstname=<span class=\"string\">'Thomas'</span> <span class=\"keyword\">OR</span> lastname=<span class=\"string\">'Carter'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><blockquote>\n<p>语句默认按照升序对记录进行排序。<br><code>ORDER BY</code> - 语句用于根据指定的列对结果集进行排序。<br><code>DESC</code> - 按照降序对记录进行排序。<br><code>ASC</code> - 按照顺序对记录进行排序。  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Company在表Orders中为字母，则会以字母顺序显示公司名称</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 后面跟上 DESC 则为降序显示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Company以降序显示公司名称，并OrderNumber以顺序显示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Company, OrderNumber <span class=\"keyword\">FROM</span> Orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Company <span class=\"keyword\">DESC</span>, OrderNumber <span class=\"keyword\">ASC</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h3><blockquote>\n<p>IN - 操作符允许我们在 WHERE 子句中规定多个值。<br>IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。<br>语法：<code>SELECT &quot;字段名&quot;FROM &quot;表格名&quot;WHERE &quot;字段名&quot; IN (&#39;值一&#39;, &#39;值二&#39;, ...);</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">WHERE</span> LastName <span class=\"keyword\">IN</span> (<span class=\"string\">'Adams'</span>,<span class=\"string\">'Carter'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"NOT\"><a href=\"#NOT\" class=\"headerlink\" title=\"NOT\"></a>NOT</h3><blockquote>\n<p>NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_China <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_USA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 列出 meeting 表中的 pic_url，</span></span><br><span class=\"line\"><span class=\"comment\">-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错</span></span><br><span class=\"line\"><span class=\"comment\">-- 按更新时间排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,pic_url <span class=\"keyword\">FROM</span> meeting <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,number_station <span class=\"keyword\">AS</span> pic_url <span class=\"keyword\">FROM</span> station  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> update_at;</span><br><span class=\"line\"><span class=\"comment\">-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'product'</span> <span class=\"keyword\">AS</span> <span class=\"keyword\">type</span>, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">count</span> <span class=\"keyword\">FROM</span> <span class=\"string\">`products`</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"string\">'comment'</span> <span class=\"keyword\">as</span> <span class=\"keyword\">type</span>, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">count</span> <span class=\"keyword\">FROM</span> <span class=\"string\">`comments`</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">count</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AS\"><a href=\"#AS\" class=\"headerlink\" title=\"AS\"></a>AS</h3><blockquote>\n<p>as - 可理解为：用作、当成，作为；别名<br>一般是重命名列名或者表名。<br>语法：<code>select column_1 as 列1,column_2 as 列2 from table as 表</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Employee <span class=\"keyword\">AS</span> emp</span><br><span class=\"line\"><span class=\"comment\">-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。</span></span><br><span class=\"line\"><span class=\"comment\">-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.</span></span><br><span class=\"line\"><span class=\"comment\">-- 例如 SELECT * FROM emp.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(OrderPrice) <span class=\"keyword\">AS</span> LargestOrderPrice <span class=\"keyword\">FROM</span> Orders</span><br><span class=\"line\"><span class=\"comment\">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示表 users_profile 中的 name 列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> t.name <span class=\"keyword\">from</span> (<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> users_profile a) <span class=\"keyword\">AS</span> t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up</span></span><br><span class=\"line\"><span class=\"comment\">-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集只显示mobile、name两列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ua.mobile,up.name <span class=\"keyword\">FROM</span> user_accounts <span class=\"keyword\">as</span> ua <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> users_profile <span class=\"keyword\">as</span> up <span class=\"keyword\">ON</span> ua.id = up.user_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h3><blockquote>\n<p>用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  </p>\n</blockquote>\n<ul>\n<li><code>JOIN</code>: 如果表中有至少一个匹配，则返回行</li>\n<li><code>INNER JOIN</code>:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li>\n<li><code>LEFT JOIN</code>: 即使右表中没有匹配，也从左表返回所有的行</li>\n<li><code>RIGHT JOIN</code>: 即使左表中没有匹配，也从右表返回所有的行</li>\n<li><code>FULL JOIN</code>: 只要其中一个表中存在匹配，就返回行</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Orders</span><br><span class=\"line\"><span class=\"keyword\">ON</span> Persons.Id_P = Orders.Id_P</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Persons.LastName;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL-函数\"><a href=\"#SQL-函数\" class=\"headerlink\" title=\"SQL 函数\"></a>SQL 函数</h3><h3 id=\"COUNT\"><a href=\"#COUNT\" class=\"headerlink\" title=\"COUNT\"></a>COUNT</h3><blockquote>\n<p>COUNT 让我们能够数出在表格中有多少笔资料被选出来。<br>语法：<code>SELECT COUNT(&quot;字段名&quot;) FROM &quot;表格名&quot;;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。</span></span><br><span class=\"line\"><span class=\"comment\">-- \"IS NOT NULL\" 是 \"这个栏位不是空白\" 的意思。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span> (Store_Name) <span class=\"keyword\">FROM</span> Store_Information <span class=\"keyword\">WHERE</span> Store_Name <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"comment\">-- 获取 Persons 表的总数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">AS</span> totals <span class=\"keyword\">FROM</span> Persons;</span><br><span class=\"line\"><span class=\"comment\">-- 获取表 station 字段 user_id 相同的总数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> user_id, <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> totals <span class=\"keyword\">from</span> station <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> user_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MAX\"><a href=\"#MAX\" class=\"headerlink\" title=\"MAX\"></a>MAX</h3><blockquote>\n<p>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。<br>语法：<code>SELECT MAX(&quot;字段名&quot;) FROM &quot;表格名&quot;</code>  </p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(OrderPrice) <span class=\"keyword\">AS</span> LargestOrderPrice <span class=\"keyword\">FROM</span> Orders</span><br></pre></td></tr></table></figure>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>语法：<br>create trigger &lt;触发器名称&gt;<br>{ before | after}             # 之前或者之后出发<br>insert | update | delete      # 指明了激活触发程序的语句的类型<br>on &lt;表名&gt;                     # 操作哪张表<br>for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。<br>&lt;触发器SQL语句&gt;</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> set_userdate <span class=\"keyword\">BEFORE</span> <span class=\"keyword\">INSERT</span> </span><br><span class=\"line\"><span class=\"keyword\">on</span> <span class=\"string\">`message`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> @statu = new.status; <span class=\"comment\">-- 声明复制变量 statu</span></span><br><span class=\"line\">  if @statu = 0 then       <span class=\"comment\">-- 判断 statu 是否等于 0</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> <span class=\"string\">`user_accounts`</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">status</span>=<span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> openid=NEW.openid;</span><br><span class=\"line\">  <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">$</span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 恢复结束符号</span></span><br></pre></td></tr></table></figure>\n<p>OLD和NEW不区分大小写</p>\n<ul>\n<li>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</li>\n<li>OLD 用OLD.col_name来引用更新前的某一行的列</li>\n</ul>\n<h3 id=\"添加索引\"><a href=\"#添加索引\" class=\"headerlink\" title=\"添加索引\"></a>添加索引</h3><h3 id=\"普通索引-INDEX\"><a href=\"#普通索引-INDEX\" class=\"headerlink\" title=\"普通索引(INDEX)\"></a>普通索引(INDEX)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD INDEX 索引名字 ( <code>字段名字</code> )</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- –直接创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> index_user <span class=\"keyword\">ON</span> <span class=\"keyword\">user</span>(title)</span><br><span class=\"line\"><span class=\"comment\">-- –修改表结构的方式添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> (<span class=\"keyword\">column</span>(<span class=\"keyword\">length</span>))</span><br><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 name字段 添加普通索引(INDEX)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`table`</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (<span class=\"keyword\">name</span>)</span><br><span class=\"line\"><span class=\"comment\">-- –创建表的时候同时创建索引</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`table`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT ,</span><br><span class=\"line\">    <span class=\"string\">`title`</span> <span class=\"built_in\">char</span>(<span class=\"number\">255</span>) <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    <span class=\"string\">`content`</span> <span class=\"built_in\">text</span> <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    <span class=\"string\">`time`</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>) <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> ,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name (title(<span class=\"keyword\">length</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">-- –删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主键索引-PRIMARY-key\"><a href=\"#主键索引-PRIMARY-key\" class=\"headerlink\" title=\"主键索引(PRIMARY key)\"></a>主键索引(PRIMARY key)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD PRIMARY KEY ( <code>字段名字</code> )</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"唯一索引-UNIQUE\"><a href=\"#唯一索引-UNIQUE\" class=\"headerlink\" title=\"唯一索引(UNIQUE)\"></a>唯一索引(UNIQUE)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD UNIQUE (<code>字段名字</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> (creattime);</span><br></pre></td></tr></table></figure>\n<h3 id=\"全文索引-FULLTEXT\"><a href=\"#全文索引-FULLTEXT\" class=\"headerlink\" title=\"全文索引(FULLTEXT)\"></a>全文索引(FULLTEXT)</h3><blockquote>\n<p>语法：ALTER TABLE <code>表名字</code> ADD FULLTEXT (<code>字段名字</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">ADD</span> FULLTEXT (description);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加多列索引\"><a href=\"#添加多列索引\" class=\"headerlink\" title=\"添加多列索引\"></a>添加多列索引</h3><blockquote>\n<p>语法：<br>ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code>)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> name_city_age (<span class=\"keyword\">name</span>(<span class=\"number\">10</span>),city,age);</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立索引的时机\"><a href=\"#建立索引的时机\" class=\"headerlink\" title=\"建立索引的时机\"></a>建立索引的时机</h3><p>在<code>WHERE</code>和<code>JOIN</code>中出现的列需要建立索引，但也不完全如此：</p>\n<ul>\n<li>MySQL只对<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>使用索引</li>\n<li>某些时候的<code>LIKE</code>也会使用索引。</li>\n<li>在<code>LIKE</code>以通配符%和_开头作查询时，MySQL不会使用索引。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 此时就需要对city和age建立索引，</span></span><br><span class=\"line\"><span class=\"comment\">-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> t.Name  </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable t <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> mytable m <span class=\"keyword\">ON</span> t.Name=m.username </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> m.age=<span class=\"number\">20</span> <span class=\"keyword\">AND</span> m.city=<span class=\"string\">'上海'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mytable <span class=\"keyword\">WHERE</span> username <span class=\"keyword\">like</span><span class=\"string\">'admin%'</span>; <span class=\"comment\">-- 而下句就不会使用：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mytable WHEREt <span class=\"keyword\">Name</span> <span class=\"keyword\">like</span><span class=\"string\">'%admin'</span>; <span class=\"comment\">-- 因此，在使用LIKE时应注意以上的区别。</span></span><br></pre></td></tr></table></figure>\n<p>索引的注意事项</p>\n<ul>\n<li>索引不会包含有NULL值的列</li>\n<li>使用短索引</li>\n<li>不要在列上进行运算 索引会失效</li>\n</ul>\n<h3 id=\"创建后表的修改\"><a href=\"#创建后表的修改\" class=\"headerlink\" title=\"创建后表的修改\"></a>创建后表的修改</h3><h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a>添加列</h3><blockquote>\n<p>语法：<code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code></p>\n</blockquote>\n<p>示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在表students的最后追加列 address: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> address <span class=\"built_in\">char</span>(<span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 在名为 age 的列后插入列 birthday: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> birthday <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> age;</span><br><span class=\"line\"><span class=\"comment\">-- 在名为 number_people 的列后插入列 weeks: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> <span class=\"string\">`weeks`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">5</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">after</span> <span class=\"string\">`number_people`</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改列\"><a href=\"#修改列\" class=\"headerlink\" title=\"修改列\"></a>修改列</h3><blockquote>\n<p>语法：<code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将表 tel 列改名为 telphone: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> tel telphone <span class=\"built_in\">char</span>(<span class=\"number\">13</span>) <span class=\"keyword\">default</span> <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 将 name 列的数据类型改为 char(16): </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> <span class=\"keyword\">name</span> <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">16</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改 COMMENT 前面必须得有类型属性</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">change</span> <span class=\"keyword\">name</span> <span class=\"keyword\">name</span> <span class=\"built_in\">char</span>(<span class=\"number\">16</span>) <span class=\"keyword\">COMMENT</span> <span class=\"string\">'这里是名字'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 修改列属性的时候 建议使用modify,不需要重建表</span></span><br><span class=\"line\"><span class=\"comment\">-- change用于修改列名字，这个需要重建表</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> meeting <span class=\"keyword\">modify</span> <span class=\"string\">`weeks`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">\"开放日期 周一到周日：0~6，间隔用英文逗号隔开\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><blockquote>\n<p>语法：<code>alter table 表名 drop 列名称;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表students中的 birthday 列: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">drop</span> birthday;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><blockquote>\n<p>语法：<code>alter table 表名 rename 新表名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 重命名 students 表为 workmates: </span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">rename</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"清空表数据\"><a href=\"#清空表数据\" class=\"headerlink\" title=\"清空表数据\"></a>清空表数据</h3><blockquote>\n<p>方法一：<code>delete from 表名;</code><br>方法二：<code>truncate from &quot;表名&quot;;</code></p>\n</blockquote>\n<ul>\n<li><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</li>\n<li><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 清空表为 workmates 里面的数据，不删除表。 </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> workmates;</span><br><span class=\"line\"><span class=\"comment\">-- 删除workmates表中的所有数据，且无法恢复</span></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">from</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除整张表\"><a href=\"#删除整张表\" class=\"headerlink\" title=\"删除整张表\"></a>删除整张表</h3><blockquote>\n<p>语法：<code>drop table 表名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 workmates 表: </span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> workmates;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除整个数据库\"><a href=\"#删除整个数据库\" class=\"headerlink\" title=\"删除整个数据库\"></a>删除整个数据库</h3><blockquote>\n<p>语法：<code>drop database 数据库名;</code></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除 samp_db 数据库: </span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> samp_db;</span><br></pre></td></tr></table></figure>\n<h3 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h3><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"Koa源码系列之koa-compose","date":"2019-12-11T08:39:19.000Z","_content":"","source":"_posts/Koa源码系列之koa-compose.md","raw":"---\ntitle: Koa源码系列之koa-compose\ndate: 2019-12-11 16:39:19\ntags:\n---\n","slug":"Koa源码系列之koa-compose","published":1,"updated":"2019-12-11T08:39:19.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns99000s59x32dh00tf1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"canvas仿微信红包照片","date":"2017-06-28T13:27:33.000Z","_content":"\n# canvas仿微信红包照片 By wclimb\n\n## HTML\n\n```\n<canvas id=\"cav\" width=\"500\" height=\"500\"></canvas>\n\n```\n\n## CSS\n\n> 设置canvas的背景图\n\n```css\ncanvas{\n    background:url(https://b-ssl.duitang.com/uploads/item/201501/22/20150122203239_Cfr58.thumb.700_0.jpeg) no-repeat;\n    background-size:100% 100%;\n}\n\n```\n\n## JS\t\n\n\n```js\nvar canvas = document.querySelector(\"#cav\")\nvar context = canvas.getContext(\"2d\");\n\nvar randomX = Math.floor(Math.random()*440+30)\nvar randomY = Math.floor(Math.random()*440+30)\n\ncontext.globalAlpha = 0.96;\ncontext.fillStyle = '#333'\ncontext.rect(0,0,canvas.width,canvas.height);\ncontext.fill();\n\ncontext.save()\ncontext.beginPath()\ncontext.arc(randomX,randomY,30,0,Math.PI*2,false);\ncontext.clip();\ncontext.clearRect(0,0,canvas.width,canvas.height)\ncontext.restore();\n\nvar num = 30;\nvar time = null;\ndocument.body.onclick = function(){\n    function circle(){\n        num += 5\n        context.save()\n        context.beginPath()\n        context.arc(randomX,randomY,num,0,Math.PI*2,false);\n        context.clip();\n        context.clearRect(0,0,canvas.width,canvas.height)\n        context.restore();\n        console.log(num)\n\n        if (num >= 677){\n        \tclearInterval(timer)\n        }\n    }\n    timer = setInterval(circle,10)\n}\n```\n<!-- more -->\n\n## 解析\n\n> 随机出现圆心的位置，因为canvas为500*500 圆心为30 所以圆心的范围为 X(30,470) Y(470,30)\n\n\n\n```js\nvar randomX = Math.floor(Math.random()*440+30)\nvar randomY = Math.floor(Math.random()*440+30)\n```\n\n> 绘制矩形 透明度为0.96 填充颜色#333 宽高为canvas的宽高 最后用fill填充\n\n```js\ncontext.globalAlpha = 0.96;\ncontext.fillStyle = '#333'\ncontext.rect(0,0,canvas.width,canvas.height);\ncontext.fill();\n```\n\n> 初始化圆心的位置，用arc绘制圆，默认半径为30，用clip剪切，只有被剪切区域内是可见的\n\n```js\ncontext.save()\ncontext.beginPath()\ncontext.arc(randomX,randomY,30,0,Math.PI*2,false);\ncontext.clip();\ncontext.clearRect(0,0,canvas.width,canvas.height)\ncontext.restore();\n```\n\n> 点击body的时候，设置定时器，让圆的半径每隔10毫秒增加5，当num半径大于677关闭定时器，677为canvas对角的长度\n\n\n```js\ndocument.body.onclick = function(){}\n```\n\n\n\n## 效果预览\n\n![img](/img/canvas6.gif)","source":"_posts/canvas微信红包照片.md","raw":"---\ntitle: canvas仿微信红包照片\ndate: 2017-06-28 21:27:33\ntags:\n\n- canvas\n- 原创\n\ncategories: [javascript,canvas]\n---\n\n# canvas仿微信红包照片 By wclimb\n\n## HTML\n\n```\n<canvas id=\"cav\" width=\"500\" height=\"500\"></canvas>\n\n```\n\n## CSS\n\n> 设置canvas的背景图\n\n```css\ncanvas{\n    background:url(https://b-ssl.duitang.com/uploads/item/201501/22/20150122203239_Cfr58.thumb.700_0.jpeg) no-repeat;\n    background-size:100% 100%;\n}\n\n```\n\n## JS\t\n\n\n```js\nvar canvas = document.querySelector(\"#cav\")\nvar context = canvas.getContext(\"2d\");\n\nvar randomX = Math.floor(Math.random()*440+30)\nvar randomY = Math.floor(Math.random()*440+30)\n\ncontext.globalAlpha = 0.96;\ncontext.fillStyle = '#333'\ncontext.rect(0,0,canvas.width,canvas.height);\ncontext.fill();\n\ncontext.save()\ncontext.beginPath()\ncontext.arc(randomX,randomY,30,0,Math.PI*2,false);\ncontext.clip();\ncontext.clearRect(0,0,canvas.width,canvas.height)\ncontext.restore();\n\nvar num = 30;\nvar time = null;\ndocument.body.onclick = function(){\n    function circle(){\n        num += 5\n        context.save()\n        context.beginPath()\n        context.arc(randomX,randomY,num,0,Math.PI*2,false);\n        context.clip();\n        context.clearRect(0,0,canvas.width,canvas.height)\n        context.restore();\n        console.log(num)\n\n        if (num >= 677){\n        \tclearInterval(timer)\n        }\n    }\n    timer = setInterval(circle,10)\n}\n```\n<!-- more -->\n\n## 解析\n\n> 随机出现圆心的位置，因为canvas为500*500 圆心为30 所以圆心的范围为 X(30,470) Y(470,30)\n\n\n\n```js\nvar randomX = Math.floor(Math.random()*440+30)\nvar randomY = Math.floor(Math.random()*440+30)\n```\n\n> 绘制矩形 透明度为0.96 填充颜色#333 宽高为canvas的宽高 最后用fill填充\n\n```js\ncontext.globalAlpha = 0.96;\ncontext.fillStyle = '#333'\ncontext.rect(0,0,canvas.width,canvas.height);\ncontext.fill();\n```\n\n> 初始化圆心的位置，用arc绘制圆，默认半径为30，用clip剪切，只有被剪切区域内是可见的\n\n```js\ncontext.save()\ncontext.beginPath()\ncontext.arc(randomX,randomY,30,0,Math.PI*2,false);\ncontext.clip();\ncontext.clearRect(0,0,canvas.width,canvas.height)\ncontext.restore();\n```\n\n> 点击body的时候，设置定时器，让圆的半径每隔10毫秒增加5，当num半径大于677关闭定时器，677为canvas对角的长度\n\n\n```js\ndocument.body.onclick = function(){}\n```\n\n\n\n## 效果预览\n\n![img](/img/canvas6.gif)","slug":"canvas微信红包照片","published":1,"updated":"2019-06-06T01:06:26.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9a000u59x37myjodgt","content":"<h1 id=\"canvas仿微信红包照片-By-wclimb\"><a href=\"#canvas仿微信红包照片-By-wclimb\" class=\"headerlink\" title=\"canvas仿微信红包照片 By wclimb\"></a>canvas仿微信红包照片 By wclimb</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;cav&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><blockquote>\n<p>设置canvas的背景图</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">canvas</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(https://b-ssl.duitang.com/uploads/item/201501/22/20150122203239_Cfr58.thumb.700_0.jpeg) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#cav\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> randomX = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomY = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.globalAlpha = <span class=\"number\">0.96</span>;</span><br><span class=\"line\">context.fillStyle = <span class=\"string\">'#333'</span></span><br><span class=\"line\">context.rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">context.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">context.save()</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.arc(randomX,randomY,<span class=\"number\">30</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">context.clip();</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">context.restore();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        num += <span class=\"number\">5</span></span><br><span class=\"line\">        context.save()</span><br><span class=\"line\">        context.beginPath()</span><br><span class=\"line\">        context.arc(randomX,randomY,num,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        context.clip();</span><br><span class=\"line\">        context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">        context.restore();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">677</span>)&#123;</span><br><span class=\"line\">        \tclearInterval(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setInterval(circle,<span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><blockquote>\n<p>随机出现圆心的位置，因为canvas为500*500 圆心为30 所以圆心的范围为 X(30,470) Y(470,30)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> randomX = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomY = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绘制矩形 透明度为0.96 填充颜色#333 宽高为canvas的宽高 最后用fill填充</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.globalAlpha = <span class=\"number\">0.96</span>;</span><br><span class=\"line\">context.fillStyle = <span class=\"string\">'#333'</span></span><br><span class=\"line\">context.rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">context.fill();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化圆心的位置，用arc绘制圆，默认半径为30，用clip剪切，只有被剪切区域内是可见的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.save()</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.arc(randomX,randomY,<span class=\"number\">30</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">context.clip();</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">context.restore();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>点击body的时候，设置定时器，让圆的半径每隔10毫秒增加5，当num半径大于677关闭定时器，677为canvas对角的长度</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><img src=\"/img/canvas6.gif\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"canvas仿微信红包照片-By-wclimb\"><a href=\"#canvas仿微信红包照片-By-wclimb\" class=\"headerlink\" title=\"canvas仿微信红包照片 By wclimb\"></a>canvas仿微信红包照片 By wclimb</h1><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;cav&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><blockquote>\n<p>设置canvas的背景图</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">canvas</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(https://b-ssl.duitang.com/uploads/item/201501/22/20150122203239_Cfr58.thumb.700_0.jpeg) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#cav\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> randomX = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomY = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.globalAlpha = <span class=\"number\">0.96</span>;</span><br><span class=\"line\">context.fillStyle = <span class=\"string\">'#333'</span></span><br><span class=\"line\">context.rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">context.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">context.save()</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.arc(randomX,randomY,<span class=\"number\">30</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">context.clip();</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">context.restore();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        num += <span class=\"number\">5</span></span><br><span class=\"line\">        context.save()</span><br><span class=\"line\">        context.beginPath()</span><br><span class=\"line\">        context.arc(randomX,randomY,num,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        context.clip();</span><br><span class=\"line\">        context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">        context.restore();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">677</span>)&#123;</span><br><span class=\"line\">        \tclearInterval(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setInterval(circle,<span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><blockquote>\n<p>随机出现圆心的位置，因为canvas为500*500 圆心为30 所以圆心的范围为 X(30,470) Y(470,30)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> randomX = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomY = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">440</span>+<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绘制矩形 透明度为0.96 填充颜色#333 宽高为canvas的宽高 最后用fill填充</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.globalAlpha = <span class=\"number\">0.96</span>;</span><br><span class=\"line\">context.fillStyle = <span class=\"string\">'#333'</span></span><br><span class=\"line\">context.rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">context.fill();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化圆心的位置，用arc绘制圆，默认半径为30，用clip剪切，只有被剪切区域内是可见的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.save()</span><br><span class=\"line\">context.beginPath()</span><br><span class=\"line\">context.arc(randomX,randomY,<span class=\"number\">30</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">context.clip();</span><br><span class=\"line\">context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">context.restore();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>点击body的时候，设置定时器，让圆的半径每隔10毫秒增加5，当num半径大于677关闭定时器，677为canvas对角的长度</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><img src=\"/img/canvas6.gif\" alt=\"img\"></p>"},{"title":"gulp基础教程","date":"2017-06-27T07:49:53.000Z","_content":"\n## 入门指南--引用gulp官网示例 \n\n> 全局安装 gulp：\n\n```js\n$ npm install --global gulp\n```\n> 作为项目的开发依赖（devDependencies）安装：\n\n```js\n$ npm install --save-dev gulp\n\n```\n\n> 在项目根目录下创建一个名为 gulpfile.js 的文件：\n\n<!-- more -->\n\n```js\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n\n```\n\n> 运行 gulp\n\n```\n$ gulp  //默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。\n\n```\n\n至此，一个简单的gulp已经完成，接下来让我们来完善部分功能\n\n##  gulp功能完善\n\n### 生成package.json文件\n\n```\n$ npm init //一直回车，有需要的可以设置\n```\n\n### 安装所需包\n\n> 使用淘宝镜像\n\n```js\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n示例 $ cnpm install [name]\n\n```\n接着\n```js\n$ cnpm i browser-sync gulp gulp-clean-css gulp-imagemin gulp-rename  gulp-sass gulp-uglify gulp.spritesmith gulp-autoprefixer --save\n```\n### 新建gulpfile.js文件\n\n添加\n```js\nvar gulp         = require('gulp'); \nvar browserSync  = require('browser-sync').create(); //通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新\nvar sass         = require('gulp-sass'); //sass转css\nvar reload       = browserSync.reload; \nvar minifyCSS    = require('gulp-clean-css')  //css压缩\nvar uglify       = require('gulp-uglify') //js压缩\nvar imagemin     = require('gulp-imagemin') //图片压缩\nvar rename       = require('gulp-rename') //文件重命名\nvar autoprefixer = require('gulp-autoprefixer') //自动添加前缀\n\n```\n\n\n### 设置默认文件地址\n\n```js\ncode为文件夹，里面存放html css js文件\nvar src = {\n    scss: 'code/scss/*.scss',\n    css:  'code/css/*.css',\n    html: 'code/*.html',\n    js:   'code/js/*.js',\n    images: 'code/images/*.{png,jpg,gif,ico}'\n};\n\n```\n\n### gulp.task(name[, deps], fn)  \n\n```js\nname: 任务的名字\ndeps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。\nfn: 该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：gulp.src().pipe(someplugin())。\n\n// 静态服务器 + 监听 scss/html 文件\n gulp.task('serve', ['sass'], function() {\n    browserSync.init({\n        server: \"./code\"\n    });\n\n    gulp.watch(src.scss, ['sass']);\n    gulp.watch(src.css, ['css']);\n    gulp.watch(src.images, ['images'])\n    gulp.watch(src.js, ['js']);\n    gulp.watch(src.html).on('change', reload);\n\n});\n\n```\n###  scss编译后的css将注入到浏览器里实现更新\n\n```js\ngulp.task('sass', function() {\n    return gulp.src(src.scss)\n        .pipe(sass())\n        .pipe(minifyCSS({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 雪碧图（有需要可以尝试）\n\n```js\nvar spritesmith = require('gulp.spritesmith');\n \n gulp.task('sprite', function () {\n      return gulp.src('code/images/*.png')\n         .pipe(spritesmith({\n             imgName:'images/sprite20161010.png',  //保存合并后图片的地址\n             cssName:'css/sprite.css',   //保存合并后对于css样式的地址\n             padding:20,\n             algorithm:'binary-tree',\n         }))\n         .pipe(gulp.dest('code/scss'));\n });\n\n```\n\n### 监听css文件\n\n```js\ngulp.task('css', function() {\n    return gulp.src(src.css)\n        .pipe(minifyCSS())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 监听js文件\n\n```js\ngulp.task('js', function() {\n    // 1. 找到文件\n    return  gulp.src(src.js)\n        //2. 压缩文件\n        .pipe(uglify())\n        .pipe(rename({suffix: '.min'}))\n        //3. 另存压缩后的文件\n        .pipe(gulp.dest('code/dest'))\n        .pipe(reload({stream: true}));\n})\n\n\n```\n### 压缩图片任务\n\n```js\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n        // 1. 找到图片\n        gulp.src(src.images)\n        // 2. 压缩图片\n        .pipe($.imagemin())\n        // 3. 另存图片\n        .pipe(gulp.dest('images'))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 最后控制台输入gulp执行\n\n```js\ngulp.task('default', ['serve']);\n\n```\n---\n\n如果觉得帮助到了你，欢迎star -> https://github.com/wclimb/wclimb.github.io\n\n---\n\n## 完整代码\n\n\n### 文件目录\n\n```\n-code\n    -imgage\n       1.png\n    -css\n       default.css\n    -scss\n       default.scss\n    -js\n       default.js\n    index.html\ngulpfile.js\npackage.json\n\n```\n### package.json\n\n```js\n{\n  \"name\": \"gulp-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Gulp & SASS\",\n  \"main\": \"gulpfile.js\",\n  \"scripts\": {\n    \"start\": \"gulp\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"browser-sync\": \"^2.2.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean-css\": \"^3.0.3\",\n    \"gulp-imagemin\": \"^3.1.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^3.1.0\",\n    \"gulp-uglify\": \"^2.0.1\",\n    \"gulp.spritesmith\": \"^6.4.0\",\n    \"gulp-autoprefixer\": \"^4.0.0\"\n  },\n  \"dependencies\": {\n    \n  }\n}\n\n```\n\n### gulpfile.js\n\n```js\nvar gulp         = require('gulp'); \nvar browserSync  = require('browser-sync').create(); //通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新\nvar sass         = require('gulp-sass'); //sass转css\nvar reload       = browserSync.reload; \nvar minifyCSS    = require('gulp-clean-css')  //css压缩\nvar uglify       = require('gulp-uglify') //js压缩\nvar imagemin     = require('gulp-imagemin') //图片压缩\nvar rename       = require('gulp-rename') //文件重命名\nvar autoprefixer = require('gulp-autoprefixer') //自动添加前缀\n\n\nvar src = {\n    scss: 'code/scss/*.scss',\n    css:  'code/css/*.css',\n    html: 'code/*.html',\n    js:   'code/js/*.js',\n    images: 'code/images/*.{png,jpg,gif,ico}'\n};\n\n// 静态服务器 + 监听 scss/html 文件\n gulp.task('serve', ['sass'], function() {\n    browserSync.init({\n        server: \"./code\"\n    });\n\n    gulp.watch(src.scss, ['sass']);\n    gulp.watch(src.css, ['css']);\n    gulp.watch(src.images, ['images'])\n    gulp.watch(src.js, ['js']);\n    gulp.watch(src.html).on('change', reload);\n\n});\n\n\n// scss编译后的css将注入到浏览器里实现更新\ngulp.task('sass', function() {\n    return gulp.src(src.scss)\n        .pipe(sass())\n        .pipe(minifyCSS({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\")) //重新输出数据到某个文件夹，如果没有就会自动创建\n        .pipe(reload({stream: true}));\n});\n\n\n// 雪碧图（有需要可以尝试）\n//var spritesmith = require('gulp.spritesmith');\n \n// gulp.task('sprite', function () {\n//     return gulp.src('code/images/*.png')\n//         .pipe(spritesmith({\n//             imgName:'images/sprite20161010.png',  //保存合并后图片的地址\n//             cssName:'css/sprite.css',   //保存合并后对于css样式的地址\n//             padding:20,\n//             algorithm:'binary-tree',\n//         }))\n//         .pipe(gulp.dest('code/scss'));\n// });\n\n\ngulp.task('css', function() {\n    return gulp.src(src.css)\n        .pipe(minifyCSS())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n\ngulp.task('js', function() {\n    // 1. 找到文件\n    return  gulp.src(src.js)\n        //2. 压缩文件\n        .pipe(uglify())\n        .pipe(rename({suffix: '.min'}))\n        //3. 另存压缩后的文件\n        .pipe(gulp.dest('code/dest'))\n        .pipe(reload({stream: true}));\n})\n\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n        // 1. 找到图片\n        gulp.src(src.images)\n        // 2. 压缩图片\n        .pipe($.imagemin())\n        // 3. 另存图片\n        .pipe(gulp.dest('images'))\n        .pipe(reload({stream: true}));\n});\n\n\ngulp.task('default', ['serve']);\n\n```","source":"_posts/gulp.md","raw":"---\ntitle: gulp基础教程\ndate: 2017-06-27 15:49:53\ntags:\n\n- gulp\n- 原创\n\ncategories: [javascript,gulp]\n\n---\n\n## 入门指南--引用gulp官网示例 \n\n> 全局安装 gulp：\n\n```js\n$ npm install --global gulp\n```\n> 作为项目的开发依赖（devDependencies）安装：\n\n```js\n$ npm install --save-dev gulp\n\n```\n\n> 在项目根目录下创建一个名为 gulpfile.js 的文件：\n\n<!-- more -->\n\n```js\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n\n```\n\n> 运行 gulp\n\n```\n$ gulp  //默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。\n\n```\n\n至此，一个简单的gulp已经完成，接下来让我们来完善部分功能\n\n##  gulp功能完善\n\n### 生成package.json文件\n\n```\n$ npm init //一直回车，有需要的可以设置\n```\n\n### 安装所需包\n\n> 使用淘宝镜像\n\n```js\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n示例 $ cnpm install [name]\n\n```\n接着\n```js\n$ cnpm i browser-sync gulp gulp-clean-css gulp-imagemin gulp-rename  gulp-sass gulp-uglify gulp.spritesmith gulp-autoprefixer --save\n```\n### 新建gulpfile.js文件\n\n添加\n```js\nvar gulp         = require('gulp'); \nvar browserSync  = require('browser-sync').create(); //通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新\nvar sass         = require('gulp-sass'); //sass转css\nvar reload       = browserSync.reload; \nvar minifyCSS    = require('gulp-clean-css')  //css压缩\nvar uglify       = require('gulp-uglify') //js压缩\nvar imagemin     = require('gulp-imagemin') //图片压缩\nvar rename       = require('gulp-rename') //文件重命名\nvar autoprefixer = require('gulp-autoprefixer') //自动添加前缀\n\n```\n\n\n### 设置默认文件地址\n\n```js\ncode为文件夹，里面存放html css js文件\nvar src = {\n    scss: 'code/scss/*.scss',\n    css:  'code/css/*.css',\n    html: 'code/*.html',\n    js:   'code/js/*.js',\n    images: 'code/images/*.{png,jpg,gif,ico}'\n};\n\n```\n\n### gulp.task(name[, deps], fn)  \n\n```js\nname: 任务的名字\ndeps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。\nfn: 该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：gulp.src().pipe(someplugin())。\n\n// 静态服务器 + 监听 scss/html 文件\n gulp.task('serve', ['sass'], function() {\n    browserSync.init({\n        server: \"./code\"\n    });\n\n    gulp.watch(src.scss, ['sass']);\n    gulp.watch(src.css, ['css']);\n    gulp.watch(src.images, ['images'])\n    gulp.watch(src.js, ['js']);\n    gulp.watch(src.html).on('change', reload);\n\n});\n\n```\n###  scss编译后的css将注入到浏览器里实现更新\n\n```js\ngulp.task('sass', function() {\n    return gulp.src(src.scss)\n        .pipe(sass())\n        .pipe(minifyCSS({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 雪碧图（有需要可以尝试）\n\n```js\nvar spritesmith = require('gulp.spritesmith');\n \n gulp.task('sprite', function () {\n      return gulp.src('code/images/*.png')\n         .pipe(spritesmith({\n             imgName:'images/sprite20161010.png',  //保存合并后图片的地址\n             cssName:'css/sprite.css',   //保存合并后对于css样式的地址\n             padding:20,\n             algorithm:'binary-tree',\n         }))\n         .pipe(gulp.dest('code/scss'));\n });\n\n```\n\n### 监听css文件\n\n```js\ngulp.task('css', function() {\n    return gulp.src(src.css)\n        .pipe(minifyCSS())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 监听js文件\n\n```js\ngulp.task('js', function() {\n    // 1. 找到文件\n    return  gulp.src(src.js)\n        //2. 压缩文件\n        .pipe(uglify())\n        .pipe(rename({suffix: '.min'}))\n        //3. 另存压缩后的文件\n        .pipe(gulp.dest('code/dest'))\n        .pipe(reload({stream: true}));\n})\n\n\n```\n### 压缩图片任务\n\n```js\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n        // 1. 找到图片\n        gulp.src(src.images)\n        // 2. 压缩图片\n        .pipe($.imagemin())\n        // 3. 另存图片\n        .pipe(gulp.dest('images'))\n        .pipe(reload({stream: true}));\n});\n\n```\n\n### 最后控制台输入gulp执行\n\n```js\ngulp.task('default', ['serve']);\n\n```\n---\n\n如果觉得帮助到了你，欢迎star -> https://github.com/wclimb/wclimb.github.io\n\n---\n\n## 完整代码\n\n\n### 文件目录\n\n```\n-code\n    -imgage\n       1.png\n    -css\n       default.css\n    -scss\n       default.scss\n    -js\n       default.js\n    index.html\ngulpfile.js\npackage.json\n\n```\n### package.json\n\n```js\n{\n  \"name\": \"gulp-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Gulp & SASS\",\n  \"main\": \"gulpfile.js\",\n  \"scripts\": {\n    \"start\": \"gulp\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"browser-sync\": \"^2.2.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean-css\": \"^3.0.3\",\n    \"gulp-imagemin\": \"^3.1.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^3.1.0\",\n    \"gulp-uglify\": \"^2.0.1\",\n    \"gulp.spritesmith\": \"^6.4.0\",\n    \"gulp-autoprefixer\": \"^4.0.0\"\n  },\n  \"dependencies\": {\n    \n  }\n}\n\n```\n\n### gulpfile.js\n\n```js\nvar gulp         = require('gulp'); \nvar browserSync  = require('browser-sync').create(); //通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新\nvar sass         = require('gulp-sass'); //sass转css\nvar reload       = browserSync.reload; \nvar minifyCSS    = require('gulp-clean-css')  //css压缩\nvar uglify       = require('gulp-uglify') //js压缩\nvar imagemin     = require('gulp-imagemin') //图片压缩\nvar rename       = require('gulp-rename') //文件重命名\nvar autoprefixer = require('gulp-autoprefixer') //自动添加前缀\n\n\nvar src = {\n    scss: 'code/scss/*.scss',\n    css:  'code/css/*.css',\n    html: 'code/*.html',\n    js:   'code/js/*.js',\n    images: 'code/images/*.{png,jpg,gif,ico}'\n};\n\n// 静态服务器 + 监听 scss/html 文件\n gulp.task('serve', ['sass'], function() {\n    browserSync.init({\n        server: \"./code\"\n    });\n\n    gulp.watch(src.scss, ['sass']);\n    gulp.watch(src.css, ['css']);\n    gulp.watch(src.images, ['images'])\n    gulp.watch(src.js, ['js']);\n    gulp.watch(src.html).on('change', reload);\n\n});\n\n\n// scss编译后的css将注入到浏览器里实现更新\ngulp.task('sass', function() {\n    return gulp.src(src.scss)\n        .pipe(sass())\n        .pipe(minifyCSS({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\")) //重新输出数据到某个文件夹，如果没有就会自动创建\n        .pipe(reload({stream: true}));\n});\n\n\n// 雪碧图（有需要可以尝试）\n//var spritesmith = require('gulp.spritesmith');\n \n// gulp.task('sprite', function () {\n//     return gulp.src('code/images/*.png')\n//         .pipe(spritesmith({\n//             imgName:'images/sprite20161010.png',  //保存合并后图片的地址\n//             cssName:'css/sprite.css',   //保存合并后对于css样式的地址\n//             padding:20,\n//             algorithm:'binary-tree',\n//         }))\n//         .pipe(gulp.dest('code/scss'));\n// });\n\n\ngulp.task('css', function() {\n    return gulp.src(src.css)\n        .pipe(minifyCSS())\n        .pipe(rename({suffix: '.min'}))\n        .pipe(gulp.dest(\"code/css\"))\n        .pipe(reload({stream: true}));\n});\n\n\ngulp.task('js', function() {\n    // 1. 找到文件\n    return  gulp.src(src.js)\n        //2. 压缩文件\n        .pipe(uglify())\n        .pipe(rename({suffix: '.min'}))\n        //3. 另存压缩后的文件\n        .pipe(gulp.dest('code/dest'))\n        .pipe(reload({stream: true}));\n})\n\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n        // 1. 找到图片\n        gulp.src(src.images)\n        // 2. 压缩图片\n        .pipe($.imagemin())\n        // 3. 另存图片\n        .pipe(gulp.dest('images'))\n        .pipe(reload({stream: true}));\n});\n\n\ngulp.task('default', ['serve']);\n\n```","slug":"gulp","published":1,"updated":"2019-06-06T01:06:26.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9b000y59x3r8yeoqnq","content":"<h2 id=\"入门指南–引用gulp官网示例\"><a href=\"#入门指南–引用gulp官网示例\" class=\"headerlink\" title=\"入门指南–引用gulp官网示例\"></a>入门指南–引用gulp官网示例</h2><blockquote>\n<p>全局安装 gulp：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作为项目的开发依赖（devDependencies）安装：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行 gulp</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp  //默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</span><br></pre></td></tr></table></figure>\n<p>至此，一个简单的gulp已经完成，接下来让我们来完善部分功能</p>\n<h2 id=\"gulp功能完善\"><a href=\"#gulp功能完善\" class=\"headerlink\" title=\"gulp功能完善\"></a>gulp功能完善</h2><h3 id=\"生成package-json文件\"><a href=\"#生成package-json文件\" class=\"headerlink\" title=\"生成package.json文件\"></a>生成package.json文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init //一直回车，有需要的可以设置</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装所需包\"><a href=\"#安装所需包\" class=\"headerlink\" title=\"安装所需包\"></a>安装所需包</h3><blockquote>\n<p>使用淘宝镜像</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">示例 $ cnpm install [name]</span><br></pre></td></tr></table></figure>\n<p>接着<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i browser-sync gulp gulp-clean-css gulp-imagemin gulp-rename  gulp-sass gulp-uglify gulp.spritesmith gulp-autoprefixer --save</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新建gulpfile-js文件\"><a href=\"#新建gulpfile-js文件\" class=\"headerlink\" title=\"新建gulpfile.js文件\"></a>新建gulpfile.js文件</h3><p>添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync  = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//sass转css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reload       = browserSync.reload; </span><br><span class=\"line\"><span class=\"keyword\">var</span> minifyCSS    = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)  <span class=\"comment\">//css压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin     = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>) <span class=\"comment\">//图片压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>) <span class=\"comment\">//文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>) <span class=\"comment\">//自动添加前缀</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置默认文件地址\"><a href=\"#设置默认文件地址\" class=\"headerlink\" title=\"设置默认文件地址\"></a>设置默认文件地址</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code为文件夹，里面存放html css js文件</span><br><span class=\"line\"><span class=\"keyword\">var</span> src = &#123;</span><br><span class=\"line\">    scss: <span class=\"string\">'code/scss/*.scss'</span>,</span><br><span class=\"line\">    css:  <span class=\"string\">'code/css/*.css'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'code/*.html'</span>,</span><br><span class=\"line\">    js:   <span class=\"string\">'code/js/*.js'</span>,</span><br><span class=\"line\">    images: <span class=\"string\">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 任务的名字</span><br><span class=\"line\">deps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。</span><br><span class=\"line\">fn: 该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：gulp.src().pipe(someplugin())。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态服务器 + 监听 scss/html 文件</span></span><br><span class=\"line\"> gulp.task(<span class=\"string\">'serve'</span>, [<span class=\"string\">'sass'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server: <span class=\"string\">\"./code\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.watch(src.scss, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    gulp.watch(src.css, [<span class=\"string\">'css'</span>]);</span><br><span class=\"line\">    gulp.watch(src.images, [<span class=\"string\">'images'</span>])</span><br><span class=\"line\">    gulp.watch(src.js, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">    gulp.watch(src.html).on(<span class=\"string\">'change'</span>, reload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"scss编译后的css将注入到浏览器里实现更新\"><a href=\"#scss编译后的css将注入到浏览器里实现更新\" class=\"headerlink\" title=\"scss编译后的css将注入到浏览器里实现更新\"></a>scss编译后的css将注入到浏览器里实现更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.scss)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(minifyCSS(&#123;</span><br><span class=\"line\">            advanced: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(autoprefixer())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"雪碧图（有需要可以尝试）\"><a href=\"#雪碧图（有需要可以尝试）\" class=\"headerlink\" title=\"雪碧图（有需要可以尝试）\"></a>雪碧图（有需要可以尝试）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spritesmith = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp.spritesmith'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> gulp.task(<span class=\"string\">'sprite'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'code/images/*.png'</span>)</span><br><span class=\"line\">         .pipe(spritesmith(&#123;</span><br><span class=\"line\">             imgName:<span class=\"string\">'images/sprite20161010.png'</span>,  <span class=\"comment\">//保存合并后图片的地址</span></span><br><span class=\"line\">             cssName:<span class=\"string\">'css/sprite.css'</span>,   <span class=\"comment\">//保存合并后对于css样式的地址</span></span><br><span class=\"line\">             padding:<span class=\"number\">20</span>,</span><br><span class=\"line\">             algorithm:<span class=\"string\">'binary-tree'</span>,</span><br><span class=\"line\">         &#125;))</span><br><span class=\"line\">         .pipe(gulp.dest(<span class=\"string\">'code/scss'</span>));</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听css文件\"><a href=\"#监听css文件\" class=\"headerlink\" title=\"监听css文件\"></a>监听css文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.css)</span><br><span class=\"line\">        .pipe(minifyCSS())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听js文件\"><a href=\"#监听js文件\" class=\"headerlink\" title=\"监听js文件\"></a>监听js文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  gulp.src(src.js)</span><br><span class=\"line\">        <span class=\"comment\">//2. 压缩文件</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        <span class=\"comment\">//3. 另存压缩后的文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'code/dest'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩图片任务\"><a href=\"#压缩图片任务\" class=\"headerlink\" title=\"压缩图片任务\"></a>压缩图片任务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 找到图片</span></span><br><span class=\"line\">        gulp.src(src.images)</span><br><span class=\"line\">        <span class=\"comment\">// 2. 压缩图片</span></span><br><span class=\"line\">        .pipe($.imagemin())</span><br><span class=\"line\">        <span class=\"comment\">// 3. 另存图片</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'images'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后控制台输入gulp执行\"><a href=\"#最后控制台输入gulp执行\" class=\"headerlink\" title=\"最后控制台输入gulp执行\"></a>最后控制台输入gulp执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'serve'</span>]);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如果觉得帮助到了你，欢迎star -&gt; <a href=\"https://github.com/wclimb/wclimb.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wclimb.github.io</a></p>\n<hr>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-code</span><br><span class=\"line\">    -imgage</span><br><span class=\"line\">       1.png</span><br><span class=\"line\">    -css</span><br><span class=\"line\">       default.css</span><br><span class=\"line\">    -scss</span><br><span class=\"line\">       default.scss</span><br><span class=\"line\">    -js</span><br><span class=\"line\">       default.js</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">gulpfile.js</span><br><span class=\"line\">package.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"gulp-test\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Gulp &amp; SASS\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"gulpfile.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"browser-sync\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-clean-css\"</span>: <span class=\"string\">\"^3.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-imagemin\"</span>: <span class=\"string\">\"^3.1.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-sass\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp.spritesmith\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-autoprefixer\"</span>: <span class=\"string\">\"^4.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync  = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//sass转css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reload       = browserSync.reload; </span><br><span class=\"line\"><span class=\"keyword\">var</span> minifyCSS    = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)  <span class=\"comment\">//css压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin     = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>) <span class=\"comment\">//图片压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>) <span class=\"comment\">//文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>) <span class=\"comment\">//自动添加前缀</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> src = &#123;</span><br><span class=\"line\">    scss: <span class=\"string\">'code/scss/*.scss'</span>,</span><br><span class=\"line\">    css:  <span class=\"string\">'code/css/*.css'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'code/*.html'</span>,</span><br><span class=\"line\">    js:   <span class=\"string\">'code/js/*.js'</span>,</span><br><span class=\"line\">    images: <span class=\"string\">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态服务器 + 监听 scss/html 文件</span></span><br><span class=\"line\"> gulp.task(<span class=\"string\">'serve'</span>, [<span class=\"string\">'sass'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server: <span class=\"string\">\"./code\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.watch(src.scss, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    gulp.watch(src.css, [<span class=\"string\">'css'</span>]);</span><br><span class=\"line\">    gulp.watch(src.images, [<span class=\"string\">'images'</span>])</span><br><span class=\"line\">    gulp.watch(src.js, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">    gulp.watch(src.html).on(<span class=\"string\">'change'</span>, reload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// scss编译后的css将注入到浏览器里实现更新</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.scss)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(minifyCSS(&#123;</span><br><span class=\"line\">            advanced: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(autoprefixer())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>)) <span class=\"comment\">//重新输出数据到某个文件夹，如果没有就会自动创建</span></span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 雪碧图（有需要可以尝试）</span></span><br><span class=\"line\"><span class=\"comment\">//var spritesmith = require('gulp.spritesmith');</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// gulp.task('sprite', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return gulp.src('code/images/*.png')</span></span><br><span class=\"line\"><span class=\"comment\">//         .pipe(spritesmith(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             imgName:'images/sprite20161010.png',  //保存合并后图片的地址</span></span><br><span class=\"line\"><span class=\"comment\">//             cssName:'css/sprite.css',   //保存合并后对于css样式的地址</span></span><br><span class=\"line\"><span class=\"comment\">//             padding:20,</span></span><br><span class=\"line\"><span class=\"comment\">//             algorithm:'binary-tree',</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;))</span></span><br><span class=\"line\"><span class=\"comment\">//         .pipe(gulp.dest('code/scss'));</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.css)</span><br><span class=\"line\">        .pipe(minifyCSS())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  gulp.src(src.js)</span><br><span class=\"line\">        <span class=\"comment\">//2. 压缩文件</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        <span class=\"comment\">//3. 另存压缩后的文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'code/dest'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 压缩图片任务</span></span><br><span class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 找到图片</span></span><br><span class=\"line\">        gulp.src(src.images)</span><br><span class=\"line\">        <span class=\"comment\">// 2. 压缩图片</span></span><br><span class=\"line\">        .pipe($.imagemin())</span><br><span class=\"line\">        <span class=\"comment\">// 3. 另存图片</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'images'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'serve'</span>]);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"入门指南–引用gulp官网示例\"><a href=\"#入门指南–引用gulp官网示例\" class=\"headerlink\" title=\"入门指南–引用gulp官网示例\"></a>入门指南–引用gulp官网示例</h2><blockquote>\n<p>全局安装 gulp：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作为项目的开发依赖（devDependencies）安装：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p>\n</blockquote>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行 gulp</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp  //默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</span><br></pre></td></tr></table></figure>\n<p>至此，一个简单的gulp已经完成，接下来让我们来完善部分功能</p>\n<h2 id=\"gulp功能完善\"><a href=\"#gulp功能完善\" class=\"headerlink\" title=\"gulp功能完善\"></a>gulp功能完善</h2><h3 id=\"生成package-json文件\"><a href=\"#生成package-json文件\" class=\"headerlink\" title=\"生成package.json文件\"></a>生成package.json文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init //一直回车，有需要的可以设置</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装所需包\"><a href=\"#安装所需包\" class=\"headerlink\" title=\"安装所需包\"></a>安装所需包</h3><blockquote>\n<p>使用淘宝镜像</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\">示例 $ cnpm install [name]</span><br></pre></td></tr></table></figure>\n<p>接着<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i browser-sync gulp gulp-clean-css gulp-imagemin gulp-rename  gulp-sass gulp-uglify gulp.spritesmith gulp-autoprefixer --save</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新建gulpfile-js文件\"><a href=\"#新建gulpfile-js文件\" class=\"headerlink\" title=\"新建gulpfile.js文件\"></a>新建gulpfile.js文件</h3><p>添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync  = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//sass转css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reload       = browserSync.reload; </span><br><span class=\"line\"><span class=\"keyword\">var</span> minifyCSS    = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)  <span class=\"comment\">//css压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin     = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>) <span class=\"comment\">//图片压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>) <span class=\"comment\">//文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>) <span class=\"comment\">//自动添加前缀</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置默认文件地址\"><a href=\"#设置默认文件地址\" class=\"headerlink\" title=\"设置默认文件地址\"></a>设置默认文件地址</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code为文件夹，里面存放html css js文件</span><br><span class=\"line\"><span class=\"keyword\">var</span> src = &#123;</span><br><span class=\"line\">    scss: <span class=\"string\">'code/scss/*.scss'</span>,</span><br><span class=\"line\">    css:  <span class=\"string\">'code/css/*.css'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'code/*.html'</span>,</span><br><span class=\"line\">    js:   <span class=\"string\">'code/js/*.js'</span>,</span><br><span class=\"line\">    images: <span class=\"string\">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: 任务的名字</span><br><span class=\"line\">deps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。</span><br><span class=\"line\">fn: 该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：gulp.src().pipe(someplugin())。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态服务器 + 监听 scss/html 文件</span></span><br><span class=\"line\"> gulp.task(<span class=\"string\">'serve'</span>, [<span class=\"string\">'sass'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server: <span class=\"string\">\"./code\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.watch(src.scss, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    gulp.watch(src.css, [<span class=\"string\">'css'</span>]);</span><br><span class=\"line\">    gulp.watch(src.images, [<span class=\"string\">'images'</span>])</span><br><span class=\"line\">    gulp.watch(src.js, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">    gulp.watch(src.html).on(<span class=\"string\">'change'</span>, reload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"scss编译后的css将注入到浏览器里实现更新\"><a href=\"#scss编译后的css将注入到浏览器里实现更新\" class=\"headerlink\" title=\"scss编译后的css将注入到浏览器里实现更新\"></a>scss编译后的css将注入到浏览器里实现更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.scss)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(minifyCSS(&#123;</span><br><span class=\"line\">            advanced: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(autoprefixer())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"雪碧图（有需要可以尝试）\"><a href=\"#雪碧图（有需要可以尝试）\" class=\"headerlink\" title=\"雪碧图（有需要可以尝试）\"></a>雪碧图（有需要可以尝试）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spritesmith = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp.spritesmith'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> gulp.task(<span class=\"string\">'sprite'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'code/images/*.png'</span>)</span><br><span class=\"line\">         .pipe(spritesmith(&#123;</span><br><span class=\"line\">             imgName:<span class=\"string\">'images/sprite20161010.png'</span>,  <span class=\"comment\">//保存合并后图片的地址</span></span><br><span class=\"line\">             cssName:<span class=\"string\">'css/sprite.css'</span>,   <span class=\"comment\">//保存合并后对于css样式的地址</span></span><br><span class=\"line\">             padding:<span class=\"number\">20</span>,</span><br><span class=\"line\">             algorithm:<span class=\"string\">'binary-tree'</span>,</span><br><span class=\"line\">         &#125;))</span><br><span class=\"line\">         .pipe(gulp.dest(<span class=\"string\">'code/scss'</span>));</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听css文件\"><a href=\"#监听css文件\" class=\"headerlink\" title=\"监听css文件\"></a>监听css文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.css)</span><br><span class=\"line\">        .pipe(minifyCSS())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听js文件\"><a href=\"#监听js文件\" class=\"headerlink\" title=\"监听js文件\"></a>监听js文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  gulp.src(src.js)</span><br><span class=\"line\">        <span class=\"comment\">//2. 压缩文件</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        <span class=\"comment\">//3. 另存压缩后的文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'code/dest'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩图片任务\"><a href=\"#压缩图片任务\" class=\"headerlink\" title=\"压缩图片任务\"></a>压缩图片任务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 找到图片</span></span><br><span class=\"line\">        gulp.src(src.images)</span><br><span class=\"line\">        <span class=\"comment\">// 2. 压缩图片</span></span><br><span class=\"line\">        .pipe($.imagemin())</span><br><span class=\"line\">        <span class=\"comment\">// 3. 另存图片</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'images'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后控制台输入gulp执行\"><a href=\"#最后控制台输入gulp执行\" class=\"headerlink\" title=\"最后控制台输入gulp执行\"></a>最后控制台输入gulp执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'serve'</span>]);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如果觉得帮助到了你，欢迎star -&gt; <a href=\"https://github.com/wclimb/wclimb.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wclimb.github.io</a></p>\n<hr>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-code</span><br><span class=\"line\">    -imgage</span><br><span class=\"line\">       1.png</span><br><span class=\"line\">    -css</span><br><span class=\"line\">       default.css</span><br><span class=\"line\">    -scss</span><br><span class=\"line\">       default.scss</span><br><span class=\"line\">    -js</span><br><span class=\"line\">       default.js</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">gulpfile.js</span><br><span class=\"line\">package.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"gulp-test\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Gulp &amp; SASS\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"gulpfile.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"browser-sync\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-clean-css\"</span>: <span class=\"string\">\"^3.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-imagemin\"</span>: <span class=\"string\">\"^3.1.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-sass\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp.spritesmith\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gulp-autoprefixer\"</span>: <span class=\"string\">\"^4.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync  = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass         = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//sass转css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reload       = browserSync.reload; </span><br><span class=\"line\"><span class=\"keyword\">var</span> minifyCSS    = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean-css'</span>)  <span class=\"comment\">//css压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin     = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>) <span class=\"comment\">//图片压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename       = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>) <span class=\"comment\">//文件重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>) <span class=\"comment\">//自动添加前缀</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> src = &#123;</span><br><span class=\"line\">    scss: <span class=\"string\">'code/scss/*.scss'</span>,</span><br><span class=\"line\">    css:  <span class=\"string\">'code/css/*.css'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'code/*.html'</span>,</span><br><span class=\"line\">    js:   <span class=\"string\">'code/js/*.js'</span>,</span><br><span class=\"line\">    images: <span class=\"string\">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态服务器 + 监听 scss/html 文件</span></span><br><span class=\"line\"> gulp.task(<span class=\"string\">'serve'</span>, [<span class=\"string\">'sass'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server: <span class=\"string\">\"./code\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.watch(src.scss, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    gulp.watch(src.css, [<span class=\"string\">'css'</span>]);</span><br><span class=\"line\">    gulp.watch(src.images, [<span class=\"string\">'images'</span>])</span><br><span class=\"line\">    gulp.watch(src.js, [<span class=\"string\">'js'</span>]);</span><br><span class=\"line\">    gulp.watch(src.html).on(<span class=\"string\">'change'</span>, reload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// scss编译后的css将注入到浏览器里实现更新</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.scss)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(minifyCSS(&#123;</span><br><span class=\"line\">            advanced: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            compatibility: <span class=\"string\">'ie7'</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class=\"line\">            keepBreaks: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            keepSpecialComments: <span class=\"string\">'*'</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(autoprefixer())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>)) <span class=\"comment\">//重新输出数据到某个文件夹，如果没有就会自动创建</span></span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 雪碧图（有需要可以尝试）</span></span><br><span class=\"line\"><span class=\"comment\">//var spritesmith = require('gulp.spritesmith');</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// gulp.task('sprite', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return gulp.src('code/images/*.png')</span></span><br><span class=\"line\"><span class=\"comment\">//         .pipe(spritesmith(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             imgName:'images/sprite20161010.png',  //保存合并后图片的地址</span></span><br><span class=\"line\"><span class=\"comment\">//             cssName:'css/sprite.css',   //保存合并后对于css样式的地址</span></span><br><span class=\"line\"><span class=\"comment\">//             padding:20,</span></span><br><span class=\"line\"><span class=\"comment\">//             algorithm:'binary-tree',</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;))</span></span><br><span class=\"line\"><span class=\"comment\">//         .pipe(gulp.dest('code/scss'));</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(src.css)</span><br><span class=\"line\">        .pipe(minifyCSS())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"code/css\"</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 找到文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  gulp.src(src.js)</span><br><span class=\"line\">        <span class=\"comment\">//2. 压缩文件</span></span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">        <span class=\"comment\">//3. 另存压缩后的文件</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'code/dest'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 压缩图片任务</span></span><br><span class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 找到图片</span></span><br><span class=\"line\">        gulp.src(src.images)</span><br><span class=\"line\">        <span class=\"comment\">// 2. 压缩图片</span></span><br><span class=\"line\">        .pipe($.imagemin())</span><br><span class=\"line\">        <span class=\"comment\">// 3. 另存图片</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'images'</span>))</span><br><span class=\"line\">        .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'serve'</span>]);</span><br></pre></td></tr></table></figure>"},{"title":"node项目服务器部署(新手教程)","date":"2018-07-28T07:16:46.000Z","_content":"# 写在前面\n\n之前在github写了几个项目，然后一直有很多人问我node项目怎么部署到服务器上，于是乎应大家要求就写了这篇文章，此篇教程只提供给新手借鉴，如果你是大佬的话可以不用往下看了，教程多少有些缺陷，都是按照自己的印象写出来的，所以有问题还望指正。\n\n## linux服务器安装node\n\n首先\n下载node包\n```\nwget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.1.0-linux-x64.tar.gz\n```\n解压\n```\ntar xvf node-v8.1.0-linux-x64.tar.gz\n```\n<!-- more -->\n\n```\nln -s ~/node-v8.1.0-linux-x64/bin/node /usr/local/bin/node\nln -s ~/node-v8.1.0-linux-x64/bin/npm /usr/local/bin/npm\n```\n\n最后`node -v`查看node版本，如果出现以下就表示安装成功了\n```\nv8.1.0\n```\n如果你需要升级`node`版本，执行以下命令即可\n```\nsudo npm i -g n\nn stable\n```\n\n## 安装pm2\n\n`pm2`是一个进程守护工具,类似的还有`forever`\n\n```\nsudo npm i pm2 -g\n```\n然后执行，如果不映射的话，会出现`pm2`不是内部指令的错误\n```\nln -s ~/node-v8.1.0-linux-x64/bin/pm2 /usr/local/bin/pm2\n```\n我们顺便把`git`和`cnpm`也安装了\n```\nyum install git\nsudo npm i -g cnpm\nln -s ~/node-v8.1.0-linux-x64/bin/cnpm /usr/bin/cnpm\n```\n\n## 安装mysql\n\n卸载已有的`mysql`\n```\nrpm -qa|grep -i mysql\nyum remove 'mysql'\n```\n下载`mysql`的`repo`源 \n```\nwget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm\nrpm -ivh mysql57-community-release-el7-7.noarch.rpm\n```\n安装\n```\nyum install mysql-server\nyum install mysql-devel\nyum install mysql\n```\n然后查看刚刚安装的`mysql`\n```\nrpm -qa|grep -i mysql\n```\n登录\n```\nservice mysqld status     查看mysql当前的状态\nservice mysqld stop       停止mysql\nservice mysqld restart    重启mysql\nservice mysqld start      启动mysql\n```\n\n在完成上述步骤之后登陆时可能遇到`ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)`错误。\n\n> 这个错误的原因是`/var/lib/mysql`的访问权限问题。下面的命令把`/var/lib/mysql`的拥有者改为当前用户。\n\n```\nchown -R openscanner:openscanner /var/lib/mysql\nchown -R root:root /var/lib/mysql\n```\n\n于是乎接下来就是查看一下`/var/lib/mysql/mysql.sock`文件是否存在，第一次查看时该文件不存在，后来在`/etc/my.cnf`文件中添加了`user=mysql`\n然后尝试登录\n```\nmysql -u root \n```\n会出现`ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)` 登录root帐号需要密码，现在我们没有设置密码，哪来的密码。\n于是乎我们开始忘记密码的操作\n第一步，在/etc/my.cnf文件中添加skip-grant-tables\n第二步，重启mysql，service mysqld restart\n第三步，登录mysql，`mysql -u root`\n第四步，修改密码：\n```\nmysql>use mysql;\nmysql>update mysql.user set authentication_string=password('你的密码') where user='root';\nmysql>flush privileges;\nmysql>exit;\n```\n第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉\n第六步，重启mysql，service mysqld restart\n\n分配用户\n> host指定该用户在哪个主机上可以登陆，此处的\"localhost\"，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将\"localhost\"改为\"%\"，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;\n\n```\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\nCREATE USER 'test'@'%' IDENTIFIED BY '密码'; \n```\n\n给创建的用户权限\n> privileges：用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL;\ndatabasename：数据库名。\ntablename：表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.\n\n```\nGRANT privileges ON databasename.tablename TO 'username'@'host'\n```\n\n> 下面表示给test用户所有数据库和表的权限\n\nmysql>GRANT ALL ON *.* TO 'test'@'%'; \n\n## 安装nginx\n安装\n```\nyum -y install nginx\n```\n启动\n```\nservice nginx start\n```\n查找nginx安装在哪，我这里是`/etc/nginx/conf.d`\n```\nwhereis nginx\n```\n进入文件夹\n```\ncd /etc/nginx/conf.d\n```\n然后新建文件，这里以我的域名为例\n```\nvi www.wclimb.site.conf\n```\n然后里面的文件内容我们先不写，我们先把node项目部署一下\n\n## 使用pm2启动node项目\n\n这里以我的项目为例[koa2-blog](https://github.com/wclimb/Koa2-blog)\n我们先找到合适的文件夹存放我们得项目，然后`git clone`一下（git我们之前安装过了）\n\n> 该项目的数据库名叫nodeSql，使用运行之前得先建立好数据库，然后再运行项目，登录数据库执行 create database nodesql;\n\n```\ngit clone https://github.com/wclimb/Koa2-blog.git\ncd Koa2-blog\ncnpm i \npm2 start index.js\n```\n上面pm2我们也安装过，该项目监听的是3000端口，项目已经运行起来了\n可以使用`pm2 list`查看进程列表，使用`pm2 log`打印日志\n## nginx配置\n\n记得刚刚我们没有编写`www.wclimb.site.conf`文件\n现在开始写入以下内容，`blog.wclimb.site`是我的域名，你可以在你的服务器平台去解析一下，目前我们监听的是`3000`端口，所以代理到`3000`\n```\nserver {\n    listen 80;\n    server_name blog.wclimb.site;\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n    }\n}\n```\n检验nginx是否正确配置\n```\nnginx -t\n```\n重启nginx\n```\nservice nginx restart\n```\n如果不成功，可能还需执行一下命令\n```\nsystemctl stop httpd\nsystemctl disable httpd\n```\n\n## 完结\n\nOK，现在访问域名看看是否有效果了，整个流程可能有写纰漏，大致流程也差不多了，希望对你有帮助\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/node项目服务器部署-新手教程.md","raw":"---\ntitle: node项目服务器部署(新手教程)\ndate: 2018-07-28 15:16:46\ntags:\n- Node\n- javascript\n- 原创\n\ncategories: [javascript,node,教程]\n---\n# 写在前面\n\n之前在github写了几个项目，然后一直有很多人问我node项目怎么部署到服务器上，于是乎应大家要求就写了这篇文章，此篇教程只提供给新手借鉴，如果你是大佬的话可以不用往下看了，教程多少有些缺陷，都是按照自己的印象写出来的，所以有问题还望指正。\n\n## linux服务器安装node\n\n首先\n下载node包\n```\nwget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.1.0-linux-x64.tar.gz\n```\n解压\n```\ntar xvf node-v8.1.0-linux-x64.tar.gz\n```\n<!-- more -->\n\n```\nln -s ~/node-v8.1.0-linux-x64/bin/node /usr/local/bin/node\nln -s ~/node-v8.1.0-linux-x64/bin/npm /usr/local/bin/npm\n```\n\n最后`node -v`查看node版本，如果出现以下就表示安装成功了\n```\nv8.1.0\n```\n如果你需要升级`node`版本，执行以下命令即可\n```\nsudo npm i -g n\nn stable\n```\n\n## 安装pm2\n\n`pm2`是一个进程守护工具,类似的还有`forever`\n\n```\nsudo npm i pm2 -g\n```\n然后执行，如果不映射的话，会出现`pm2`不是内部指令的错误\n```\nln -s ~/node-v8.1.0-linux-x64/bin/pm2 /usr/local/bin/pm2\n```\n我们顺便把`git`和`cnpm`也安装了\n```\nyum install git\nsudo npm i -g cnpm\nln -s ~/node-v8.1.0-linux-x64/bin/cnpm /usr/bin/cnpm\n```\n\n## 安装mysql\n\n卸载已有的`mysql`\n```\nrpm -qa|grep -i mysql\nyum remove 'mysql'\n```\n下载`mysql`的`repo`源 \n```\nwget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm\nrpm -ivh mysql57-community-release-el7-7.noarch.rpm\n```\n安装\n```\nyum install mysql-server\nyum install mysql-devel\nyum install mysql\n```\n然后查看刚刚安装的`mysql`\n```\nrpm -qa|grep -i mysql\n```\n登录\n```\nservice mysqld status     查看mysql当前的状态\nservice mysqld stop       停止mysql\nservice mysqld restart    重启mysql\nservice mysqld start      启动mysql\n```\n\n在完成上述步骤之后登陆时可能遇到`ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)`错误。\n\n> 这个错误的原因是`/var/lib/mysql`的访问权限问题。下面的命令把`/var/lib/mysql`的拥有者改为当前用户。\n\n```\nchown -R openscanner:openscanner /var/lib/mysql\nchown -R root:root /var/lib/mysql\n```\n\n于是乎接下来就是查看一下`/var/lib/mysql/mysql.sock`文件是否存在，第一次查看时该文件不存在，后来在`/etc/my.cnf`文件中添加了`user=mysql`\n然后尝试登录\n```\nmysql -u root \n```\n会出现`ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)` 登录root帐号需要密码，现在我们没有设置密码，哪来的密码。\n于是乎我们开始忘记密码的操作\n第一步，在/etc/my.cnf文件中添加skip-grant-tables\n第二步，重启mysql，service mysqld restart\n第三步，登录mysql，`mysql -u root`\n第四步，修改密码：\n```\nmysql>use mysql;\nmysql>update mysql.user set authentication_string=password('你的密码') where user='root';\nmysql>flush privileges;\nmysql>exit;\n```\n第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉\n第六步，重启mysql，service mysqld restart\n\n分配用户\n> host指定该用户在哪个主机上可以登陆，此处的\"localhost\"，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将\"localhost\"改为\"%\"，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;\n\n```\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\nCREATE USER 'test'@'%' IDENTIFIED BY '密码'; \n```\n\n给创建的用户权限\n> privileges：用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL;\ndatabasename：数据库名。\ntablename：表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.\n\n```\nGRANT privileges ON databasename.tablename TO 'username'@'host'\n```\n\n> 下面表示给test用户所有数据库和表的权限\n\nmysql>GRANT ALL ON *.* TO 'test'@'%'; \n\n## 安装nginx\n安装\n```\nyum -y install nginx\n```\n启动\n```\nservice nginx start\n```\n查找nginx安装在哪，我这里是`/etc/nginx/conf.d`\n```\nwhereis nginx\n```\n进入文件夹\n```\ncd /etc/nginx/conf.d\n```\n然后新建文件，这里以我的域名为例\n```\nvi www.wclimb.site.conf\n```\n然后里面的文件内容我们先不写，我们先把node项目部署一下\n\n## 使用pm2启动node项目\n\n这里以我的项目为例[koa2-blog](https://github.com/wclimb/Koa2-blog)\n我们先找到合适的文件夹存放我们得项目，然后`git clone`一下（git我们之前安装过了）\n\n> 该项目的数据库名叫nodeSql，使用运行之前得先建立好数据库，然后再运行项目，登录数据库执行 create database nodesql;\n\n```\ngit clone https://github.com/wclimb/Koa2-blog.git\ncd Koa2-blog\ncnpm i \npm2 start index.js\n```\n上面pm2我们也安装过，该项目监听的是3000端口，项目已经运行起来了\n可以使用`pm2 list`查看进程列表，使用`pm2 log`打印日志\n## nginx配置\n\n记得刚刚我们没有编写`www.wclimb.site.conf`文件\n现在开始写入以下内容，`blog.wclimb.site`是我的域名，你可以在你的服务器平台去解析一下，目前我们监听的是`3000`端口，所以代理到`3000`\n```\nserver {\n    listen 80;\n    server_name blog.wclimb.site;\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n    }\n}\n```\n检验nginx是否正确配置\n```\nnginx -t\n```\n重启nginx\n```\nservice nginx restart\n```\n如果不成功，可能还需执行一下命令\n```\nsystemctl stop httpd\nsystemctl disable httpd\n```\n\n## 完结\n\nOK，现在访问域名看看是否有效果了，整个流程可能有写纰漏，大致流程也差不多了，希望对你有帮助\n\nGitHub：[wclimb](https://github.com/wclimb)\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"node项目服务器部署-新手教程","published":1,"updated":"2019-06-06T01:06:26.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9d001159x3e052s367","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>之前在github写了几个项目，然后一直有很多人问我node项目怎么部署到服务器上，于是乎应大家要求就写了这篇文章，此篇教程只提供给新手借鉴，如果你是大佬的话可以不用往下看了，教程多少有些缺陷，都是按照自己的印象写出来的，所以有问题还望指正。</p>\n<h2 id=\"linux服务器安装node\"><a href=\"#linux服务器安装node\" class=\"headerlink\" title=\"linux服务器安装node\"></a>linux服务器安装node</h2><p>首先<br>下载node包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.1.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v8.1.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n<p>最后<code>node -v</code>查看node版本，如果出现以下就表示安装成功了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.1.0</span><br></pre></td></tr></table></figure></p>\n<p>如果你需要升级<code>node</code>版本，执行以下命令即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm i -g n</span><br><span class=\"line\">n stable</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h2><p><code>pm2</code>是一个进程守护工具,类似的还有<code>forever</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm i pm2 -g</span><br></pre></td></tr></table></figure>\n<p>然后执行，如果不映射的话，会出现<code>pm2</code>不是内部指令的错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/pm2 /usr/local/bin/pm2</span><br></pre></td></tr></table></figure></p>\n<p>我们顺便把<code>git</code>和<code>cnpm</code>也安装了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br><span class=\"line\">sudo npm i -g cnpm</span><br><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>卸载已有的<code>mysql</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\">yum remove &apos;mysql&apos;</span><br></pre></td></tr></table></figure></p>\n<p>下载<code>mysql</code>的<code>repo</code>源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\">yum install mysql</span><br></pre></td></tr></table></figure></p>\n<p>然后查看刚刚安装的<code>mysql</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure></p>\n<p>登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld status     查看mysql当前的状态</span><br><span class=\"line\">service mysqld stop       停止mysql</span><br><span class=\"line\">service mysqld restart    重启mysql</span><br><span class=\"line\">service mysqld start      启动mysql</span><br></pre></td></tr></table></figure></p>\n<p>在完成上述步骤之后登陆时可能遇到<code>ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)</code>错误。</p>\n<blockquote>\n<p>这个错误的原因是<code>/var/lib/mysql</code>的访问权限问题。下面的命令把<code>/var/lib/mysql</code>的拥有者改为当前用户。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R openscanner:openscanner /var/lib/mysql</span><br><span class=\"line\">chown -R root:root /var/lib/mysql</span><br></pre></td></tr></table></figure>\n<p>于是乎接下来就是查看一下<code>/var/lib/mysql/mysql.sock</code>文件是否存在，第一次查看时该文件不存在，后来在<code>/etc/my.cnf</code>文件中添加了<code>user=mysql</code><br>然后尝试登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>会出现<code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</code> 登录root帐号需要密码，现在我们没有设置密码，哪来的密码。<br>于是乎我们开始忘记密码的操作<br>第一步，在/etc/my.cnf文件中添加skip-grant-tables<br>第二步，重启mysql，service mysqld restart<br>第三步，登录mysql，<code>mysql -u root</code><br>第四步，修改密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;use mysql;</span><br><span class=\"line\">mysql&gt;update mysql.user set authentication_string=password(&apos;你的密码&apos;) where user=&apos;root&apos;;</span><br><span class=\"line\">mysql&gt;flush privileges;</span><br><span class=\"line\">mysql&gt;exit;</span><br></pre></td></tr></table></figure></p>\n<p>第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉<br>第六步，重启mysql，service mysqld restart</p>\n<p>分配用户</p>\n<blockquote>\n<p>host指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos;;</span><br></pre></td></tr></table></figure>\n<p>给创建的用户权限</p>\n<blockquote>\n<p>privileges：用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL;<br>databasename：数据库名。<br>tablename：表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面表示给test用户所有数据库和表的权限</p>\n</blockquote>\n<p>mysql&gt;GRANT ALL ON <em>.</em> TO ‘test‘@’%’; </p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>查找nginx安装在哪，我这里是<code>/etc/nginx/conf.d</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure></p>\n<p>进入文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/nginx/conf.d</span><br></pre></td></tr></table></figure></p>\n<p>然后新建文件，这里以我的域名为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi www.wclimb.site.conf</span><br></pre></td></tr></table></figure></p>\n<p>然后里面的文件内容我们先不写，我们先把node项目部署一下</p>\n<h2 id=\"使用pm2启动node项目\"><a href=\"#使用pm2启动node项目\" class=\"headerlink\" title=\"使用pm2启动node项目\"></a>使用pm2启动node项目</h2><p>这里以我的项目为例<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">koa2-blog</a><br>我们先找到合适的文件夹存放我们得项目，然后<code>git clone</code>一下（git我们之前安装过了）</p>\n<blockquote>\n<p>该项目的数据库名叫nodeSql，使用运行之前得先建立好数据库，然后再运行项目，登录数据库执行 create database nodesql;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wclimb/Koa2-blog.git</span><br><span class=\"line\">cd Koa2-blog</span><br><span class=\"line\">cnpm i </span><br><span class=\"line\">pm2 start index.js</span><br></pre></td></tr></table></figure>\n<p>上面pm2我们也安装过，该项目监听的是3000端口，项目已经运行起来了<br>可以使用<code>pm2 list</code>查看进程列表，使用<code>pm2 log</code>打印日志</p>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>记得刚刚我们没有编写<code>www.wclimb.site.conf</code>文件<br>现在开始写入以下内容，<code>blog.wclimb.site</code>是我的域名，你可以在你的服务器平台去解析一下，目前我们监听的是<code>3000</code>端口，所以代理到<code>3000</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.wclimb.site;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>检验nginx是否正确配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure></p>\n<p>如果不成功，可能还需执行一下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop httpd</span><br><span class=\"line\">systemctl disable httpd</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完结\"><a href=\"#完结\" class=\"headerlink\" title=\"完结\"></a>完结</h2><p>OK，现在访问域名看看是否有效果了，整个流程可能有写纰漏，大致流程也差不多了，希望对你有帮助</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>之前在github写了几个项目，然后一直有很多人问我node项目怎么部署到服务器上，于是乎应大家要求就写了这篇文章，此篇教程只提供给新手借鉴，如果你是大佬的话可以不用往下看了，教程多少有些缺陷，都是按照自己的印象写出来的，所以有问题还望指正。</p>\n<h2 id=\"linux服务器安装node\"><a href=\"#linux服务器安装node\" class=\"headerlink\" title=\"linux服务器安装node\"></a>linux服务器安装node</h2><p>首先<br>下载node包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.1.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v8.1.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n<p>最后<code>node -v</code>查看node版本，如果出现以下就表示安装成功了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8.1.0</span><br></pre></td></tr></table></figure></p>\n<p>如果你需要升级<code>node</code>版本，执行以下命令即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm i -g n</span><br><span class=\"line\">n stable</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装pm2\"><a href=\"#安装pm2\" class=\"headerlink\" title=\"安装pm2\"></a>安装pm2</h2><p><code>pm2</code>是一个进程守护工具,类似的还有<code>forever</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm i pm2 -g</span><br></pre></td></tr></table></figure>\n<p>然后执行，如果不映射的话，会出现<code>pm2</code>不是内部指令的错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/pm2 /usr/local/bin/pm2</span><br></pre></td></tr></table></figure></p>\n<p>我们顺便把<code>git</code>和<code>cnpm</code>也安装了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br><span class=\"line\">sudo npm i -g cnpm</span><br><span class=\"line\">ln -s ~/node-v8.1.0-linux-x64/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>卸载已有的<code>mysql</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\">yum remove &apos;mysql&apos;</span><br></pre></td></tr></table></figure></p>\n<p>下载<code>mysql</code>的<code>repo</code>源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\">yum install mysql</span><br></pre></td></tr></table></figure></p>\n<p>然后查看刚刚安装的<code>mysql</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure></p>\n<p>登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld status     查看mysql当前的状态</span><br><span class=\"line\">service mysqld stop       停止mysql</span><br><span class=\"line\">service mysqld restart    重启mysql</span><br><span class=\"line\">service mysqld start      启动mysql</span><br></pre></td></tr></table></figure></p>\n<p>在完成上述步骤之后登陆时可能遇到<code>ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)</code>错误。</p>\n<blockquote>\n<p>这个错误的原因是<code>/var/lib/mysql</code>的访问权限问题。下面的命令把<code>/var/lib/mysql</code>的拥有者改为当前用户。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R openscanner:openscanner /var/lib/mysql</span><br><span class=\"line\">chown -R root:root /var/lib/mysql</span><br></pre></td></tr></table></figure>\n<p>于是乎接下来就是查看一下<code>/var/lib/mysql/mysql.sock</code>文件是否存在，第一次查看时该文件不存在，后来在<code>/etc/my.cnf</code>文件中添加了<code>user=mysql</code><br>然后尝试登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>会出现<code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</code> 登录root帐号需要密码，现在我们没有设置密码，哪来的密码。<br>于是乎我们开始忘记密码的操作<br>第一步，在/etc/my.cnf文件中添加skip-grant-tables<br>第二步，重启mysql，service mysqld restart<br>第三步，登录mysql，<code>mysql -u root</code><br>第四步，修改密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;use mysql;</span><br><span class=\"line\">mysql&gt;update mysql.user set authentication_string=password(&apos;你的密码&apos;) where user=&apos;root&apos;;</span><br><span class=\"line\">mysql&gt;flush privileges;</span><br><span class=\"line\">mysql&gt;exit;</span><br></pre></td></tr></table></figure></p>\n<p>第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉<br>第六步，重启mysql，service mysqld restart</p>\n<p>分配用户</p>\n<blockquote>\n<p>host指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos;;</span><br></pre></td></tr></table></figure>\n<p>给创建的用户权限</p>\n<blockquote>\n<p>privileges：用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL;<br>databasename：数据库名。<br>tablename：表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面表示给test用户所有数据库和表的权限</p>\n</blockquote>\n<p>mysql&gt;GRANT ALL ON <em>.</em> TO ‘test‘@’%’; </p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>查找nginx安装在哪，我这里是<code>/etc/nginx/conf.d</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure></p>\n<p>进入文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/nginx/conf.d</span><br></pre></td></tr></table></figure></p>\n<p>然后新建文件，这里以我的域名为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi www.wclimb.site.conf</span><br></pre></td></tr></table></figure></p>\n<p>然后里面的文件内容我们先不写，我们先把node项目部署一下</p>\n<h2 id=\"使用pm2启动node项目\"><a href=\"#使用pm2启动node项目\" class=\"headerlink\" title=\"使用pm2启动node项目\"></a>使用pm2启动node项目</h2><p>这里以我的项目为例<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">koa2-blog</a><br>我们先找到合适的文件夹存放我们得项目，然后<code>git clone</code>一下（git我们之前安装过了）</p>\n<blockquote>\n<p>该项目的数据库名叫nodeSql，使用运行之前得先建立好数据库，然后再运行项目，登录数据库执行 create database nodesql;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wclimb/Koa2-blog.git</span><br><span class=\"line\">cd Koa2-blog</span><br><span class=\"line\">cnpm i </span><br><span class=\"line\">pm2 start index.js</span><br></pre></td></tr></table></figure>\n<p>上面pm2我们也安装过，该项目监听的是3000端口，项目已经运行起来了<br>可以使用<code>pm2 list</code>查看进程列表，使用<code>pm2 log</code>打印日志</p>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>记得刚刚我们没有编写<code>www.wclimb.site.conf</code>文件<br>现在开始写入以下内容，<code>blog.wclimb.site</code>是我的域名，你可以在你的服务器平台去解析一下，目前我们监听的是<code>3000</code>端口，所以代理到<code>3000</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.wclimb.site;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>检验nginx是否正确配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure></p>\n<p>如果不成功，可能还需执行一下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop httpd</span><br><span class=\"line\">systemctl disable httpd</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完结\"><a href=\"#完结\" class=\"headerlink\" title=\"完结\"></a>完结</h2><p>OK，现在访问域名看看是否有效果了，整个流程可能有写纰漏，大致流程也差不多了，希望对你有帮助</p>\n<p>GitHub：<a href=\"https://github.com/wclimb\" target=\"_blank\" rel=\"noopener\">wclimb</a></p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"nodejs微信支付之扫码支付","date":"2018-02-14T11:23:17.000Z","_content":"# 前言\n\n本篇文章主要是记录本人在微信扫码支付过程中所遇到的问题，给大家一个借鉴作用，希望对你们有帮助\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- egg `v1.1.0`\n\n## 准备工作\n\n- 微信公众号-appid\n- 微信商户号-mch_id\n- key值(签名算法所需,其实就是一个32位的密码，可以用md5生成一个)(key设置路径：微信商户平台(pay.weixin.qq.com)-->账户设置-->API安全-->密钥设置)\n\n## 扫码支付-统一下单\n以下才用的是微信模式二，因为比较简单\n<!-- more -->\n```js\n    let MD5 = require('md5'),\n\t    xml2js = require('xml2js'),\n        url = \"https://api.mch.weixin.qq.com/pay/unifiedorder\",// 下单请求地址\n\t    appid = '公众号id',\n        mch_id = '微信商户号'；\n\t    notify_url = '回调地址',\n\t    out_trade_no = '自己设置的订单号',// 微信会有自己订单号、我们自己的系统需要设置自己的订单号\n\t    total_fee = '订单金额',// 注意，单位为分\n\t    body = '商品简单描述', \n\t    trade_type = 'NATIVE',// 交易类型，JSAPI--公众号支付、NATIVE--原生扫码支付、APP--app支付\n\t    nonce_str = moment().format('YYYYMMDDHHmmssSSS'),// 随机字符串32位以下\n\t    stringA = `appid=${公众号id}&body=${body}&mch_id=${微信商户号}&nonce_str=${nonce_str}&notify_url=${\n\t\tnotify_url}&out_trade_no=${out_trade_no}&spbill_create_ip=${ctx.request.ip}&total_fee=${total_fee}&trade_type=${trade_type}`,\n\t    stringSignTemp = stringA + \"&key=xxxxxxxxxxxxxxxxx\", //注：key为商户平台设置的密钥key\n\t    sign = MD5(stringSignTemp).toUpperCase();  //注：MD5签名方式\n\t\n```\n以上就是我们所需要的一些参数\n签名生成算法见[微信官方](https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3)\nspbill_create_ip 是 终端ip地址\n\n下面把所有的参数拼接成xml\n```js\n    const formData = \"<xml>\";\n        formData += \"<appid>\" + appid + \"</appid>\"; //appid\n        formData += \"<body>\" + body + \"</body>\"; //商品或支付单简要描述\n        formData += \"<mch_id>\" + mch_id + \"</mch_id>\"; //商户号\n        formData += \"<nonce_str>\" + nonce_str + \"</nonce_str>\"; //随机字符串，不长于32位\n        formData += \"<notify_url>\" + notify_url + \"</notify_url>\"; //支付成功后微信服务器通过POST请求通知这个地址\n        formData += \"<out_trade_no>\" + out_trade_no + \"</out_trade_no>\"; //订单号\n        formData += \"<total_fee>\" + total_fee + \"</total_fee>\"; //金额\n        formData += \"<spbill_create_ip>\" + ctx.request.ip + \"</spbill_create_ip>\"; //ip\n        formData += \"<trade_type>NATIVE</trade_type>\"; //NATIVE会返回code_url ，JSAPI不会返回\n        formData += \"<sign>\" + sign + \"</sign>\";\n        formData += \"</xml>\";\n    // 这里使用了egg里面请求的方式\n\tconst resultData = yield ctx.curl(url, {\n            method: 'POST',\n            content: formData,\n            headers: {\n                'content-type': 'text/html',\n            },\n        });\n\n\t// xml转json格式\n\txml2js.parseString(resultData.data, function (err, json) {\n\t\tif (err) {\n\t\t\tnew Error(\"解析xml报错\")\n\t\t} else {\n\t\t\tvar result = formMessage(json.xml); // 转换成正常的json 数据\n\t\t\tconsole.log(result) //打印出返回的结果\n\t\t}\n\t})\n    var formMessage = function (result) {\n        var message = {};\n        if (typeof result === 'object') {\n            var keys = Object.keys(result);\n            for (var i = 0; i < keys.length; i++) {\n                var item = result[keys[i]];\n                var key = keys[i];\n                if (!(item instanceof Array) || item.length === 0) {\n                    continue;\n                }\n                if (item.length === 1) {\n                    var val = item[0];\n                    if (typeof val === 'object') {\n                        message[key] = formMessage(val);\n                    } else {\n                        message[key] = (val || '').trim();\n                    }\n                } else {\n                    message[key] = [];\n                    for (var j = 0, k = item.length; j < k; j++) {\n                        message[key].push(formMessage(itemp[j]));\n                    }\n                }\n            }\n        }\n        return message;\n    }\n```\n上面使用了egg的请求方式，node可以使用request\n```js\n    var request = require('request');\n    request({\n        url: url,\n        method: \"POST\",\n        body: formData\n    }, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n        }\n    }); \n```\n如果请求成功会最终返回一个xml,然后我们进行解析成json的格式,里面会有一个`code_url`和`out_trade_no`,我们需要把这两个返回给前端，然后通过生成二维码展示给用户扫码，完成支付\n\n## 监听支付是否成功\n\n上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。\n首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查询订单的接口，之前我们拿到了`out_trade_no`，也就是我们系统内部的订单号，我们把这个数据发送给后台查询订单的接口，然后后台接收到之后会请求微信的查询接口地址`https://api.mch.weixin.qq.com/pay/orderquery`,流程跟上面一样，只是接口地址和微信返回的xml不一样而已，返回的字段会有一个状态即`SUCCESS`和`NOTPAY`，我们可以通过判断是否支付返回给前端，成功之后提示给用户支付成功，关闭定时器。\n\n## 回调地址\n\n这个是非常重要的一环，大部分的操作其实在上面就可以完成，但是有特殊的情况，比如用户电脑断网发送不了请求，但是手机付款了，这就会导致我们记录不到用户支付的信息。这个时候回调地址就很重要了\n\n### 设置回调地址\n\n微信商户中心->产品中心->开发配置->扫码支付\n\n之后我们需要做的是后端用`post`来接收微信发送的异步回调信息，也是`xml`的格式，这里注意，如果不支持接收xml，可能会得到空的数据\n这里还需要注意的是，我们在保存用户支付信息的同时，得先查改订单是否支付，以免重复操作，可能会插入多条记录的情况\n\n## 总结\n\n微信扫码支付坑还是有的，如果你是第一次摸索的话，下面罗列一下需要注意的地方\n\n1. 签名算法要写正确，不然是不会成功的，要拼接正确才行\n2. 微信返回的是xml格式的数据，我们得通过插件转成json，这样才方便获取数据\n3. 返回的`code_url`要给前端生成二维码用，然后需要开一个定时器查询该订单是否完成支付，最终通知用户结果\n4. 回调地址很重要，我们后端需要`post`接收微信返回的回调信息，然后保存信息，不过在保存用户支付信息的之前，我们得知道该订单是否已经保存过，以免重复添加。还有就是返回的是xml的数据，后端一定要保证能够接收得到，按照正常的方式是接收不了的，得额外设置。\n\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/nodejs微信支付之扫码支付.md","raw":"---\ntitle: nodejs微信支付之扫码支付\ndate: 2018-02-14 19:23:17\ntags:\n- Node\n- Egg\n- javascript\n- 原创\n\ncategories: [javascript,node,'微信支付',egg]\n---\n# 前言\n\n本篇文章主要是记录本人在微信扫码支付过程中所遇到的问题，给大家一个借鉴作用，希望对你们有帮助\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- egg `v1.1.0`\n\n## 准备工作\n\n- 微信公众号-appid\n- 微信商户号-mch_id\n- key值(签名算法所需,其实就是一个32位的密码，可以用md5生成一个)(key设置路径：微信商户平台(pay.weixin.qq.com)-->账户设置-->API安全-->密钥设置)\n\n## 扫码支付-统一下单\n以下才用的是微信模式二，因为比较简单\n<!-- more -->\n```js\n    let MD5 = require('md5'),\n\t    xml2js = require('xml2js'),\n        url = \"https://api.mch.weixin.qq.com/pay/unifiedorder\",// 下单请求地址\n\t    appid = '公众号id',\n        mch_id = '微信商户号'；\n\t    notify_url = '回调地址',\n\t    out_trade_no = '自己设置的订单号',// 微信会有自己订单号、我们自己的系统需要设置自己的订单号\n\t    total_fee = '订单金额',// 注意，单位为分\n\t    body = '商品简单描述', \n\t    trade_type = 'NATIVE',// 交易类型，JSAPI--公众号支付、NATIVE--原生扫码支付、APP--app支付\n\t    nonce_str = moment().format('YYYYMMDDHHmmssSSS'),// 随机字符串32位以下\n\t    stringA = `appid=${公众号id}&body=${body}&mch_id=${微信商户号}&nonce_str=${nonce_str}&notify_url=${\n\t\tnotify_url}&out_trade_no=${out_trade_no}&spbill_create_ip=${ctx.request.ip}&total_fee=${total_fee}&trade_type=${trade_type}`,\n\t    stringSignTemp = stringA + \"&key=xxxxxxxxxxxxxxxxx\", //注：key为商户平台设置的密钥key\n\t    sign = MD5(stringSignTemp).toUpperCase();  //注：MD5签名方式\n\t\n```\n以上就是我们所需要的一些参数\n签名生成算法见[微信官方](https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3)\nspbill_create_ip 是 终端ip地址\n\n下面把所有的参数拼接成xml\n```js\n    const formData = \"<xml>\";\n        formData += \"<appid>\" + appid + \"</appid>\"; //appid\n        formData += \"<body>\" + body + \"</body>\"; //商品或支付单简要描述\n        formData += \"<mch_id>\" + mch_id + \"</mch_id>\"; //商户号\n        formData += \"<nonce_str>\" + nonce_str + \"</nonce_str>\"; //随机字符串，不长于32位\n        formData += \"<notify_url>\" + notify_url + \"</notify_url>\"; //支付成功后微信服务器通过POST请求通知这个地址\n        formData += \"<out_trade_no>\" + out_trade_no + \"</out_trade_no>\"; //订单号\n        formData += \"<total_fee>\" + total_fee + \"</total_fee>\"; //金额\n        formData += \"<spbill_create_ip>\" + ctx.request.ip + \"</spbill_create_ip>\"; //ip\n        formData += \"<trade_type>NATIVE</trade_type>\"; //NATIVE会返回code_url ，JSAPI不会返回\n        formData += \"<sign>\" + sign + \"</sign>\";\n        formData += \"</xml>\";\n    // 这里使用了egg里面请求的方式\n\tconst resultData = yield ctx.curl(url, {\n            method: 'POST',\n            content: formData,\n            headers: {\n                'content-type': 'text/html',\n            },\n        });\n\n\t// xml转json格式\n\txml2js.parseString(resultData.data, function (err, json) {\n\t\tif (err) {\n\t\t\tnew Error(\"解析xml报错\")\n\t\t} else {\n\t\t\tvar result = formMessage(json.xml); // 转换成正常的json 数据\n\t\t\tconsole.log(result) //打印出返回的结果\n\t\t}\n\t})\n    var formMessage = function (result) {\n        var message = {};\n        if (typeof result === 'object') {\n            var keys = Object.keys(result);\n            for (var i = 0; i < keys.length; i++) {\n                var item = result[keys[i]];\n                var key = keys[i];\n                if (!(item instanceof Array) || item.length === 0) {\n                    continue;\n                }\n                if (item.length === 1) {\n                    var val = item[0];\n                    if (typeof val === 'object') {\n                        message[key] = formMessage(val);\n                    } else {\n                        message[key] = (val || '').trim();\n                    }\n                } else {\n                    message[key] = [];\n                    for (var j = 0, k = item.length; j < k; j++) {\n                        message[key].push(formMessage(itemp[j]));\n                    }\n                }\n            }\n        }\n        return message;\n    }\n```\n上面使用了egg的请求方式，node可以使用request\n```js\n    var request = require('request');\n    request({\n        url: url,\n        method: \"POST\",\n        body: formData\n    }, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n        }\n    }); \n```\n如果请求成功会最终返回一个xml,然后我们进行解析成json的格式,里面会有一个`code_url`和`out_trade_no`,我们需要把这两个返回给前端，然后通过生成二维码展示给用户扫码，完成支付\n\n## 监听支付是否成功\n\n上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。\n首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查询订单的接口，之前我们拿到了`out_trade_no`，也就是我们系统内部的订单号，我们把这个数据发送给后台查询订单的接口，然后后台接收到之后会请求微信的查询接口地址`https://api.mch.weixin.qq.com/pay/orderquery`,流程跟上面一样，只是接口地址和微信返回的xml不一样而已，返回的字段会有一个状态即`SUCCESS`和`NOTPAY`，我们可以通过判断是否支付返回给前端，成功之后提示给用户支付成功，关闭定时器。\n\n## 回调地址\n\n这个是非常重要的一环，大部分的操作其实在上面就可以完成，但是有特殊的情况，比如用户电脑断网发送不了请求，但是手机付款了，这就会导致我们记录不到用户支付的信息。这个时候回调地址就很重要了\n\n### 设置回调地址\n\n微信商户中心->产品中心->开发配置->扫码支付\n\n之后我们需要做的是后端用`post`来接收微信发送的异步回调信息，也是`xml`的格式，这里注意，如果不支持接收xml，可能会得到空的数据\n这里还需要注意的是，我们在保存用户支付信息的同时，得先查改订单是否支付，以免重复操作，可能会插入多条记录的情况\n\n## 总结\n\n微信扫码支付坑还是有的，如果你是第一次摸索的话，下面罗列一下需要注意的地方\n\n1. 签名算法要写正确，不然是不会成功的，要拼接正确才行\n2. 微信返回的是xml格式的数据，我们得通过插件转成json，这样才方便获取数据\n3. 返回的`code_url`要给前端生成二维码用，然后需要开一个定时器查询该订单是否完成支付，最终通知用户结果\n4. 回调地址很重要，我们后端需要`post`接收微信返回的回调信息，然后保存信息，不过在保存用户支付信息的之前，我们得知道该订单是否已经保存过，以免重复添加。还有就是返回的是xml的数据，后端一定要保证能够接收得到，按照正常的方式是接收不了的，得额外设置。\n\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"nodejs微信支付之扫码支付","published":1,"updated":"2019-06-06T01:06:26.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9e001559x3uggmud64","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章主要是记录本人在微信扫码支付过程中所遇到的问题，给大家一个借鉴作用，希望对你们有帮助</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>egg <code>v1.1.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>微信公众号-appid</li>\n<li>微信商户号-mch_id</li>\n<li>key值(签名算法所需,其实就是一个32位的密码，可以用md5生成一个)(key设置路径：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置)</li>\n</ul>\n<h2 id=\"扫码支付-统一下单\"><a href=\"#扫码支付-统一下单\" class=\"headerlink\" title=\"扫码支付-统一下单\"></a>扫码支付-统一下单</h2><p>以下才用的是微信模式二，因为比较简单<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> MD5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>),</span><br><span class=\"line\">   xml2js = <span class=\"built_in\">require</span>(<span class=\"string\">'xml2js'</span>),</span><br><span class=\"line\">      url = <span class=\"string\">\"https://api.mch.weixin.qq.com/pay/unifiedorder\"</span>,<span class=\"comment\">// 下单请求地址</span></span><br><span class=\"line\">   appid = <span class=\"string\">'公众号id'</span>,</span><br><span class=\"line\">      mch_id = <span class=\"string\">'微信商户号'</span>；</span><br><span class=\"line\">   notify_url = <span class=\"string\">'回调地址'</span>,</span><br><span class=\"line\">   out_trade_no = <span class=\"string\">'自己设置的订单号'</span>,<span class=\"comment\">// 微信会有自己订单号、我们自己的系统需要设置自己的订单号</span></span><br><span class=\"line\">   total_fee = <span class=\"string\">'订单金额'</span>,<span class=\"comment\">// 注意，单位为分</span></span><br><span class=\"line\">   body = <span class=\"string\">'商品简单描述'</span>, </span><br><span class=\"line\">   trade_type = <span class=\"string\">'NATIVE'</span>,<span class=\"comment\">// 交易类型，JSAPI--公众号支付、NATIVE--原生扫码支付、APP--app支付</span></span><br><span class=\"line\">   nonce_str = moment().format(<span class=\"string\">'YYYYMMDDHHmmssSSS'</span>),<span class=\"comment\">// 随机字符串32位以下</span></span><br><span class=\"line\">   stringA = <span class=\"string\">`appid=<span class=\"subst\">$&#123;公众号id&#125;</span>&amp;body=<span class=\"subst\">$&#123;body&#125;</span>&amp;mch_id=<span class=\"subst\">$&#123;微信商户号&#125;</span>&amp;nonce_str=<span class=\"subst\">$&#123;nonce_str&#125;</span>&amp;notify_url=<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">notify_url&#125;</span>&amp;out_trade_no=<span class=\"subst\">$&#123;out_trade_no&#125;</span>&amp;spbill_create_ip=<span class=\"subst\">$&#123;ctx.request.ip&#125;</span>&amp;total_fee=<span class=\"subst\">$&#123;total_fee&#125;</span>&amp;trade_type=<span class=\"subst\">$&#123;trade_type&#125;</span>`</span>,</span><br><span class=\"line\">   stringSignTemp = stringA + <span class=\"string\">\"&amp;key=xxxxxxxxxxxxxxxxx\"</span>, <span class=\"comment\">//注：key为商户平台设置的密钥key</span></span><br><span class=\"line\">   sign = MD5(stringSignTemp).toUpperCase();  <span class=\"comment\">//注：MD5签名方式</span></span><br></pre></td></tr></table></figure></p>\n<p>以上就是我们所需要的一些参数<br>签名生成算法见<a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3\" target=\"_blank\" rel=\"noopener\">微信官方</a><br>spbill_create_ip 是 终端ip地址</p>\n<p>下面把所有的参数拼接成xml<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> formData = <span class=\"string\">\"&lt;xml&gt;\"</span>;</span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;appid&gt;\"</span> + appid + <span class=\"string\">\"&lt;/appid&gt;\"</span>; <span class=\"comment\">//appid</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;body&gt;\"</span> + body + <span class=\"string\">\"&lt;/body&gt;\"</span>; <span class=\"comment\">//商品或支付单简要描述</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;mch_id&gt;\"</span> + mch_id + <span class=\"string\">\"&lt;/mch_id&gt;\"</span>; <span class=\"comment\">//商户号</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;nonce_str&gt;\"</span> + nonce_str + <span class=\"string\">\"&lt;/nonce_str&gt;\"</span>; <span class=\"comment\">//随机字符串，不长于32位</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;notify_url&gt;\"</span> + notify_url + <span class=\"string\">\"&lt;/notify_url&gt;\"</span>; <span class=\"comment\">//支付成功后微信服务器通过POST请求通知这个地址</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;out_trade_no&gt;\"</span> + out_trade_no + <span class=\"string\">\"&lt;/out_trade_no&gt;\"</span>; <span class=\"comment\">//订单号</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;total_fee&gt;\"</span> + total_fee + <span class=\"string\">\"&lt;/total_fee&gt;\"</span>; <span class=\"comment\">//金额</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;spbill_create_ip&gt;\"</span> + ctx.request.ip + <span class=\"string\">\"&lt;/spbill_create_ip&gt;\"</span>; <span class=\"comment\">//ip</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;trade_type&gt;NATIVE&lt;/trade_type&gt;\"</span>; <span class=\"comment\">//NATIVE会返回code_url ，JSAPI不会返回</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;sign&gt;\"</span> + sign + <span class=\"string\">\"&lt;/sign&gt;\"</span>;</span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;/xml&gt;\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 这里使用了egg里面请求的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultData = <span class=\"keyword\">yield</span> ctx.curl(url, &#123;</span><br><span class=\"line\">           method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">           content: formData,</span><br><span class=\"line\">           headers: &#123;</span><br><span class=\"line\">               <span class=\"string\">'content-type'</span>: <span class=\"string\">'text/html'</span>,</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// xml转json格式</span></span><br><span class=\"line\">xml2js.parseString(resultData.data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, json</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"解析xml报错\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = formMessage(json.xml); <span class=\"comment\">// 转换成正常的json 数据</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">//打印出返回的结果</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> formMessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> message = &#123;&#125;;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(result);</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> item = result[keys[i]];</span><br><span class=\"line\">               <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) || item.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (item.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> val = item[<span class=\"number\">0</span>];</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                       message[key] = formMessage(val);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       message[key] = (val || <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   message[key] = [];</span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, k = item.length; j &lt; k; j++) &#123;</span><br><span class=\"line\">                       message[key].push(formMessage(itemp[j]));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面使用了egg的请求方式，node可以使用request<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    body: formData</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果请求成功会最终返回一个xml,然后我们进行解析成json的格式,里面会有一个<code>code_url</code>和<code>out_trade_no</code>,我们需要把这两个返回给前端，然后通过生成二维码展示给用户扫码，完成支付</p>\n<h2 id=\"监听支付是否成功\"><a href=\"#监听支付是否成功\" class=\"headerlink\" title=\"监听支付是否成功\"></a>监听支付是否成功</h2><p>上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。<br>首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查询订单的接口，之前我们拿到了<code>out_trade_no</code>，也就是我们系统内部的订单号，我们把这个数据发送给后台查询订单的接口，然后后台接收到之后会请求微信的查询接口地址<code>https://api.mch.weixin.qq.com/pay/orderquery</code>,流程跟上面一样，只是接口地址和微信返回的xml不一样而已，返回的字段会有一个状态即<code>SUCCESS</code>和<code>NOTPAY</code>，我们可以通过判断是否支付返回给前端，成功之后提示给用户支付成功，关闭定时器。</p>\n<h2 id=\"回调地址\"><a href=\"#回调地址\" class=\"headerlink\" title=\"回调地址\"></a>回调地址</h2><p>这个是非常重要的一环，大部分的操作其实在上面就可以完成，但是有特殊的情况，比如用户电脑断网发送不了请求，但是手机付款了，这就会导致我们记录不到用户支付的信息。这个时候回调地址就很重要了</p>\n<h3 id=\"设置回调地址\"><a href=\"#设置回调地址\" class=\"headerlink\" title=\"设置回调地址\"></a>设置回调地址</h3><p>微信商户中心-&gt;产品中心-&gt;开发配置-&gt;扫码支付</p>\n<p>之后我们需要做的是后端用<code>post</code>来接收微信发送的异步回调信息，也是<code>xml</code>的格式，这里注意，如果不支持接收xml，可能会得到空的数据<br>这里还需要注意的是，我们在保存用户支付信息的同时，得先查改订单是否支付，以免重复操作，可能会插入多条记录的情况</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>微信扫码支付坑还是有的，如果你是第一次摸索的话，下面罗列一下需要注意的地方</p>\n<ol>\n<li>签名算法要写正确，不然是不会成功的，要拼接正确才行</li>\n<li>微信返回的是xml格式的数据，我们得通过插件转成json，这样才方便获取数据</li>\n<li>返回的<code>code_url</code>要给前端生成二维码用，然后需要开一个定时器查询该订单是否完成支付，最终通知用户结果</li>\n<li>回调地址很重要，我们后端需要<code>post</code>接收微信返回的回调信息，然后保存信息，不过在保存用户支付信息的之前，我们得知道该订单是否已经保存过，以免重复添加。还有就是返回的是xml的数据，后端一定要保证能够接收得到，按照正常的方式是接收不了的，得额外设置。</li>\n</ol>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章主要是记录本人在微信扫码支付过程中所遇到的问题，给大家一个借鉴作用，希望对你们有帮助</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>egg <code>v1.1.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>微信公众号-appid</li>\n<li>微信商户号-mch_id</li>\n<li>key值(签名算法所需,其实就是一个32位的密码，可以用md5生成一个)(key设置路径：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置)</li>\n</ul>\n<h2 id=\"扫码支付-统一下单\"><a href=\"#扫码支付-统一下单\" class=\"headerlink\" title=\"扫码支付-统一下单\"></a>扫码支付-统一下单</h2><p>以下才用的是微信模式二，因为比较简单<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> MD5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>),</span><br><span class=\"line\">   xml2js = <span class=\"built_in\">require</span>(<span class=\"string\">'xml2js'</span>),</span><br><span class=\"line\">      url = <span class=\"string\">\"https://api.mch.weixin.qq.com/pay/unifiedorder\"</span>,<span class=\"comment\">// 下单请求地址</span></span><br><span class=\"line\">   appid = <span class=\"string\">'公众号id'</span>,</span><br><span class=\"line\">      mch_id = <span class=\"string\">'微信商户号'</span>；</span><br><span class=\"line\">   notify_url = <span class=\"string\">'回调地址'</span>,</span><br><span class=\"line\">   out_trade_no = <span class=\"string\">'自己设置的订单号'</span>,<span class=\"comment\">// 微信会有自己订单号、我们自己的系统需要设置自己的订单号</span></span><br><span class=\"line\">   total_fee = <span class=\"string\">'订单金额'</span>,<span class=\"comment\">// 注意，单位为分</span></span><br><span class=\"line\">   body = <span class=\"string\">'商品简单描述'</span>, </span><br><span class=\"line\">   trade_type = <span class=\"string\">'NATIVE'</span>,<span class=\"comment\">// 交易类型，JSAPI--公众号支付、NATIVE--原生扫码支付、APP--app支付</span></span><br><span class=\"line\">   nonce_str = moment().format(<span class=\"string\">'YYYYMMDDHHmmssSSS'</span>),<span class=\"comment\">// 随机字符串32位以下</span></span><br><span class=\"line\">   stringA = <span class=\"string\">`appid=<span class=\"subst\">$&#123;公众号id&#125;</span>&amp;body=<span class=\"subst\">$&#123;body&#125;</span>&amp;mch_id=<span class=\"subst\">$&#123;微信商户号&#125;</span>&amp;nonce_str=<span class=\"subst\">$&#123;nonce_str&#125;</span>&amp;notify_url=<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">notify_url&#125;</span>&amp;out_trade_no=<span class=\"subst\">$&#123;out_trade_no&#125;</span>&amp;spbill_create_ip=<span class=\"subst\">$&#123;ctx.request.ip&#125;</span>&amp;total_fee=<span class=\"subst\">$&#123;total_fee&#125;</span>&amp;trade_type=<span class=\"subst\">$&#123;trade_type&#125;</span>`</span>,</span><br><span class=\"line\">   stringSignTemp = stringA + <span class=\"string\">\"&amp;key=xxxxxxxxxxxxxxxxx\"</span>, <span class=\"comment\">//注：key为商户平台设置的密钥key</span></span><br><span class=\"line\">   sign = MD5(stringSignTemp).toUpperCase();  <span class=\"comment\">//注：MD5签名方式</span></span><br></pre></td></tr></table></figure></p>\n<p>以上就是我们所需要的一些参数<br>签名生成算法见<a href=\"https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3\" target=\"_blank\" rel=\"noopener\">微信官方</a><br>spbill_create_ip 是 终端ip地址</p>\n<p>下面把所有的参数拼接成xml<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> formData = <span class=\"string\">\"&lt;xml&gt;\"</span>;</span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;appid&gt;\"</span> + appid + <span class=\"string\">\"&lt;/appid&gt;\"</span>; <span class=\"comment\">//appid</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;body&gt;\"</span> + body + <span class=\"string\">\"&lt;/body&gt;\"</span>; <span class=\"comment\">//商品或支付单简要描述</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;mch_id&gt;\"</span> + mch_id + <span class=\"string\">\"&lt;/mch_id&gt;\"</span>; <span class=\"comment\">//商户号</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;nonce_str&gt;\"</span> + nonce_str + <span class=\"string\">\"&lt;/nonce_str&gt;\"</span>; <span class=\"comment\">//随机字符串，不长于32位</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;notify_url&gt;\"</span> + notify_url + <span class=\"string\">\"&lt;/notify_url&gt;\"</span>; <span class=\"comment\">//支付成功后微信服务器通过POST请求通知这个地址</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;out_trade_no&gt;\"</span> + out_trade_no + <span class=\"string\">\"&lt;/out_trade_no&gt;\"</span>; <span class=\"comment\">//订单号</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;total_fee&gt;\"</span> + total_fee + <span class=\"string\">\"&lt;/total_fee&gt;\"</span>; <span class=\"comment\">//金额</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;spbill_create_ip&gt;\"</span> + ctx.request.ip + <span class=\"string\">\"&lt;/spbill_create_ip&gt;\"</span>; <span class=\"comment\">//ip</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;trade_type&gt;NATIVE&lt;/trade_type&gt;\"</span>; <span class=\"comment\">//NATIVE会返回code_url ，JSAPI不会返回</span></span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;sign&gt;\"</span> + sign + <span class=\"string\">\"&lt;/sign&gt;\"</span>;</span><br><span class=\"line\">       formData += <span class=\"string\">\"&lt;/xml&gt;\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 这里使用了egg里面请求的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultData = <span class=\"keyword\">yield</span> ctx.curl(url, &#123;</span><br><span class=\"line\">           method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">           content: formData,</span><br><span class=\"line\">           headers: &#123;</span><br><span class=\"line\">               <span class=\"string\">'content-type'</span>: <span class=\"string\">'text/html'</span>,</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// xml转json格式</span></span><br><span class=\"line\">xml2js.parseString(resultData.data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, json</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"解析xml报错\"</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = formMessage(json.xml); <span class=\"comment\">// 转换成正常的json 数据</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">//打印出返回的结果</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> formMessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> message = &#123;&#125;;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(result);</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> item = result[keys[i]];</span><br><span class=\"line\">               <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) || item.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (item.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> val = item[<span class=\"number\">0</span>];</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                       message[key] = formMessage(val);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       message[key] = (val || <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   message[key] = [];</span><br><span class=\"line\">                   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, k = item.length; j &lt; k; j++) &#123;</span><br><span class=\"line\">                       message[key].push(formMessage(itemp[j]));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面使用了egg的请求方式，node可以使用request<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    body: formData</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果请求成功会最终返回一个xml,然后我们进行解析成json的格式,里面会有一个<code>code_url</code>和<code>out_trade_no</code>,我们需要把这两个返回给前端，然后通过生成二维码展示给用户扫码，完成支付</p>\n<h2 id=\"监听支付是否成功\"><a href=\"#监听支付是否成功\" class=\"headerlink\" title=\"监听支付是否成功\"></a>监听支付是否成功</h2><p>上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。<br>首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查询订单的接口，之前我们拿到了<code>out_trade_no</code>，也就是我们系统内部的订单号，我们把这个数据发送给后台查询订单的接口，然后后台接收到之后会请求微信的查询接口地址<code>https://api.mch.weixin.qq.com/pay/orderquery</code>,流程跟上面一样，只是接口地址和微信返回的xml不一样而已，返回的字段会有一个状态即<code>SUCCESS</code>和<code>NOTPAY</code>，我们可以通过判断是否支付返回给前端，成功之后提示给用户支付成功，关闭定时器。</p>\n<h2 id=\"回调地址\"><a href=\"#回调地址\" class=\"headerlink\" title=\"回调地址\"></a>回调地址</h2><p>这个是非常重要的一环，大部分的操作其实在上面就可以完成，但是有特殊的情况，比如用户电脑断网发送不了请求，但是手机付款了，这就会导致我们记录不到用户支付的信息。这个时候回调地址就很重要了</p>\n<h3 id=\"设置回调地址\"><a href=\"#设置回调地址\" class=\"headerlink\" title=\"设置回调地址\"></a>设置回调地址</h3><p>微信商户中心-&gt;产品中心-&gt;开发配置-&gt;扫码支付</p>\n<p>之后我们需要做的是后端用<code>post</code>来接收微信发送的异步回调信息，也是<code>xml</code>的格式，这里注意，如果不支持接收xml，可能会得到空的数据<br>这里还需要注意的是，我们在保存用户支付信息的同时，得先查改订单是否支付，以免重复操作，可能会插入多条记录的情况</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>微信扫码支付坑还是有的，如果你是第一次摸索的话，下面罗列一下需要注意的地方</p>\n<ol>\n<li>签名算法要写正确，不然是不会成功的，要拼接正确才行</li>\n<li>微信返回的是xml格式的数据，我们得通过插件转成json，这样才方便获取数据</li>\n<li>返回的<code>code_url</code>要给前端生成二维码用，然后需要开一个定时器查询该订单是否完成支付，最终通知用户结果</li>\n<li>回调地址很重要，我们后端需要<code>post</code>接收微信返回的回调信息，然后保存信息，不过在保存用户支付信息的之前，我们得知道该订单是否已经保存过，以免重复添加。还有就是返回的是xml的数据，后端一定要保证能够接收得到，按照正常的方式是接收不了的，得额外设置。</li>\n</ol>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"redis简易教程以及使用nodejs连接redis","date":"2019-04-19T07:38:40.000Z","_content":"\n## 前言\n\n一直没机会学习`redis`，最近抽空学了一下，因为知道`reids`还是比较重要的，经常看到有人开发公众号因为没有对`access_token`进行缓存，判断是否过期，导致`access_token`的调用`api`次数超过限制而影响业务的情况，熟悉的人都知道使用`redis`基本上都是做缓存，因为他简单、速度快，可以说是个\"快男\"。使用`reids`做抽奖也很普遍，有空可以试试。本篇本章暂时只讲`key`、`hash`、`list`\n\n## redis简介\n\n- Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\n- Redis 与其他 key - value 缓存产品有以下三个特点：\n  1. Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\n  2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n  3. Redis支持数据的备份，即master-slave模式的数据备份。\n\n## 为什么要用redis（优势）\n\n1. 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。\n2. 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 安装运行及调试（这里以mac为例）\n\n1. 先去官网下载安装包：http://www.redis.net.cn/download/\n2. 解压安装\n\n```\n> tar xzf redis-3.0.6.tar.gz\n> make\n> sudo make install\n> cd /usr/local/bin && redis-server // 开启redis服务\n> cd /usr/local/bin && redis-cli // 开启redis调试服务\n```\n开启调试会显示下面的界面，现在你就可以开始使用redis的api了\n```\n> cd /usr/local/bin && redis-cli\n127.0.0.1:6379>\n```\n<!-- more -->\n## 全局api\n\n### 查询键\n\n```\n127.0.0.1:6379> keys *\n1) \"wclimb\"\n2) \"key\"\n3) \"me\"\n4) \"user\"\n5) \"user1\"\n```\n\n### 键的总数\n\n```\n127.0.0.1:6379> dbsize \n(integer) 5\n```\n\n### 检查键是否存在\n\n存在返回 1 ，不存在返回 0\n```\n127.0.0.1:6379> exists wclimb \n(integer) 1\n127.0.0.1:6379> exists wclimb1 \n(integer) 0\n```\n\n### 删除键\n\n返回结果为成功删除键的个数\n```\n127.0.0.1:6379> del user1 \n(integer) 1\n```\n\n### 键过期\n\nexpire key seconds 当超过过期时间，会自动删除，key在seconds秒后过期\nexpireat key timestamp 键在秒级时间戳timestamp后过期\npexpire key milliseconds 当超过过期时间，会自动删除，key在milliseconds毫秒后过期\npexpireat key milliseconds-timestamp key在毫秒级时间戳timestamp后过期\n\n```\n127.0.0.1:6379> expire user 10   // 10秒后user会被删除\n(integer) 1\n```\n\n### randomkey 随机返回一个键\n\n```\n127.0.0.1:6379> randomkey \n\"wclimb\"\n127.0.0.1:6379> randomkey \n\"me\"\n```\n\n## redis 键（key）\n\n```\nset key value [ex] [px] [nx|xx]\nex为键值设置秒级过期时间\npx为键值设置毫秒级过期时间\nnx键必须不存在，才可以设置成功，用于添加\nxx与nx相反，键必须存在，才可以设置成功，用于更新\nsetnx、setex 与上面的nx、ex作用相同\n```\n\n### 设置key(O(1))\n```\n127.0.0.1:6379> set name 25 \nOK\n127.0.0.1:6379> keys * \n1) \"wclimb\"\n2) \"key\"\n3) \"me\"\n4) \"name\"\n```\n\n### 获取key(O(1))\n```\n127.0.0.1:6379> get name \n\"25\"\n```\n\n### 批量设置key\n\nmset key value [key value ......]\n\n```\n127.0.0.1:6379> mset test1 1 test2 2\nOK\n127.0.0.1:6379> get test2\n\"2\"\n```\n\n### 追加值(O(1))\n\n```\n127.0.0.1:6379> append test2 apend\n(integer) 6\n127.0.0.1:6379> get test2 \n\"2apend\"\n```\n### 字符串长度\n\n```\n127.0.0.1:6379> strlen test2\n(integer) 6\n```\n\n## 哈希（hash）\n\nHGET KEY_NAME FIELD_NAME \n类似javscript里的对象 {}\n\n### 设置hash\n```\n127.0.0.1:6379> HMSET hash name wclimb age 25\nOK\n```\n\n### 获取hash\n```\n127.0.0.1:6379> hmget hash name\n1) \"wclimb\"\n```\n### 删除hash\n\nhdel key field [field ......] 会删除一个或多个field，返回结果为成功删除fiel的个数\n\n```\n127.0.0.1:6379> hdel hash name\n(integer) 1\n127.0.0.1:6379> hmget hash name  // 再获取就返回nil\n1) (nil)\n```\n\n### 获取所有field\n\n```\n127.0.0.1:6379> hkeys hash\n1) \"age\"\n127.0.0.1:6379> HMSET hash name wclimb from jiangxi\nOK\n127.0.0.1:6379> hkeys hash\n1) \"age\"\n2) \"name\"\n3) \"from\"\n```\n\n### 获取所有value\n```\n127.0.0.1:6379> hvals hash\n1) \"25\"\n2) \"wclimb\"\n3) \"jiangxi\"\n```\n\n## 列表（list）\n\n| 操作类型   | 操作    | \n| - |  --  | \n|  添加    |   rpush 、lpush、linsert    |  \n|   查\t    |   lrange、lindex、llen  |   \n|  删除    |   lpop 、rpop、 lrem、ltrim   |   \n|   修改\t    |   lset   |   \n|   阻塞操作\t    |   blpop、brpop  |   \n\n### 添加\n\n（1）从左边插入元素\nlpush key value [value......]\n```\n127.0.0.1:6379> LPUSH list redis\n(integer) 1\n```\n（1）从右边插入元素\nrpush key value [value......]\n```\n127.0.0.1:6379> RPUSH list test\n(integer) 2\n```\n\n### 查找\n\nlrange key start end 索引下标从左到右分别是0到N-1，从右到左分别是-1到-N；end选项包含了自身\nlrange key 0 -1 可以从左到右获取列表的所有元素\nlrange mylist 1 3 获取列表中第2个到第4个元素\n\n```\n127.0.0.1:6379> lrange list 0 1\n1) \"redis\"\n2) \"test\"\n```\n\n### 长度\n\n```\n127.0.0.1:6379> llen key\n(integer) 2\n```\n\n### 删除\n\n我们先添加几个\n\n```\n127.0.0.1:6379> LPUSH list a b c\n(integer) 5\n```\n\n（1）从列表右侧弹出元素 rpop key\n\n \n（2）从列表左侧弹出元素 lpop key\n\n先看看现在的列表\n```\n127.0.0.1:6379> lrange list 0 -1\n1) \"c\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n5) \"test\"\n```\n\n删除\n```\n127.0.0.1:6379> rpop list \n\"test\"\n```\n我们发现test被删除了，现在看看我们的列表\n```\n127.0.0.1:6379> lrange list 0 -1\n1) \"c\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n```\n\n### 修改\n\nlset key index newValue 修改指定索引下标的元素\n\n```\n127.0.0.1:6379> lset list 0 newValue\nOK\n127.0.0.1:6379> lrange list 0 -1\n1) \"newValue\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n\n```\n第0个下标的元素被替换成最新的值\n\n## 使用node连接redis\n\n```\n> npm init\n> cnpm i reids -S\n> touch index.js\n> vim index.js\n```\n\n### 连接redis\n\nredis npm包链接 https://www.npmjs.com/package/redis\n\n```js\nvar redis = require('redis');\n\nvar client = redis.createClient(6379, '127.0.0.1');\nclient.on('error', function(err) {\n  console.log('Error ' + err);\n});\n```\n\n### 设置获取key\n\n```js\nclient.set('user', JSON.stringify({ name: 'wclimb', age: '18' }), redis.print);\nclient.get('user', function(err, value) {\n  if (err) throw err;\n  console.log('Got: ' + value);\n  client.quit();\n});\n```\n控制台打印\n\n```\n> node index.js\nReply: OK\nGot: {\"name\":\"wclimb\",\"age\":\"18\"}\n```\n\n\n### 设置获取hash\n\n```js\nclient.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\nclient.hgetall(\"hosts\", function (err, obj) {\n  console.dir(obj);\n});\n```\n控制台打印\n```\n> node index.js\n{ mjr: '1', another: '23', home: '1234' }\n```\n\n### 设置获取list\n\n```js\nclient.LPUSH('list', [1, 2, 3, 4], redis.print);\nclient.lrange('list', '0', '-1', redis.print);\n```\n控制台打印\n```\n> node index.js\nReply: 8\nReply: 4,3,2,1,newValue,b,a,redis\n```\n\n基本用法和上面讲的都差不多，直接上去一顿写就完事了，完全可以不带脑子的使用各种api","source":"_posts/redis简易教程以及使用nodejs连接redis.md","raw":"---\ntitle: redis简易教程以及使用nodejs连接redis\ndate: 2019-04-19 15:38:40\ntags:\n- redis\n- Node\n\ncategories: [javascript,redis,node,教程]\n---\n\n## 前言\n\n一直没机会学习`redis`，最近抽空学了一下，因为知道`reids`还是比较重要的，经常看到有人开发公众号因为没有对`access_token`进行缓存，判断是否过期，导致`access_token`的调用`api`次数超过限制而影响业务的情况，熟悉的人都知道使用`redis`基本上都是做缓存，因为他简单、速度快，可以说是个\"快男\"。使用`reids`做抽奖也很普遍，有空可以试试。本篇本章暂时只讲`key`、`hash`、`list`\n\n## redis简介\n\n- Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\n- Redis 与其他 key - value 缓存产品有以下三个特点：\n  1. Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\n  2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n  3. Redis支持数据的备份，即master-slave模式的数据备份。\n\n## 为什么要用redis（优势）\n\n1. 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。\n2. 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 安装运行及调试（这里以mac为例）\n\n1. 先去官网下载安装包：http://www.redis.net.cn/download/\n2. 解压安装\n\n```\n> tar xzf redis-3.0.6.tar.gz\n> make\n> sudo make install\n> cd /usr/local/bin && redis-server // 开启redis服务\n> cd /usr/local/bin && redis-cli // 开启redis调试服务\n```\n开启调试会显示下面的界面，现在你就可以开始使用redis的api了\n```\n> cd /usr/local/bin && redis-cli\n127.0.0.1:6379>\n```\n<!-- more -->\n## 全局api\n\n### 查询键\n\n```\n127.0.0.1:6379> keys *\n1) \"wclimb\"\n2) \"key\"\n3) \"me\"\n4) \"user\"\n5) \"user1\"\n```\n\n### 键的总数\n\n```\n127.0.0.1:6379> dbsize \n(integer) 5\n```\n\n### 检查键是否存在\n\n存在返回 1 ，不存在返回 0\n```\n127.0.0.1:6379> exists wclimb \n(integer) 1\n127.0.0.1:6379> exists wclimb1 \n(integer) 0\n```\n\n### 删除键\n\n返回结果为成功删除键的个数\n```\n127.0.0.1:6379> del user1 \n(integer) 1\n```\n\n### 键过期\n\nexpire key seconds 当超过过期时间，会自动删除，key在seconds秒后过期\nexpireat key timestamp 键在秒级时间戳timestamp后过期\npexpire key milliseconds 当超过过期时间，会自动删除，key在milliseconds毫秒后过期\npexpireat key milliseconds-timestamp key在毫秒级时间戳timestamp后过期\n\n```\n127.0.0.1:6379> expire user 10   // 10秒后user会被删除\n(integer) 1\n```\n\n### randomkey 随机返回一个键\n\n```\n127.0.0.1:6379> randomkey \n\"wclimb\"\n127.0.0.1:6379> randomkey \n\"me\"\n```\n\n## redis 键（key）\n\n```\nset key value [ex] [px] [nx|xx]\nex为键值设置秒级过期时间\npx为键值设置毫秒级过期时间\nnx键必须不存在，才可以设置成功，用于添加\nxx与nx相反，键必须存在，才可以设置成功，用于更新\nsetnx、setex 与上面的nx、ex作用相同\n```\n\n### 设置key(O(1))\n```\n127.0.0.1:6379> set name 25 \nOK\n127.0.0.1:6379> keys * \n1) \"wclimb\"\n2) \"key\"\n3) \"me\"\n4) \"name\"\n```\n\n### 获取key(O(1))\n```\n127.0.0.1:6379> get name \n\"25\"\n```\n\n### 批量设置key\n\nmset key value [key value ......]\n\n```\n127.0.0.1:6379> mset test1 1 test2 2\nOK\n127.0.0.1:6379> get test2\n\"2\"\n```\n\n### 追加值(O(1))\n\n```\n127.0.0.1:6379> append test2 apend\n(integer) 6\n127.0.0.1:6379> get test2 \n\"2apend\"\n```\n### 字符串长度\n\n```\n127.0.0.1:6379> strlen test2\n(integer) 6\n```\n\n## 哈希（hash）\n\nHGET KEY_NAME FIELD_NAME \n类似javscript里的对象 {}\n\n### 设置hash\n```\n127.0.0.1:6379> HMSET hash name wclimb age 25\nOK\n```\n\n### 获取hash\n```\n127.0.0.1:6379> hmget hash name\n1) \"wclimb\"\n```\n### 删除hash\n\nhdel key field [field ......] 会删除一个或多个field，返回结果为成功删除fiel的个数\n\n```\n127.0.0.1:6379> hdel hash name\n(integer) 1\n127.0.0.1:6379> hmget hash name  // 再获取就返回nil\n1) (nil)\n```\n\n### 获取所有field\n\n```\n127.0.0.1:6379> hkeys hash\n1) \"age\"\n127.0.0.1:6379> HMSET hash name wclimb from jiangxi\nOK\n127.0.0.1:6379> hkeys hash\n1) \"age\"\n2) \"name\"\n3) \"from\"\n```\n\n### 获取所有value\n```\n127.0.0.1:6379> hvals hash\n1) \"25\"\n2) \"wclimb\"\n3) \"jiangxi\"\n```\n\n## 列表（list）\n\n| 操作类型   | 操作    | \n| - |  --  | \n|  添加    |   rpush 、lpush、linsert    |  \n|   查\t    |   lrange、lindex、llen  |   \n|  删除    |   lpop 、rpop、 lrem、ltrim   |   \n|   修改\t    |   lset   |   \n|   阻塞操作\t    |   blpop、brpop  |   \n\n### 添加\n\n（1）从左边插入元素\nlpush key value [value......]\n```\n127.0.0.1:6379> LPUSH list redis\n(integer) 1\n```\n（1）从右边插入元素\nrpush key value [value......]\n```\n127.0.0.1:6379> RPUSH list test\n(integer) 2\n```\n\n### 查找\n\nlrange key start end 索引下标从左到右分别是0到N-1，从右到左分别是-1到-N；end选项包含了自身\nlrange key 0 -1 可以从左到右获取列表的所有元素\nlrange mylist 1 3 获取列表中第2个到第4个元素\n\n```\n127.0.0.1:6379> lrange list 0 1\n1) \"redis\"\n2) \"test\"\n```\n\n### 长度\n\n```\n127.0.0.1:6379> llen key\n(integer) 2\n```\n\n### 删除\n\n我们先添加几个\n\n```\n127.0.0.1:6379> LPUSH list a b c\n(integer) 5\n```\n\n（1）从列表右侧弹出元素 rpop key\n\n \n（2）从列表左侧弹出元素 lpop key\n\n先看看现在的列表\n```\n127.0.0.1:6379> lrange list 0 -1\n1) \"c\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n5) \"test\"\n```\n\n删除\n```\n127.0.0.1:6379> rpop list \n\"test\"\n```\n我们发现test被删除了，现在看看我们的列表\n```\n127.0.0.1:6379> lrange list 0 -1\n1) \"c\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n```\n\n### 修改\n\nlset key index newValue 修改指定索引下标的元素\n\n```\n127.0.0.1:6379> lset list 0 newValue\nOK\n127.0.0.1:6379> lrange list 0 -1\n1) \"newValue\"\n2) \"b\"\n3) \"a\"\n4) \"redis\"\n\n```\n第0个下标的元素被替换成最新的值\n\n## 使用node连接redis\n\n```\n> npm init\n> cnpm i reids -S\n> touch index.js\n> vim index.js\n```\n\n### 连接redis\n\nredis npm包链接 https://www.npmjs.com/package/redis\n\n```js\nvar redis = require('redis');\n\nvar client = redis.createClient(6379, '127.0.0.1');\nclient.on('error', function(err) {\n  console.log('Error ' + err);\n});\n```\n\n### 设置获取key\n\n```js\nclient.set('user', JSON.stringify({ name: 'wclimb', age: '18' }), redis.print);\nclient.get('user', function(err, value) {\n  if (err) throw err;\n  console.log('Got: ' + value);\n  client.quit();\n});\n```\n控制台打印\n\n```\n> node index.js\nReply: OK\nGot: {\"name\":\"wclimb\",\"age\":\"18\"}\n```\n\n\n### 设置获取hash\n\n```js\nclient.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\nclient.hgetall(\"hosts\", function (err, obj) {\n  console.dir(obj);\n});\n```\n控制台打印\n```\n> node index.js\n{ mjr: '1', another: '23', home: '1234' }\n```\n\n### 设置获取list\n\n```js\nclient.LPUSH('list', [1, 2, 3, 4], redis.print);\nclient.lrange('list', '0', '-1', redis.print);\n```\n控制台打印\n```\n> node index.js\nReply: 8\nReply: 4,3,2,1,newValue,b,a,redis\n```\n\n基本用法和上面讲的都差不多，直接上去一顿写就完事了，完全可以不带脑子的使用各种api","slug":"redis简易教程以及使用nodejs连接redis","published":1,"updated":"2019-06-06T01:06:26.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9g001859x3q8q685ug","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直没机会学习<code>redis</code>，最近抽空学了一下，因为知道<code>reids</code>还是比较重要的，经常看到有人开发公众号因为没有对<code>access_token</code>进行缓存，判断是否过期，导致<code>access_token</code>的调用<code>api</code>次数超过限制而影响业务的情况，熟悉的人都知道使用<code>redis</code>基本上都是做缓存，因为他简单、速度快，可以说是个”快男”。使用<code>reids</code>做抽奖也很普遍，有空可以试试。本篇本章暂时只讲<code>key</code>、<code>hash</code>、<code>list</code></p>\n<h2 id=\"redis简介\"><a href=\"#redis简介\" class=\"headerlink\" title=\"redis简介\"></a>redis简介</h2><ul>\n<li>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</li>\n<li>Redis 与其他 key - value 缓存产品有以下三个特点：<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"为什么要用redis（优势）\"><a href=\"#为什么要用redis（优势）\" class=\"headerlink\" title=\"为什么要用redis（优势）\"></a>为什么要用redis（优势）</h2><ol>\n<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>\n<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"安装运行及调试（这里以mac为例）\"><a href=\"#安装运行及调试（这里以mac为例）\" class=\"headerlink\" title=\"安装运行及调试（这里以mac为例）\"></a>安装运行及调试（这里以mac为例）</h2><ol>\n<li>先去官网下载安装包：<a href=\"http://www.redis.net.cn/download/\" target=\"_blank\" rel=\"noopener\">http://www.redis.net.cn/download/</a></li>\n<li>解压安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; tar xzf redis-3.0.6.tar.gz</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; sudo make install</span><br><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-server // 开启redis服务</span><br><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-cli // 开启redis调试服务</span><br></pre></td></tr></table></figure>\n<p>开启调试会显示下面的界面，现在你就可以开始使用redis的api了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"全局api\"><a href=\"#全局api\" class=\"headerlink\" title=\"全局api\"></a>全局api</h2><h3 id=\"查询键\"><a href=\"#查询键\" class=\"headerlink\" title=\"查询键\"></a>查询键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br><span class=\"line\">2) &quot;key&quot;</span><br><span class=\"line\">3) &quot;me&quot;</span><br><span class=\"line\">4) &quot;user&quot;</span><br><span class=\"line\">5) &quot;user1&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"键的总数\"><a href=\"#键的总数\" class=\"headerlink\" title=\"键的总数\"></a>键的总数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; dbsize </span><br><span class=\"line\">(integer) 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查键是否存在\"><a href=\"#检查键是否存在\" class=\"headerlink\" title=\"检查键是否存在\"></a>检查键是否存在</h3><p>存在返回 1 ，不存在返回 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists wclimb </span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; exists wclimb1 </span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除键\"><a href=\"#删除键\" class=\"headerlink\" title=\"删除键\"></a>删除键</h3><p>返回结果为成功删除键的个数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del user1 </span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"键过期\"><a href=\"#键过期\" class=\"headerlink\" title=\"键过期\"></a>键过期</h3><p>expire key seconds 当超过过期时间，会自动删除，key在seconds秒后过期<br>expireat key timestamp 键在秒级时间戳timestamp后过期<br>pexpire key milliseconds 当超过过期时间，会自动删除，key在milliseconds毫秒后过期<br>pexpireat key milliseconds-timestamp key在毫秒级时间戳timestamp后过期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; expire user 10   // 10秒后user会被删除</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"randomkey-随机返回一个键\"><a href=\"#randomkey-随机返回一个键\" class=\"headerlink\" title=\"randomkey 随机返回一个键\"></a>randomkey 随机返回一个键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; randomkey </span><br><span class=\"line\">&quot;wclimb&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; randomkey </span><br><span class=\"line\">&quot;me&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"redis-键（key）\"><a href=\"#redis-键（key）\" class=\"headerlink\" title=\"redis 键（key）\"></a>redis 键（key）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set key value [ex] [px] [nx|xx]</span><br><span class=\"line\">ex为键值设置秒级过期时间</span><br><span class=\"line\">px为键值设置毫秒级过期时间</span><br><span class=\"line\">nx键必须不存在，才可以设置成功，用于添加</span><br><span class=\"line\">xx与nx相反，键必须存在，才可以设置成功，用于更新</span><br><span class=\"line\">setnx、setex 与上面的nx、ex作用相同</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置key-O-1\"><a href=\"#设置key-O-1\" class=\"headerlink\" title=\"设置key(O(1))\"></a>设置key(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set name 25 </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys * </span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br><span class=\"line\">2) &quot;key&quot;</span><br><span class=\"line\">3) &quot;me&quot;</span><br><span class=\"line\">4) &quot;name&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取key-O-1\"><a href=\"#获取key-O-1\" class=\"headerlink\" title=\"获取key(O(1))\"></a>获取key(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get name </span><br><span class=\"line\">&quot;25&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"批量设置key\"><a href=\"#批量设置key\" class=\"headerlink\" title=\"批量设置key\"></a>批量设置key</h3><p>mset key value [key value ……]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset test1 1 test2 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get test2</span><br><span class=\"line\">&quot;2&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"追加值-O-1\"><a href=\"#追加值-O-1\" class=\"headerlink\" title=\"追加值(O(1))\"></a>追加值(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append test2 apend</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get test2 </span><br><span class=\"line\">&quot;2apend&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; strlen test2</span><br><span class=\"line\">(integer) 6</span><br></pre></td></tr></table></figure>\n<h2 id=\"哈希（hash）\"><a href=\"#哈希（hash）\" class=\"headerlink\" title=\"哈希（hash）\"></a>哈希（hash）</h2><p>HGET KEY_NAME FIELD_NAME<br>类似javscript里的对象 {}</p>\n<h3 id=\"设置hash\"><a href=\"#设置hash\" class=\"headerlink\" title=\"设置hash\"></a>设置hash</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET hash name wclimb age 25</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取hash\"><a href=\"#获取hash\" class=\"headerlink\" title=\"获取hash\"></a>获取hash</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hmget hash name</span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除hash\"><a href=\"#删除hash\" class=\"headerlink\" title=\"删除hash\"></a>删除hash</h3><p>hdel key field [field ……] 会删除一个或多个field，返回结果为成功删除fiel的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hdel hash name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget hash name  // 再获取就返回nil</span><br><span class=\"line\">1) (nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有field\"><a href=\"#获取所有field\" class=\"headerlink\" title=\"获取所有field\"></a>获取所有field</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hkeys hash</span><br><span class=\"line\">1) &quot;age&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HMSET hash name wclimb from jiangxi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys hash</span><br><span class=\"line\">1) &quot;age&quot;</span><br><span class=\"line\">2) &quot;name&quot;</span><br><span class=\"line\">3) &quot;from&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有value\"><a href=\"#获取所有value\" class=\"headerlink\" title=\"获取所有value\"></a>获取所有value</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hvals hash</span><br><span class=\"line\">1) &quot;25&quot;</span><br><span class=\"line\">2) &quot;wclimb&quot;</span><br><span class=\"line\">3) &quot;jiangxi&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表（list）\"><a href=\"#列表（list）\" class=\"headerlink\" title=\"列表（list）\"></a>列表（list）</h2><table>\n<thead>\n<tr>\n<th>操作类型</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>添加</td>\n<td>rpush 、lpush、linsert</td>\n</tr>\n<tr>\n<td>查</td>\n<td>lrange、lindex、llen</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>lpop 、rpop、 lrem、ltrim</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>lset</td>\n</tr>\n<tr>\n<td>阻塞操作</td>\n<td>blpop、brpop</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><p>（1）从左边插入元素<br>lpush key value [value……]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH list redis</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure></p>\n<p>（1）从右边插入元素<br>rpush key value [value……]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; RPUSH list test</span><br><span class=\"line\">(integer) 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>lrange key start end 索引下标从左到右分别是0到N-1，从右到左分别是-1到-N；end选项包含了自身<br>lrange key 0 -1 可以从左到右获取列表的所有元素<br>lrange mylist 1 3 获取列表中第2个到第4个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 1</span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; llen key</span><br><span class=\"line\">(integer) 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>我们先添加几个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH list a b c</span><br><span class=\"line\">(integer) 5</span><br></pre></td></tr></table></figure>\n<p>（1）从列表右侧弹出元素 rpop key</p>\n<p>（2）从列表左侧弹出元素 lpop key</p>\n<p>先看看现在的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br><span class=\"line\">5) &quot;test&quot;</span><br></pre></td></tr></table></figure></p>\n<p>删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; rpop list </span><br><span class=\"line\">&quot;test&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我们发现test被删除了，现在看看我们的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>lset key index newValue 修改指定索引下标的元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lset list 0 newValue</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;newValue&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br></pre></td></tr></table></figure>\n<p>第0个下标的元素被替换成最新的值</p>\n<h2 id=\"使用node连接redis\"><a href=\"#使用node连接redis\" class=\"headerlink\" title=\"使用node连接redis\"></a>使用node连接redis</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init</span><br><span class=\"line\">&gt; cnpm i reids -S</span><br><span class=\"line\">&gt; touch index.js</span><br><span class=\"line\">&gt; vim index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接redis\"><a href=\"#连接redis\" class=\"headerlink\" title=\"连接redis\"></a>连接redis</h3><p>redis npm包链接 <a href=\"https://www.npmjs.com/package/redis\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redis</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">'127.0.0.1'</span>);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error '</span> + err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置获取key\"><a href=\"#设置获取key\" class=\"headerlink\" title=\"设置获取key\"></a>设置获取key</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.set(<span class=\"string\">'user'</span>, <span class=\"built_in\">JSON</span>.stringify(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'wclimb'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'18'</span> &#125;), redis.print);</span><br><span class=\"line\">client.get(<span class=\"string\">'user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Got: '</span> + value);</span><br><span class=\"line\">  client.quit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台打印</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">Reply: OK</span><br><span class=\"line\">Got: &#123;&quot;name&quot;:&quot;wclimb&quot;,&quot;age&quot;:&quot;18&quot;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置获取hash\"><a href=\"#设置获取hash\" class=\"headerlink\" title=\"设置获取hash\"></a>设置获取hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset(<span class=\"string\">\"hosts\"</span>, <span class=\"string\">\"mjr\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"another\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"home\"</span>, <span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">client.hgetall(<span class=\"string\">\"hosts\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.dir(obj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">&#123; mjr: &apos;1&apos;, another: &apos;23&apos;, home: &apos;1234&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置获取list\"><a href=\"#设置获取list\" class=\"headerlink\" title=\"设置获取list\"></a>设置获取list</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.LPUSH(<span class=\"string\">'list'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], redis.print);</span><br><span class=\"line\">client.lrange(<span class=\"string\">'list'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'-1'</span>, redis.print);</span><br></pre></td></tr></table></figure>\n<p>控制台打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">Reply: 8</span><br><span class=\"line\">Reply: 4,3,2,1,newValue,b,a,redis</span><br></pre></td></tr></table></figure></p>\n<p>基本用法和上面讲的都差不多，直接上去一顿写就完事了，完全可以不带脑子的使用各种api</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直没机会学习<code>redis</code>，最近抽空学了一下，因为知道<code>reids</code>还是比较重要的，经常看到有人开发公众号因为没有对<code>access_token</code>进行缓存，判断是否过期，导致<code>access_token</code>的调用<code>api</code>次数超过限制而影响业务的情况，熟悉的人都知道使用<code>redis</code>基本上都是做缓存，因为他简单、速度快，可以说是个”快男”。使用<code>reids</code>做抽奖也很普遍，有空可以试试。本篇本章暂时只讲<code>key</code>、<code>hash</code>、<code>list</code></p>\n<h2 id=\"redis简介\"><a href=\"#redis简介\" class=\"headerlink\" title=\"redis简介\"></a>redis简介</h2><ul>\n<li>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</li>\n<li>Redis 与其他 key - value 缓存产品有以下三个特点：<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"为什么要用redis（优势）\"><a href=\"#为什么要用redis（优势）\" class=\"headerlink\" title=\"为什么要用redis（优势）\"></a>为什么要用redis（优势）</h2><ol>\n<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>\n<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"安装运行及调试（这里以mac为例）\"><a href=\"#安装运行及调试（这里以mac为例）\" class=\"headerlink\" title=\"安装运行及调试（这里以mac为例）\"></a>安装运行及调试（这里以mac为例）</h2><ol>\n<li>先去官网下载安装包：<a href=\"http://www.redis.net.cn/download/\" target=\"_blank\" rel=\"noopener\">http://www.redis.net.cn/download/</a></li>\n<li>解压安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; tar xzf redis-3.0.6.tar.gz</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; sudo make install</span><br><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-server // 开启redis服务</span><br><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-cli // 开启redis调试服务</span><br></pre></td></tr></table></figure>\n<p>开启调试会显示下面的界面，现在你就可以开始使用redis的api了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /usr/local/bin &amp;&amp; redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"全局api\"><a href=\"#全局api\" class=\"headerlink\" title=\"全局api\"></a>全局api</h2><h3 id=\"查询键\"><a href=\"#查询键\" class=\"headerlink\" title=\"查询键\"></a>查询键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br><span class=\"line\">2) &quot;key&quot;</span><br><span class=\"line\">3) &quot;me&quot;</span><br><span class=\"line\">4) &quot;user&quot;</span><br><span class=\"line\">5) &quot;user1&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"键的总数\"><a href=\"#键的总数\" class=\"headerlink\" title=\"键的总数\"></a>键的总数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; dbsize </span><br><span class=\"line\">(integer) 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查键是否存在\"><a href=\"#检查键是否存在\" class=\"headerlink\" title=\"检查键是否存在\"></a>检查键是否存在</h3><p>存在返回 1 ，不存在返回 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists wclimb </span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; exists wclimb1 </span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除键\"><a href=\"#删除键\" class=\"headerlink\" title=\"删除键\"></a>删除键</h3><p>返回结果为成功删除键的个数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del user1 </span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"键过期\"><a href=\"#键过期\" class=\"headerlink\" title=\"键过期\"></a>键过期</h3><p>expire key seconds 当超过过期时间，会自动删除，key在seconds秒后过期<br>expireat key timestamp 键在秒级时间戳timestamp后过期<br>pexpire key milliseconds 当超过过期时间，会自动删除，key在milliseconds毫秒后过期<br>pexpireat key milliseconds-timestamp key在毫秒级时间戳timestamp后过期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; expire user 10   // 10秒后user会被删除</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"randomkey-随机返回一个键\"><a href=\"#randomkey-随机返回一个键\" class=\"headerlink\" title=\"randomkey 随机返回一个键\"></a>randomkey 随机返回一个键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; randomkey </span><br><span class=\"line\">&quot;wclimb&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; randomkey </span><br><span class=\"line\">&quot;me&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"redis-键（key）\"><a href=\"#redis-键（key）\" class=\"headerlink\" title=\"redis 键（key）\"></a>redis 键（key）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set key value [ex] [px] [nx|xx]</span><br><span class=\"line\">ex为键值设置秒级过期时间</span><br><span class=\"line\">px为键值设置毫秒级过期时间</span><br><span class=\"line\">nx键必须不存在，才可以设置成功，用于添加</span><br><span class=\"line\">xx与nx相反，键必须存在，才可以设置成功，用于更新</span><br><span class=\"line\">setnx、setex 与上面的nx、ex作用相同</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置key-O-1\"><a href=\"#设置key-O-1\" class=\"headerlink\" title=\"设置key(O(1))\"></a>设置key(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set name 25 </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys * </span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br><span class=\"line\">2) &quot;key&quot;</span><br><span class=\"line\">3) &quot;me&quot;</span><br><span class=\"line\">4) &quot;name&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取key-O-1\"><a href=\"#获取key-O-1\" class=\"headerlink\" title=\"获取key(O(1))\"></a>获取key(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get name </span><br><span class=\"line\">&quot;25&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"批量设置key\"><a href=\"#批量设置key\" class=\"headerlink\" title=\"批量设置key\"></a>批量设置key</h3><p>mset key value [key value ……]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset test1 1 test2 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get test2</span><br><span class=\"line\">&quot;2&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"追加值-O-1\"><a href=\"#追加值-O-1\" class=\"headerlink\" title=\"追加值(O(1))\"></a>追加值(O(1))</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append test2 apend</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get test2 </span><br><span class=\"line\">&quot;2apend&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; strlen test2</span><br><span class=\"line\">(integer) 6</span><br></pre></td></tr></table></figure>\n<h2 id=\"哈希（hash）\"><a href=\"#哈希（hash）\" class=\"headerlink\" title=\"哈希（hash）\"></a>哈希（hash）</h2><p>HGET KEY_NAME FIELD_NAME<br>类似javscript里的对象 {}</p>\n<h3 id=\"设置hash\"><a href=\"#设置hash\" class=\"headerlink\" title=\"设置hash\"></a>设置hash</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HMSET hash name wclimb age 25</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取hash\"><a href=\"#获取hash\" class=\"headerlink\" title=\"获取hash\"></a>获取hash</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hmget hash name</span><br><span class=\"line\">1) &quot;wclimb&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除hash\"><a href=\"#删除hash\" class=\"headerlink\" title=\"删除hash\"></a>删除hash</h3><p>hdel key field [field ……] 会删除一个或多个field，返回结果为成功删除fiel的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hdel hash name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget hash name  // 再获取就返回nil</span><br><span class=\"line\">1) (nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有field\"><a href=\"#获取所有field\" class=\"headerlink\" title=\"获取所有field\"></a>获取所有field</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hkeys hash</span><br><span class=\"line\">1) &quot;age&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HMSET hash name wclimb from jiangxi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys hash</span><br><span class=\"line\">1) &quot;age&quot;</span><br><span class=\"line\">2) &quot;name&quot;</span><br><span class=\"line\">3) &quot;from&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取所有value\"><a href=\"#获取所有value\" class=\"headerlink\" title=\"获取所有value\"></a>获取所有value</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hvals hash</span><br><span class=\"line\">1) &quot;25&quot;</span><br><span class=\"line\">2) &quot;wclimb&quot;</span><br><span class=\"line\">3) &quot;jiangxi&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表（list）\"><a href=\"#列表（list）\" class=\"headerlink\" title=\"列表（list）\"></a>列表（list）</h2><table>\n<thead>\n<tr>\n<th>操作类型</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>添加</td>\n<td>rpush 、lpush、linsert</td>\n</tr>\n<tr>\n<td>查</td>\n<td>lrange、lindex、llen</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>lpop 、rpop、 lrem、ltrim</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>lset</td>\n</tr>\n<tr>\n<td>阻塞操作</td>\n<td>blpop、brpop</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><p>（1）从左边插入元素<br>lpush key value [value……]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH list redis</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure></p>\n<p>（1）从右边插入元素<br>rpush key value [value……]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; RPUSH list test</span><br><span class=\"line\">(integer) 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h3><p>lrange key start end 索引下标从左到右分别是0到N-1，从右到左分别是-1到-N；end选项包含了自身<br>lrange key 0 -1 可以从左到右获取列表的所有元素<br>lrange mylist 1 3 获取列表中第2个到第4个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 1</span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;test&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; llen key</span><br><span class=\"line\">(integer) 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>我们先添加几个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH list a b c</span><br><span class=\"line\">(integer) 5</span><br></pre></td></tr></table></figure>\n<p>（1）从列表右侧弹出元素 rpop key</p>\n<p>（2）从列表左侧弹出元素 lpop key</p>\n<p>先看看现在的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br><span class=\"line\">5) &quot;test&quot;</span><br></pre></td></tr></table></figure></p>\n<p>删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; rpop list </span><br><span class=\"line\">&quot;test&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我们发现test被删除了，现在看看我们的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>lset key index newValue 修改指定索引下标的元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lset list 0 newValue</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) &quot;newValue&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;redis&quot;</span><br></pre></td></tr></table></figure>\n<p>第0个下标的元素被替换成最新的值</p>\n<h2 id=\"使用node连接redis\"><a href=\"#使用node连接redis\" class=\"headerlink\" title=\"使用node连接redis\"></a>使用node连接redis</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init</span><br><span class=\"line\">&gt; cnpm i reids -S</span><br><span class=\"line\">&gt; touch index.js</span><br><span class=\"line\">&gt; vim index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接redis\"><a href=\"#连接redis\" class=\"headerlink\" title=\"连接redis\"></a>连接redis</h3><p>redis npm包链接 <a href=\"https://www.npmjs.com/package/redis\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redis</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">'127.0.0.1'</span>);</span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error '</span> + err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置获取key\"><a href=\"#设置获取key\" class=\"headerlink\" title=\"设置获取key\"></a>设置获取key</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.set(<span class=\"string\">'user'</span>, <span class=\"built_in\">JSON</span>.stringify(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'wclimb'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'18'</span> &#125;), redis.print);</span><br><span class=\"line\">client.get(<span class=\"string\">'user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Got: '</span> + value);</span><br><span class=\"line\">  client.quit();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台打印</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">Reply: OK</span><br><span class=\"line\">Got: &#123;&quot;name&quot;:&quot;wclimb&quot;,&quot;age&quot;:&quot;18&quot;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置获取hash\"><a href=\"#设置获取hash\" class=\"headerlink\" title=\"设置获取hash\"></a>设置获取hash</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.hmset(<span class=\"string\">\"hosts\"</span>, <span class=\"string\">\"mjr\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"another\"</span>, <span class=\"string\">\"23\"</span>, <span class=\"string\">\"home\"</span>, <span class=\"string\">\"1234\"</span>);</span><br><span class=\"line\">client.hgetall(<span class=\"string\">\"hosts\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.dir(obj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">&#123; mjr: &apos;1&apos;, another: &apos;23&apos;, home: &apos;1234&apos; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置获取list\"><a href=\"#设置获取list\" class=\"headerlink\" title=\"设置获取list\"></a>设置获取list</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.LPUSH(<span class=\"string\">'list'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], redis.print);</span><br><span class=\"line\">client.lrange(<span class=\"string\">'list'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'-1'</span>, redis.print);</span><br></pre></td></tr></table></figure>\n<p>控制台打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node index.js</span><br><span class=\"line\">Reply: 8</span><br><span class=\"line\">Reply: 4,3,2,1,newValue,b,a,redis</span><br></pre></td></tr></table></figure></p>\n<p>基本用法和上面讲的都差不多，直接上去一顿写就完事了，完全可以不带脑子的使用各种api</p>"},{"title":"Node+Koa2+Mysql 搭建简易博客","date":"2017-07-12T06:23:15.000Z","_content":"\n## Koa2-blog\n\n> 2018-1-5 更新教程（新增上传头像、新增分页、样式改版、发布文章和评论支持markdown语法）\n> 现在GitHub的代码结构有变，优化了蛮多东西\n\nNode+Koa2+Mysql 搭建简易博客\n\n## 预览地址\n\nhttp://blog.wclimb.site\n\n## 写在前面\n\n本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\nps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！\n\n## 演示效果\n\n![img](http://www.wclimb.site/cdn/blog1.gif)\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- koa `v2.3.0`\n- mysql `v5.7.0`\n\n## 准备工作\n\n文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 http://es6.ruanyifeng.com/ \n\n如果你已经配置好node和mysql可以跳过\n\n> 经常会有人问报错的问题，运行出错大部分是因为不支持async，升级node版本可解决\n\n```\n$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本\n```\n下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456\n\n```\n进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\n\n```\n然后开启mysql\n```\n$ mysql -u root -p\t\n\n```\n输入密码之后创建`database`(数据库)，`nodesql`是我们创建的数据库\n```\n$ create database nodesql;\n```\n记住sql语句后面一定要跟`;`符号，接下来看看我们创建好的数据库列表\n\n```\n$ show databases;\n```\n![img](/img/database.png)\n\n启用创建的数据库\n```\n$ use nodesql;\n```\n查看数据库中的表\n<!-- more -->\n```\n$ show tables;\n```\n显示`Empty set (0.00 sec)`，因为我们还没有建表，稍后会用代码建表\n注释：\n这是后面建表之后的状态\n![img](/img/tables.png)\n\n## 目录结构\n\n![img](/img/item.png)\n\n- config 存放默认文件\n- lib 存放操作数据库文件\n- middlewares 存放判断登录与否文件\n- public 存放样式和头像文件\n- routes 存放路由文件\n- views 存放模板文件\n- index 程序主文件\n- package.json 包括项目名、作者、依赖等等\n\n首先我们创建koa2-blog文件夹，然后`cd koa2-blog`\n```\n 接着使用 npm init 来创建package.json\n```\n接着安装包，安装之前我们使用[cnpm](https://npm.taobao.org/)安装 \n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n```\n$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs markdown-it chai mocha koa-static-cache --save-dev\n```\n各模块用处\n\n1. `koa node`框架\n2. `koa-bodyparser` 表单解析中间件\n3. `koa-mysql-session`、`koa-session-minimal` 处理数据库的中间件\n4. `koa-router` 路由中间件\n5. `koa-static` 静态资源加载中间件\n6. `ejs` 模板引擎\n7. `md5` 密码加密\n8. `moment` 时间中间件\n9. `mysql` 数据库\n10. `markdown-it` markdown语法\n11. `koa-views` 模板呈现中间件\n12. `chai` `mocha` 测试使用\n13. `koa-static-cache` 文件缓存\n\n在文件夹里面新建所需文件\n\n![img](/img/view.png)\n\n\n## 首先配置config\n\n我们新建`default.js`文件 \n\n```\nconst config = {\n  // 启动端口\n  port: 3000,\n\n  // 数据库配置\n  database: {\n    DATABASE: 'nodesql',\n    USERNAME: 'root',\n    PASSWORD: '123456',\n    PORT: '3306',\n    HOST: 'localhost'\n  }\n}\n\nmodule.exports = config\n\n```\n这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用\n\n## 配置index.js文件\n`index.js`\n\n```js\nconst Koa=require('koa');\nconst path=require('path')\nconst bodyParser = require('koa-bodyparser');\nconst ejs=require('ejs');\nconst session = require('koa-session-minimal');\nconst MysqlStore = require('koa-mysql-session');\nconst config = require('./config/default.js');\nconst router=require('koa-router')\nconst views = require('koa-views')\n// const koaStatic = require('koa-static')\nconst staticCache = require('koa-static-cache')\nconst app = new Koa()\n\n\n// session存储配置\nconst sessionMysqlConfig= {\n  user: config.database.USERNAME,\n  password: config.database.PASSWORD,\n  database: config.database.DATABASE,\n  host: config.database.HOST,\n}\n\n// 配置session中间件\napp.use(session({\n  key: 'USER_SID',\n  store: new MysqlStore(sessionMysqlConfig)\n}))\n\n\n// 配置静态资源加载中间件\n// app.use(koaStatic(\n//   path.join(__dirname , './public')\n// ))\n// 缓存\napp.use(staticCache(path.join(__dirname, './public'), { dynamic: true }, {\n  maxAge: 365 * 24 * 60 * 60\n}))\napp.use(staticCache(path.join(__dirname, './images'), { dynamic: true }, {\n  maxAge: 365 * 24 * 60 * 60\n}))\n\n// 配置服务端模板渲染引擎中间件\napp.use(views(path.join(__dirname, './views'), {\n  extension: 'ejs'\n}))\napp.use(bodyParser({\n  formLimit: '1mb'\n}))\n\n//  路由(我们先注释三个，等后面添加好了再取消注释，因为我们还没有定义路由，稍后会先实现注册)\n//app.use(require('./routers/signin.js').routes())\napp.use(require('./routers/signup.js').routes())\n//app.use(require('./routers/posts.js').routes())\n//app.use(require('./routers/signout.js').routes())\n\n\napp.listen(3000)\n\nconsole.log(`listening on port ${config.port}`)\n\n```\n我们使用`koa-session-minimal``koa-mysql-session`来进行数据库的操作\n使用`koa-static`配置静态资源，目录设置为`public`\n使用`ejs`模板引擎\n使用`koa-bodyparser`来解析提交的表单信息\n使用`koa-router`做路由\n使用`koa-static-cache`来缓存文件\n之前我们配置了default.js，我们就可以在这里使用了\n首先引入进来 var config = require('./config/default.js');\n然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。\n\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n\n## 配置lib的mysql.js文件\n\n\n关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数`query`，通过返回promise的方式以便可以方便用`.then()`来获取数据库返回的数据，然后我们定义了三个表的字段，通过`createTable`来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。\n\n> 这里只介绍注册用户insertData，后续的可以自行查看，都差不多\n\n\n```js\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users set name=?,pass=?,avator=?,moment=?;\"\n  return query( _sql, value )\n}\n```\n我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name、pass、avator、moment，就是用户名、密码、头像、注册时间，最后调用`query`函数把sql语句传进去（之前的写法是`\"insert into users(name,pass) values(?,?);\"`,换成现在得更容易理解）\n\n\nlib/mysql.js\n```js\nvar mysql = require('mysql');\nvar config = require('../config/default.js')\n\nvar pool  = mysql.createPool({\n  host     : config.database.HOST,\n  user     : config.database.USERNAME,\n  password : config.database.PASSWORD,\n  database : config.database.DATABASE\n});\n\nlet query = function( sql, values ) {\n\n  return new Promise(( resolve, reject ) => {\n    pool.getConnection(function(err, connection) {\n      if (err) {\n        reject( err )\n      } else {\n        connection.query(sql, values, ( err, rows) => {\n\n          if ( err ) {\n            reject( err )\n          } else {\n            resolve( rows )\n          }\n          connection.release()\n        })\n      }\n    })\n  })\n\n}\n\n\n// let query = function( sql, values ) {\n// pool.getConnection(function(err, connection) {\n//   // 使用连接\n//   connection.query( sql,values, function(err, rows) {\n//     // 使用连接执行查询\n//     console.log(rows)\n//     connection.release();\n//     //连接不再使用，返回到连接池\n//   });\n// });\n// }\n\nlet users =\n    `create table if not exists users(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     pass VARCHAR(100) NOT NULL,\n     avator VARCHAR(100) NOT NULL,\n     moment VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet posts =\n    `create table if not exists posts(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     title TEXT(0) NOT NULL,\n     content TEXT(0) NOT NULL,\n     md TEXT(0) NOT NULL,\n     uid VARCHAR(40) NOT NULL,\n     moment VARCHAR(100) NOT NULL,\n     comments VARCHAR(200) NOT NULL DEFAULT '0',\n     pv VARCHAR(40) NOT NULL DEFAULT '0',\n     avator VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet comment =\n    `create table if not exists comment(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     content TEXT(0) NOT NULL,\n     moment VARCHAR(40) NOT NULL,\n     postid VARCHAR(40) NOT NULL,\n     avator VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet createTable = function( sql ) {\n  return query( sql, [] )\n}\n\n// 建表\ncreateTable(users)\ncreateTable(posts)\ncreateTable(comment)\n\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users set name=?,pass=?,avator=?,moment=?;\"\n  return query( _sql, value )\n}\n// 删除用户\nlet deleteUserData = function( name ) {\n  let _sql = `delete from users where name=\"${name}\";`\n  return query( _sql )\n}\n// 查找用户\nlet findUserData = function( name ) {\n  let _sql = `select * from users where name=\"${name}\";`\n  return query( _sql )\n}\n// 发表文章\nlet insertPost = function( value ) {\n  let _sql = \"insert into posts set name=?,title=?,content=?,md=?,uid=?,moment=?,avator=?;\"\n  return query( _sql, value )\n}\n// 更新文章评论数\nlet updatePostComment = function( value ) {\n  let _sql = \"update posts set comments=? where id=?\"\n  return query( _sql, value )\n}\n\n// 更新浏览数\nlet updatePostPv = function( value ) {\n  let _sql = \"update posts set pv=? where id=?\"\n  return query( _sql, value )\n}\n\n// 发表评论\nlet insertComment = function( value ) {\n  let _sql = \"insert into comment set name=?,content=?,moment=?,postid=?,avator=?;\"\n  return query( _sql, value )\n}\n// 通过名字查找用户\nlet findDataByName = function ( name ) {\n  let _sql = `select * from users where name=\"${name}\";`\n  return query( _sql)\n}\n// 通过文章的名字查找用户\nlet findDataByUser = function ( name ) {\n  let _sql = `select * from posts where name=\"${name}\";`\n  return query( _sql)\n}\n// 通过文章id查找\nlet findDataById = function ( id ) {\n  let _sql = `select * from posts where id=\"${id}\";`\n  return query( _sql)\n}\n// 通过评论id查找\nlet findCommentById = function ( id ) {\n  let _sql = `select * FROM comment where postid=\"${id}\";`\n  return query( _sql)\n}\n\n// 查询所有文章\nlet findAllPost = function () {\n  let _sql = ` select * FROM posts;`\n  return query( _sql)\n}\n// 查询分页文章\nlet findPostByPage = function (page) {\n  let _sql = ` select * FROM posts limit ${(page-1)*10},10;`\n  return query( _sql)\n}\n// 查询个人分页文章\nlet findPostByUserPage = function (name,page) {\n  let _sql = ` select * FROM posts where name=\"${name}\" order by id desc limit ${(page-1)*10},10 ;`\n  return query( _sql)\n}\n// 更新修改文章\nlet updatePost = function(values){\n  let _sql = `update posts set  title=?,content=?,md=? where id=?`\n  return query(_sql,values)\n}\n// 删除文章\nlet deletePost = function(id){\n  let _sql = `delete from posts where id = ${id}`\n  return query(_sql)\n}\n// 删除评论\nlet deleteComment = function(id){\n  let _sql = `delete from comment where id=${id}`\n  return query(_sql)\n}\n// 删除所有评论\nlet deleteAllPostComment = function(id){\n  let _sql = `delete from comment where postid=${id}`\n  return query(_sql)\n}\n// 查找评论数\nlet findCommentLength = function(id){\n  let _sql = `select content from comment where postid in (select id from posts where id=${id})`\n  return query(_sql)\n}\n\n// 滚动无限加载数据\nlet findPageById = function(page){\n  let _sql = `select * from posts limit ${(page-1)*5},5;`\n  return query(_sql)\n}\n// 评论分页\nlet findCommentByPage = function(page,postId){\n  let _sql = `select * from comment where postid=${postId} order by id desc limit ${(page-1)*10},10;`\n  return query(_sql)\n}\n\nmodule.exports = {\n\tquery,\n\tcreateTable,\n\tinsertData,\n  \tdeleteUserData,\n  \tfindUserData,\n\tfindDataByName,\n  \tinsertPost,\n  \tfindAllPost,\n  \tfindPostByPage,\n\tfindPostByUserPage,\n\tfindDataByUser,\n\tfindDataById,\n\tinsertComment,\n\tfindCommentById,\n\tupdatePost,\n\tdeletePost,\n\tdeleteComment,\n\tfindCommentLength,\n\tupdatePostComment,\n\tdeleteAllPostComment,\n\tupdatePostPv,\n\tfindPageById,\n\tfindCommentByPage\n}\n\n\n```\n下面是我们建的表\n\n| users   | posts    |  comment  |\n| :----: | :----:   | :----: |\n|   id    |   id    |   id    |\n|   name    |   name    |   name    |\n|   pass    |   title    |   content    |\n|   avator     | content      |   moment    |\n|    moment     | md      |    postid   |\n|     -    | uid      |   avator    |\n|     -    | moment      |    -   |\n|     -   | comments      |    -   |      \n|     -   | pv             |   -   |      \n|     -   |  avator       |    -   |    \n\n\n* id主键递增\n* name: 用户名\n* pass：密码\n* avator：头像\n* title：文章标题\n* content：文章内容和评论\n* md：markdown语法\n* uid：发表文章的用户id \n* moment：创建时间\n* comments：文章评论数\n* pv：文章浏览数\n* postid：文章id\n\n\n现在感觉有点枯燥，那我们先来实现一下注册吧\n\n## 实现注册页面\n\nrouters/singup.js \n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js');\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\nconst moment = require('moment');\nconst fs = require('fs')\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n    \nmodule.exports = router\n```\n使用get方式得到'/signup'页面，然后渲染signup模板，这里我们还没有在写signup.ejs\n\nviews/signup.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>注册</title>\n</head>\n<body>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"请输入用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"请输入密码\" class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input placeholder=\"请确认密码\" class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>上传头像：</label>\n\t\t\t\t<input type=\"file\" name=\"avator\" id=\"avator\">\n\t\t\t\t<input type=\"hidden\" id=\"avatorVal\">\n\t\t\t\t<img class=\"preview\" alt=\"预览头像\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n</body>\n</html>\n```\n我们先安装supervisor\n\n```\n$ cnpm i supervisor -g\n```\nsupervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序\n```\nsupervisor --harmony index\n```\n现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭\n\n## 完善注册功能\n\n首先我们来完善一下样式吧，稍微美化一下\n\npublic/index.css\n\n```css\nbody,\nheader,\nul,\nli,\np,\ndiv,\nhtml,\nspan,\nh3,\na,\nblockquote {\n    margin: 0;\n    padding: 0;\n    color: #333;\n}\n\nbody {\n    margin-bottom: 20px;\n}\nul,li{\n    list-style-type: none;\n}\na {\n    text-decoration: none;\n}\n\nheader {\n    width: 60%;\n    margin: 20px auto;\n}\nheader:after{\n    content: '';\n    clear: both;\n    display: table;\n}\nheader .user_right{\n    float: right\n}\nheader .user_right .active{\n    color: #5FB878;\n    background: #fff;\n    border: 1px solid #5FB878;\n    box-shadow: 0 5px 5px #ccc;\n}\nheader .user_name {\n    float: left\n}\n.user_name {\n    font-size: 20px;\n}\n\n.has_user a,\n.has_user span,\n.none_user a {\n    padding: 5px 15px;\n    background: #5FB878;\n    border-radius: 15px;\n    color: #fff;\n    cursor: pointer;\n    border: 1px solid #fff;\n    transition: all 0.3s;\n}\n\n.has_user a:hover,.has_user span:hover{\n    color: #5FB878;\n    background: #fff;\n    border: 1px solid #5FB878;\n    box-shadow: 0 5px 5px #ccc;\n}\n\n.posts{\n    border-radius: 4px; \n    border: 1px solid #ddd;\n}\n.posts > li{\n    padding: 10px;\n    position: relative;\n    padding-bottom: 40px;\n}\n.posts .comment_pv{\n    position: absolute;\n    bottom: 5px;\n    right: 10px;\n}\n.posts .author{\n    position: absolute;\n    left: 10px;\n    bottom: 5px;\n}\n.posts .author span{\n    margin-right: 5px;\n}\n.posts > li:hover {\n    background: #f2f2f2;\n}\n.posts > li:hover pre{\n    border: 1px solid #666;\n}\n.posts > li:hover .content{\n    border-top: 1px solid #fff;\n    border-bottom: 1px solid #fff;\n}\n.posts > li + li{\n    border-top: 1px solid #ddd;\n}\n.posts li .title span{\n    position: absolute;\n    left: 10px;\n    top: 10px;\n    color: #5FB878;\n    font-size: 14px;\n}\n.posts li .title{\n     margin-left: 40px;\n     font-size: 20px;\n     color: #222;\n}\n.posts .userAvator{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n}\n.posts .content{\n    border-top: 1px solid #f2f2f2;\n    border-bottom: 1px solid #f2f2f2;\n    margin: 10px 0 0 0 ;\n    padding: 10px 0;\n    margin-left: 40px;\n}\n.userMsg img{\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    margin-right: 10px;\n    vertical-align: middle;\n    display: inline-block;\n}\n.userMsg span{\n    font-size: 18px;\n    color:#333;\n    position: relative;\n    top: 2px;\n}\n.posts li img{\n    max-width: 100%;\n}\n.spost .comment_pv{\n    position: absolute;\n    top: 10px;\n}\n.spost .edit {\n    position: absolute;\n    right: 20px;\n    bottom: 5px;\n}\n\n.spost .edit p {\n    display: inline-block;\n    margin-left: 10px;\n}\n\n.comment_wrap {\n    width: 60%;\n    margin: 20px auto;\n}\n\n.submit {\n    display: block;\n    width: 100px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    border-radius: 4px;\n    background: #5FB878;\n    cursor: pointer;\n    color: #fff;\n    float: left;\n    margin-top: 20px ;\n    border:1px solid #fff;\n}\n.submit:hover{\n    background: #fff;\n    color: #5FB878;\n    border:1px solid #5FB878;\n}\n.comment_list{\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n.cmt_lists:hover{\n    background: #f2f2f2;\n}\n.cmt_lists + .cmt_lists{\n    border-top: 1px solid #ddd;\n}\n.cmt_content {\n    padding: 10px;\n    position: relative;\n    border-radius: 4px;\n    word-break: break-all;\n}\n.cmt_detail{\n    margin-left: 48px;\n}\n.cmt_content img{\n    max-width: 100%;\n}\n/* .cmt_content:after {\n    content: '#content';\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    color: #aaa;\n    font-size: 13px;\n}\n */\n.cmt_name {\n    position: absolute;\n    right: 8px;\n    bottom: 5px;\n    color: #333;\n}\n\n.cmt_name a {\n    margin-left: 5px;\n    color: #1E9FFF;\n}\n.cmt_time{\n    position: absolute;\n    font-size: 12px;\n    right: 5px;\n    top: 5px;\n    color: #aaa\n}\n.form {\n    margin: 0 auto;\n    width: 50%;\n    margin-top: 20px;\n}\n\ntextarea {\n    width: 100%;\n    height: 150px;\n    padding:10px 0 0 10px;\n    font-size: 20px;\n    border-radius: 4px;   \n\tborder: 1px solid #d7dde4;\n    -webkit-appearance: none;\n    resize: none;\n}\n\ntextarea#spContent{\n    width: 98%;\n}\n\n.tips {\n    margin: 20px 0;\n    color: #ec5051;\n    text-align: center;\n}\n\n.container {\n    width: 60%;\n    margin: 0 auto;\n}\n.form img.preview {\n    width:100px;\n    height:100px;\n    border-radius: 50%;\n    display: none;\n    margin-top:10px;\n}\ninput {\n    display: block;\n    width: 100%;\n    height: 35px;\n    font-size: 18px;\n    padding: 6px 7px;\t\n\tborder-radius: 4px;   \n\tborder: 1px solid #d7dde4;\n\t-webkit-appearance: none;\n}\n\ninput:focus,textarea:focus{\n    outline: 0;\n    box-shadow: 0 0 0 2px rgba(51,153,255,.2);\n    border-color: #5cadff;\n}\n\ninput:hover,input:active,textarea:hover,textarea:active{\n    border-color: #5cadff;\n}\n\n.create label {\n    display: block;\n    margin: 10px 0;\n}\n\n.comment_wrap form {\n    width: 100%;\n    margin-bottom: 85px;\n}\n\n.delete_comment,\n.delete_post {\n    cursor: pointer;\n}\n\n.delete_comment:hover,\n.delete_post:hover,\na:hover {\n    color: #ec5051;\n}\n.disabled{\n    user-select: none;\n    cursor: not-allowed !important;\n}\n.error{\n    color: #ec5051;\n}\n.success{\n    color: #1E9FFF;\n}\n.container{\n    width: 60%;\n    margin:0 auto;\n}\n.message{\n    position: fixed;\n    top: -100%;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 10px 20px;\n    background: rgba(0, 0, 0, 0.7);\n    color: #fff;\n    border-bottom-left-radius: 15px;\n    border-bottom-right-radius: 15px;\n    z-index: 99999;\n}\n.markdown pre{\n    display: block;\n    overflow-x: auto;\n    padding: 0.5em;\n    background: #F0F0F0;\n    border-radius: 3px;\n    border: 1px solid #fff;\n}\n.markdown blockquote{\n    padding: 0 1em;\n    color: #6a737d;\n    border-left: 0.25em solid #dfe2e5;\n    margin: 10px 0;\n}\n.markdown ul li{\n    list-style: circle;\n    margin-top: 5px;\n}\n```\n\n我们再把模板引擎的header和footer独立出来\n\n/views/header.ejs\n顺便引入index.css和jq\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa2-blog</title>\n\t<link rel=\"icon\" href=\"http://www.wclimb.site/images/avatar.png\">\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<script>\n\t\tfunction fade(txt){\n\t\t\t$('.message').text(txt)\n\t\t\t$('.message').animate({\n\t\t\t\ttop:0\n\t\t\t})\n\t\t\tsetTimeout(function(){\n\t\t\t\t$('.message').animate({\n\t\t\t\t\ttop: '-100%'\n\t\t\t\t})\n\t\t\t},1500)\n\t\t}\n\t\t$(function(){\n\t\t\t$('.signout').click(()=>{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signout\",\n\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\tfade('登出成功')\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\twindow.location.href = \"/posts\"\n\t\t\t\t\t\t\t},1500)\t\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\t</script>\n</head>\n<body>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\t<% if(session.user){ %>\n\t\t\t\t Hello,<%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t欢迎注册登录^_^\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">登录成功</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a target=\"__blank\" href=\"https://github.com/wclimb/Koa2-blog\">GitHub</a>\n\t\t\t\t\t<% if(type == 'all'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'my'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts?author=<%= session.user %>\">我的文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts?author=<%= session.user %>\">我的文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'create'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/create\">发表文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user has_user\">\n\t\t\t\t\t<a target=\"__blank\" href=\"https://github.com/wclimb/Koa2-blog\">GitHub</a>\n\t\t\t\t\t<% if(type == 'all'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'signup'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/signup\">注册</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/signup\">注册</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'signin'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/signin\">登录</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\n```\n首先我们看到用到了session.user，这个值从哪来呢？请看下面的代码\n```js\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n```\n我们可以看到我们向模板传了一个session值，session:ctx.session，这个值存取的就是用户的信息，包括用户名、登录之后的id等，session一般是你关闭浏览器就过期了，等于下次打开浏览器的时候就得重新登录了，用if判断他存不存在，就可以知道用户是否需要登录，如果不存在用户，则只显示`全部文章` `注册` `登录` ,如果session.user存在则有登出的按钮。\n\n在上面我们会看到我用了另外一个if判断，判断type类型，这样做的目的是比如我们登录注册页面，注册页面的导航会高亮，其实就是添加了class：active;\n之后我们每个ejs文件的头部会这样写`<%- include(\"header\",{type:'signup'}) %>` 登录页面则是`<%- include(\"header\",{type:'signin'}) %>`\n\n\n/views/footer.ejs\n```html\n\t\n</body>\n</html>\n```\n\n修改views/signup.ejs \n```html\n<%- include(\"header\",{type:'signup'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"请输入用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"请输入密码\" class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input placeholder=\"请确认密码\" class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>上传头像：</label>\n\t\t\t\t<input type=\"file\" name=\"avator\" id=\"avator\">\n\t\t\t\t<input type=\"hidden\" id=\"avatorVal\">\n\t\t\t\t<img class=\"preview\" alt=\"预览头像\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n\t<script>\n\t\t$(window).keyup(function (e) {\n\t\t\t//console.log(e.keyCode)\n\t\t\tif (e.keyCode == 13) {\n\t\t\t\t$('.submit').click()\n\t\t\t}\n\t\t})\n\t\t$('#avator').change(function(){\n\t\t\tif (this.files.length != 0) {\n\t\t\t\tvar file = this.files[0],\n\t\t\t\t\treader = new FileReader();\n\t\t\t\tif (!reader) {\n\t\t\t\t\tthis.value = '';\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\tconsole.log(file.size)\n\t\t\t\tif (file.size >= 1024 * 1024 / 2) {\n\t\t\t\t\tfade(\"请上传小于512kb的图片!\")\n\t\t\t\t\treturn \n\t\t\t\t}\n\t\t\t\treader.onload = function (e) {\n\t\t\t\t\tthis.value = '';\n\t\t\t\t\t$('form .preview').attr('src', e.target.result)\n\t\t\t\t\t$('form .preview').fadeIn()\n\t\t\t\t\t$('#avatorVal').val(e.target.result)\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(file);\n\t\t\t};\n\t\t})\n\t\t$('.submit').click(()=>{\n\t\t\t// console.log($('.form').serialize())\n\t\t\tif ($('input[name=name]').val().trim() == '') {\n\t\t\t\tfade('请输入用户名！')\n\t\t\t}else if($('input[name=name]').val().match(/[<'\">]/g)){\n\t\t\t\tfade('请输入合法字符！')\n\t\t\t}else if($('#avatorVal').val() == ''){\n\t\t\t\tfade('请上传头像！')\n\t\t\t}else{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signup\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname: $('input[name=name]').val(),\n\t\t\t\t\t\tpassword: $('input[name=password]').val(),\n\t\t\t\t\t\trepeatpass: $('input[name=repeatpass]').val(),\n\t\t\t\t\t\tavator: $('#avatorVal').val(),\n\t\t\t\t\t},\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t   if (msg.data == 1) {           \t\t\n\t\t\t\t\t\t   $('input').val('')\n\t\t\t\t\t\t   fade('用户名存在')\n\t\t\t\t\t   }\n\t\t\t\t\t   else if (msg.data == 2){\n\t\t\t\t\t\t\tfade('请输入重复的密码')\t               \t\t\n\t\t\t\t\t   }\n\t\t\t\t\t   else if(msg.data == 3){\n\t\t\t\t\t\t\tfade('注册成功')\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\twindow.location.href=\"/signin\"\t  \n\t\t\t\t\t\t\t},1000)\n\t\t\t\t\t   \t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\n\t\t\t\t\t}\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t})\t\t\n\t</script>\n<% include footer %>\n```\n先看我们请求的url地址，是'/signup'，为什么是这个呢？我们看下面这段代码(后面有完整的)\n```js\nrouter.post('/signup', async(ctx, next) => {\n    //console.log(ctx.request.body)\n    let user = {\n        name: ctx.request.body.name,\n        pass: ctx.request.body.password,\n        repeatpass: ctx.request.body.repeatpass,\n        avator: ctx.request.body.avator\n    }\n    ....\n}\n```\n我们的请求方式是post，地址是`/signup`所以走了这段代码，之后会获取我们输入的信息，通过ctx.request.body拿到\n\n这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中\n\n修改routers/signup.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js');\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\nconst moment = require('moment');\nconst fs = require('fs')\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n// post 注册\nrouter.post('/signup', async(ctx, next) => {\n    //console.log(ctx.request.body)\n    let user = {\n        name: ctx.request.body.name,\n        pass: ctx.request.body.password,\n        repeatpass: ctx.request.body.repeatpass,\n        avator: ctx.request.body.avator\n    }\n    await userModel.findDataByName(user.name)\n        .then(async (result) => {\n            console.log(result)\n            if (result.length) {\n                try {\n                    throw Error('用户已经存在')\n                } catch (error) {\n                    //处理err\n                    console.log(error)\n                }\n                // 用户存在\n                ctx.body = {\n                    data: 1\n                };;\n                \n            } else if (user.pass !== user.repeatpass || user.pass === '') {\n                ctx.body = {\n                    data: 2\n                };\n            } else {\n                // ctx.session.user=ctx.request.body.name   \n                let base64Data = user.avator.replace(/^data:image\\/\\w+;base64,/, \"\");\n                let dataBuffer = new Buffer(base64Data, 'base64');\n                let getName = Number(Math.random().toString().substr(3)).toString(36) + Date.now()\n                await fs.writeFile('./public/images/' + getName + '.png', dataBuffer, err => { \n                    if (err) throw err;\n                    console.log('头像上传成功') \n                });            \n                await userModel.insertData([user.name, md5(user.pass), getName, moment().format('YYYY-MM-DD HH:mm:ss')])\n                    .then(res=>{\n                        console.log('注册成功',res)\n                        //注册成功\n                        ctx.body = {\n                            data: 3\n                        };\n                    })\n            }\n        })\n})\nmodule.exports = router\n```\n- 我们使用md5实现密码加密，长度是32位的\n- 使用我们之前说的`bodyParse`来解析提交的数据，通过`ctx.request.body`得到\n- 我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中\n- ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后`msg.data=1`的时候就代表用户存在，`msg.data`出现在后面的`signup.ejs`模板ajax请求中\n- 上传头像之前要新建好文件夹，我们ajax发送的是base64的格式，然后使用fs.writeFile来生成图片\n\n我们使用ajax来提交数据，方便来做成功错误的处理\n\n## 模板引擎ejs\n\n我们使用的是ejs，语法可以见[ejs](https://www.npmjs.com/package/ejs)\n\n之前我们写了这么一段代码\n```js\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n```\n这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了\nejs的常用标签为：\n\n- `<% code %>`：运行 JavaScript 代码，不输出\n- `<%= code %>`：显示转义后的 HTML内容\n- `<%- code %>`：显示原始 HTML 内容\n\n`<%= code %>`和`<%- code %>`的区别在于，<%= code %>不管你写什么都会原样输出，比如code为 `<strong>hello</strong>`的时候 `<%= code %>` 会显示`<strong>hello</strong>`\n而`<%- code %>`则显示加粗的hello\n\n\n\n## 实现登录页面\n![img](/img/signin1.png)\n\n修改 /routers/signin.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\n\nrouter.get('/signin', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signin', {\n        session: ctx.session,\n    })\n})\nmodule.exports=router\n```\n\n修改 /views/signin.ejs\n\n```html\n<%- include(\"header\",{type:'signin'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\t\n\t</div>\n<% include footer %>\n```\n\n修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下\n\n```js\napp.use(require('./routers/signin.js').routes())\n\n```\n\n现在注册一下来看看效果吧\n```\n$ supervisor --harmony index\n```\n![img](/img/signup1.png)\n\n我们怎么查看我们注册好的账号和密码呢？打开mysql控制台\n\n```\n$ select * from users;\n```\n这样刚刚我们注册的用户信息都出现了\n![img](/img/users.png)\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n## 登录页面\n\n修改signin\nrouters/signin.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\n\nrouter.get('/signin', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signin', {\n        session: ctx.session,\n    })\n})\n\nrouter.post('/signin', async(ctx, next) => {\n    console.log(ctx.request.body)\n    let name = ctx.request.body.name;\n    let pass = ctx.request.body.password;\n\n    await userModel.findDataByName(name)\n        .then(result => {\n            let res = result\n            if (name === res[0]['name'] && md5(pass) === res[0]['pass']) {\n                ctx.body = true\n                ctx.session.user = res[0]['name']\n                ctx.session.id = res[0]['id']\n                console.log('ctx.session.id', ctx.session.id)\n                console.log('session', ctx.session)\n                console.log('登录成功')\n            }else{\n                ctx.body = false\n                console.log('用户名或密码错误!')\n            }\n        }).catch(err => {\n            console.log(err)\n        })\n\n})\n\nmodule.exports = router\n```\n我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密\n我们可以看到登录成功返回的结果是`result` 结果是这样的一个json数组：id：4 name：rrr  pass：...\n[ RowDataPacket { id: 4, name: 'rrr', pass: '44f437ced647ec3f40fa0841041871cd' } ]\n\n修改views/signin.ejs\nsignin.ejs\n```html\n<%- include(\"header\",{type:'signin'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\t\n\t</div>\n\t<script>\n\t\t$(window).keyup(function(e){\n\t\t\t//console.log(e.keyCode)\n\t\t\tif (e.keyCode == 13) {\n\t\t\t\t$('.submit').click()\n\t\t\t}\n\t\t})\n\t\t$('.submit').click(()=>{\n\t\t\tif ($('input[name=name]').val().trim() == '' || $('input[name=password]').val().trim() == '' ) {\n\t\t\t\tfade('请输入用户名或密码')\n\t\t\t}else{\n\t\t\t\tconsole.log($('.form').serialize())\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signin\",\n\t\t\t\t\tdata: $('.form').serialize(),\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t    if (!msg) {\n\t\t\t\t\t\t\t$('input').val('')\n\t\t\t\t\t\t    fade('用户名或密码错误')\n\t\t\t\t\t    } else{\n\t\t\t\t\t\t    fade('登录成功')\n\t\t\t\t\t\t    setTimeout(()=>{\n\t\t\t\t\t\t\t    window.location.href = \"/posts\"\n\t\t\t\t\t\t    },1500)\t               \t\n\t\t\t\t\t    }\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t})\t\t\n\t</script>\n<% include footer %>\n```\n我们增加了ajax请求，在routers/signin.js里，我们设置如果登录失败就返回false，登录成功返回true\n\n```\nctx.body = false\nctx.body = true\n```\n那我们登录成功后要做跳转，可以看到`window.location.href=\"/posts\"`跳转到posts页面\n\n## 全部文章\n![img](/img/posts1.png)\n修改routers/posts.js\n\nposts.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst moment = require('moment')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin;\nconst md = require('markdown-it')();  \n// 重置到文章页\nrouter.get('/', async(ctx, next) => {\n    ctx.redirect('/posts')\n})\n// 文章页\nrouter.get('/posts', async(ctx, next) => {\n    let res,\n        postsLength,\n        name = decodeURIComponent(ctx.request.querystring.split('=')[1]);\n    if (ctx.request.querystring) {\n        console.log('ctx.request.querystring', name)\n        await userModel.findDataByUser(name)\n            .then(result => {\n                postsLength = result.length\n            })\n        await userModel.findPostByUserPage(name,1)\n            .then(result => {\n                res = result\n            })\n        await ctx.render('selfPosts', {\n            session: ctx.session,\n            posts: res,\n            postsPageLength:Math.ceil(postsLength / 10),\n        })\n    } else {\n        await userModel.findPostByPage(1)\n            .then(result => {\n                //console.log(result)\n                res = result\n            })\n        await userModel.findAllPost()\n            .then(result=>{\n                postsLength = result.length\n            })    \n        await ctx.render('posts', {\n            session: ctx.session,\n            posts: res,\n            postsLength: postsLength,\n            postsPageLength: Math.ceil(postsLength / 10),\n            \n        })\n    }\n})\n// 首页分页，每次输出10条\nrouter.post('/posts/page', async(ctx, next) => {\n    let page = ctx.request.body.page;\n    await userModel.findPostByPage(page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n// 个人文章分页，每次输出10条\nrouter.post('/posts/self/page', async(ctx, next) => {\n    let data = ctx.request.body\n    await userModel.findPostByUserPage(data.name,data.page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\nmodule.exports = router\n```\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉\n\n\n修改 views/posts.ejs\n\n```\n<%- include(\"header\",{type:'posts'}) %>\n\n    posts\n\n<% include footer %>\n```\n现在看看登录成功之后的页面吧\n\n接下来我们实现登出页面\n\n## 登出页面\n\n修改 router/signout.js\n\nsignout.js\n```js\nconst router = require('koa-router')();\n\nrouter.get('/signout', async(ctx, next) => {\n    ctx.session = null;\n    console.log('登出成功')\n    ctx.body = true\n})\n\nmodule.exports = router\n```\n把session设置为null即可\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉，现在把注释的路由全部取消注释就对了\n\n\n然后我们看看 `views/header.ejs`\n\n我们点击登出后的ajax 的提交，成功之后回到posts页面\n\n## 发表文章\n\n修改router/posts\n在后面增加\n```js\n// 发表文章页面\nrouter.get('/create', async(ctx, next) => {\n    await ctx.render('create', {\n        session: ctx.session,\n    })\n})\n\n// post 发表文章\nrouter.post('/create', async(ctx, next) => {\n    let title = ctx.request.body.title,\n        content = ctx.request.body.content,\n        id = ctx.session.id,\n        name = ctx.session.user,\n        time = moment().format('YYYY-MM-DD HH:mm:ss'),\n        avator,\n        // 现在使用markdown不需要单独转义\n        newContent = content.replace(/[<\">']/g, (target) => { \n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        }),\n        newTitle = title.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        });\n\n    //console.log([name, newTitle, content, id, time])\n    await userModel.findUserData(ctx.session.user)\n        .then(res => {\n            console.log(res[0]['avator'])\n            avator = res[0]['avator']       \n        })\n    await userModel.insertPost([name, newTitle, md.render(content), content, id, time,avator])\n            .then(() => {\n                ctx.body = true\n            }).catch(() => {\n                ctx.body = false\n            })\n\n})\n```\n\n修改 views/create.ejs\n\ncreate.ejs\n![img](/img/create1.png)\n```html\n<%- include(\"header\",{type:'create'}) %>\n<div class=\"container\">\n\t<form style=\"width:100%\" method=\"post\" class=\"form create\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"请输入标题\" type=\"text\" name=\"title\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea placeholder=\"请输入内容\" name=\"content\" id=\"\" cols=\"42\" rows=\"10\"></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">发表</div>\n\t</form>\n</div>\n<script>\n    $('.submit').click(()=>{\n        if ($('input[name=title]').val().trim() == '') {\n            fade('请输入标题')\n        }else if ($('textarea').val().trim() == '') {\n            fade('请输入内容')\n        }else{          \n            $.ajax({\n                url: \"/create\",\n                data: $('.form').serialize(),\n                type: \"POST\",\n                cache: false,\n                dataType: 'json',\n                success: function (msg) {\n                    if (msg) {\n                        fade('发表成功')\n                        setTimeout(()=>{\n                            window.location.href=\"/posts\"\n                        },1000)\n                    }else{\n                        fade('发表失败')\n                    }\n                },\n                error: function () {\n                    alert('异常');\n                }\n            })\t\t\t\n        }   \n    })\n</script>\n<% include footer %>\n```\n现在看看能不能发表吧\n\n即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据\n\n我们可以看我们之前写的代码 `router.get('/posts', async(ctx, next) => {}`路由\n```js\nif (ctx.request.querystring) {\n\t...\n}else {\n        await userModel.findPostByPage(1)\n            .then(result => {\n                //console.log(result)\n                res = result\n            })\n        await userModel.findAllPost()\n            .then(result=>{\n                postsLength = result.length\n            })    \n        await ctx.render('posts', {\n            session: ctx.session,\n            posts: res,\n            postsLength: postsLength,\n            postsPageLength: Math.ceil(postsLength / 10),\n            \n        })\n    }\n```\nif前面这部分我们先不用管，后面会说。只需要看else后面的代码我们通过`userModel.findPostByPage(1)`来获取第一页的数据，然后查找所有文章的数量，最后除以10拿到首页文章的页数，把数据`postsPageLength`的值传给模板posts.ejs。这样就可以渲染出来了\n\n修改 views/posts.ejs\n\nposts.ejs\n\n```html\n<%- include(\"header\",{type:'all'}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts\">\n\t\t\t<% posts.forEach(function(res){ %>\n\t\t\t\t<li>\n\t\t\t\t\t<div class=\"author\">\n\t\t\t\t\t\t<span title=\"<%= res.name %>\"><a href=\"/posts?author=<%= res.name %> \">author: <%= res.name %></a></span>\n\t\t\t\t\t\t<span>评论数：<%= res.comments %></span>\n\t\t\t\t\t\t<span>浏览量：<%= res.pv %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t\t<span><%= res.moment %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<a href=\"/posts/<%= res.id %>\">\n\t\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t\t<img class=\"userAvator\" src=\"images/<%= res.avator %>.png\">\n\t\t\t\t\t\t\t<%= res.title %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t\t<%- res.content %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t<% }) %>\n\t\t</ul>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= postsPageLength %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage: true,\n\t\t\tcount: 2//当前页前后显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\t$.ajax({\n\t\t\t\turl: \"posts/page\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tconsole.log(msg)\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.posts').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t$('.posts').append(\n\t\t\t\t\t\t\t\t'<li>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"author\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span title=\\\"'+ val.name +'\\\"><a href=\\\"/posts?author='+ val.name +' \\\">author: '+ val.name +'</a></span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>评论数：'+ val.comments +'</span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>浏览量：'+ val.pv +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"comment_pv\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span>'+ val.moment +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<a href=\\\"/posts/'+ val.id +'\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"title\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t'<img class=\"userAvator\" src=\"images/'+ val.avator +'.png\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.title +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"content\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.content +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'</a>'+\n\t\t\t\t\t\t\t\t'</li>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t</script>\n<% include footer %>\n```\n现在看看posts页面有没有文章出现了\n\n我们看到是所第一页的文章数据，初始化的稍后我们是用服务端渲染的数据，使用了分页，每页显示10条数据，然后通过请求页数。\n下面是服务端请求拿到的第一页的数据\n```\nawait userModel.findPostByUserPage(name,1)\n        .then(result => {\n            res = result\n        })\n```\n要拿到别的页面数据的话要向服务器发送post请求，如下\n```\n// 首页分页，每次输出10条\nrouter.post('/posts/page', async(ctx, next) => {\n    let page = ctx.request.body.page;\n    await userModel.findPostByPage(page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n```\n\n## 单篇文章页面\n![img](/img/postcontent1.png)\n但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？\n\n修改 routers/posts.js\n\n在posts.js后面增加\n\n```js\n// 单篇文章页\nrouter.get('/posts/:postId', async(ctx, next) => {\n    let comment_res,\n        res,\n        pageOne,\n        res_pv; \n    await userModel.findDataById(ctx.params.postId)\n        .then(result => {\n            //console.log(result )\n            res = result\n            res_pv = parseInt(result[0]['pv'])\n            res_pv += 1\n           // console.log(res_pv)\n        })\n    await userModel.updatePostPv([res_pv, ctx.params.postId])\n    await userModel.findCommentByPage(1,ctx.params.postId)\n        .then(result => {\n            pageOne = result\n            //console.log('comment', comment_res)\n        })\n    await userModel.findCommentById(ctx.params.postId)\n        .then(result => {\n            comment_res = result\n            //console.log('comment', comment_res)\n        })\n    await ctx.render('sPost', {\n        session: ctx.session,\n        posts: res[0],\n        commentLenght: comment_res.length,\n        commentPageLenght: Math.ceil(comment_res.length/10),\n        pageOne:pageOne\n    })\n\n})\n```\n\n现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增\n\n我们通过userModel.findDataById 文章的id来查找数据库\n我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能\n最后通过sPost.ejs模板渲染单篇文章\n\n\n修改 views/sPost.ejs\n\nsPost.ejs\n\n```html\n<%- include(\"header\",{type:''}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts spost\">\n\t\t\t<li>\n\t\t\t\t<div class=\"author\">\n\t\t\t\t\t<span title=\"<%= posts.name %>\"><a href=\"/posts?author=<%= posts.name %> \">author: <%= posts.name %></a></span>\n\t\t\t\t\t<span>评论数：<%= posts.comments %></span>\n\t\t\t\t\t<span>浏览量：<%= posts.pv %></span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t<span><%= posts.moment %></span>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"/posts/<%= posts.id %>\">\n\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t<img class=\"userAvator\" src=\"../images/<%= posts.avator %>.png\">\n\t\t\t\t\t\t<%= posts.title %>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t<%- posts.content %>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t\t<div class=\"edit\">\n\t\t\t\t\t<% if(session && session.user ===  posts.name  ){ %>\n\t\t\t\t\t<p><a href=\"<%= posts['id'] %>/edit\">编辑</a></p>\n\t\t\t\t\t<p><a class=\"delete_post\">删除</a></p>\n\t\t\t\t\t<% } %>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t<div class=\"comment_wrap\">\n\t\t<% if(session.user){ %>\n\t\t<form class=\"form\" method=\"post\" action=\"/<%= posts.id %>\">\n\t\t\t<textarea id=\"spContent\" name=\"content\" cols=\"82\"></textarea>\n\t\t\t<div class=\"submit\">发表留言</div>\n\t\t</form>\n\t\t<% } else{ %>\n\t\t\t<p class=\"tips\">登录之后才可以评论哟</p>\n\t\t<% } %>\n\t\t<% if (commentPageLenght > 0) { %>\n\t\t<div class=\"comment_list markdown\">\n\t\t\t<% pageOne.forEach(function(res){ %>\n\t\t\t\t<div class=\"cmt_lists\">\n\t\t\t\t\t<div class=\"cmt_content\">\n\t\t\t\t\t\t<div class=\"userMsg\">\n\t\t\t\t\t\t\t<img src=\"../images/<%= res['avator'] %>.png\" alt=\"\"><span><%= res['name'] %></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"cmt_detail\">\n\t\t\t\t\t\t\t<%- res['content'] %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"cmt_time\"><%= res['moment'] %></span>\n\t\t\t\t\t\t<span class=\"cmt_name\">\n\t\t\t\t\t\t\t<% if(session && session.user ===  res['name']){ %>\n\t\t\t\t\t\t\t\t<a class=\"delete_comment\" href=\"javascript:delete_comment(<%= res['id'] %>);\"> 删除</a>\n\t\t\t\t\t\t\t<% } %>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t<% }) %>\n\t\t</div>\t\n\t\t<% } else{ %>\n\t\t\t<p class=\"tips\">还没有评论，赶快去评论吧！</p>\n\t\t<% } %>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tvar userName = \"<%- session.user %>\"\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= commentPageLenght %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage:true,\n\t\t\tcount: 2//当前页前面显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\tvar _comment = ''\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/commentPage\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t//console.log(msg)\n\t\t\t\t\t_comment = ''\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.comment_list').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t_comment += '<div class=\\\"cmt_lists\\\"><div class=\\\"cmt_content\\\"><div class=\\\"userMsg\\\"><img src = \\\"../images/'+ val.avator +'.png\\\" ><span>'+ val.name +'</span></div ><div class=\"cmt_detail\">'+ val.content + '</div><span class=\\\"cmt_time\\\">'+ val.moment +'</span><span class=\\\"cmt_name\\\">';\n\t\t\t\t\t\t\t\tif (val.name == userName) {\n\t\t\t\t\t\t\t\t\t_comment += '<a class=\\\"delete_comment\\\" href=\\\"javascript:delete_comment('+ val.id +');\\\"> 删除</a>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_comment += '</span></div></div>'\n\t\t\t\t\t\t})\n\t\t\t\t\t\t$('.comment_list').append(_comment)\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t})\n\t\t\n\t\t// 删除文章\n\t\t$('.delete_post').click(() => {\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/remove\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tif (msg.data == 1) {\n\t\t\t\t\t\tfade('删除文章成功')\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.href = \"/posts\"\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t} else if (msg.data == 2) {\n\t\t\t\t\t\tfade('删除文章失败');\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t// 评论\n\t\tvar isAllow = true\n\t\t$('.submit').click(function(){\n\t\t\tif (!isAllow) return\n\t\t\tisAllow = false\n\t\t\tif ($('textarea').val().trim() == '') {\n\t\t\t\tfade('请输入评论！')\n\t\t\t}else{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: '/' + location.pathname.split('/')[2],\n\t\t\t\t\tdata:$('.form').serialize(),\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\tfade('发表留言成功')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\tisAllow = true\n\t\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t\t},1500)  \t\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\t// 删除评论\n\t\tfunction delete_comment(id) {\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/comment/\" + id + \"/remove\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tif (msg.data == 1) {\n\t\t\t\t\t\tfade('删除留言成功')\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t} else if (msg.data == 2) {\n\t\t\t\t\t\tfade('删除留言失败');\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1500)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function () {\n\t\t\t\t\talert('异常')\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t</script>\n<% include footer %>\n```\n现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户自己发表的文章列表，我们之前在 get '/posts' 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了一个处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了`ctx.request.querystring` 获取到的是：`author=xxx`\n\n注：这里我们处理了，通过判断 `session.user ===  res['name']` 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的`<a href=\"\"></a>`标签\n\n## 个人已发表文章列表里面\n还记得之前在 get '/post' 里面的代码吗？\n下面的代码就是之前说先不处理的代码片段，不过这个不用再次添加，之前已经添加好了，这段代码处理个人发布的文章列表，我们是通过selfPosts.ejs模板来渲染的，样式和全部文章列表一样，但是牵扯到分页的问题，\n分页请求的是不同的接口地址\n\n```js\nif (ctx.request.querystring) {\n        console.log('ctx.request.querystring', name)\n        await userModel.findDataByUser(name)\n            .then(result => {\n                postsLength = result.length\n            })\n        await userModel.findPostByUserPage(name,1)\n            .then(result => {\n                res = result\n            })\n        await ctx.render('selfPosts', {\n            session: ctx.session,\n            posts: res,\n            postsPageLength:Math.ceil(postsLength / 10),\n        })\n    }\n```\n修改 selfPost.ejs\n\n```html\n<%- include(\"header\",{type:'my'}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts\">\n\t\t\t<% posts.forEach(function(res){ %>\n\t\t\t\t<li>\n\t\t\t\t\t<div class=\"author\">\n\t\t\t\t\t\t<span title=\"<%= res.name %>\"><a href=\"/posts?author=<%= res.name %> \">author: <%= res.name %></a></span>\n\t\t\t\t\t\t<span>评论数：<%= res.comments %></span>\n\t\t\t\t\t\t<span>浏览量：<%= res.pv %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t\t<span><%= res.moment %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<a href=\"/posts/<%= res.id %>\">\n\t\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t\t<img class=\"userAvator\" src=\"images/<%= res.avator %>.png\">\n\t\t\t\t\t\t\t<%= res.title %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t\t<%- res.content %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t<% }) %>\n\t\t</ul>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= postsPageLength %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage: true,\n\t\t\tcount: 2//当前页前后显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\t$.ajax({\n\t\t\t\turl: \"posts/self/page\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val,\n\t\t\t\t\tname: location.search.slice(1).split('=')[1]\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t//console.log(msg)\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.posts').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t$('.posts').append(\n\t\t\t\t\t\t\t\t'<li>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"author\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span title=\\\"'+ val.name +'\\\"><a href=\\\"/posts?author='+ val.name +' \\\">author: '+ val.name +'</a></span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>评论数：'+ val.comments +'</span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>浏览量：'+ val.pv +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"comment_pv\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span>'+ val.moment +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<a href=\\\"/posts/'+ val.id +'\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"title\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t'<img class=\"userAvator\" src=\"images/' + val.avator + '.png\">' +\n\t\t\t\t\t\t\t\t\t\t\t val.title +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"content\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.content +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'</a>'+\n\t\t\t\t\t\t\t\t'</li>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t})\n\t</script>\n<% include footer %>\n```\n\n\n## 编辑文章、删除文章、评论、删除评论\n\n> 评论\n\n修改routers/posts.js \n\n在post.js 后面增加\n\n```js\n// 发表评论\nrouter.post('/:postId', async(ctx, next) => {\n    let name = ctx.session.user,\n        content = ctx.request.body.content,\n        postId = ctx.params.postId,\n        res_comments,\n        time = moment().format('YYYY-MM-DD HH:mm:ss'),\n        avator;\n    await userModel.findUserData(ctx.session.user)\n        .then(res => {\n            console.log(res[0]['avator'])\n            avator = res[0]['avator']\n        })   \n    await userModel.insertComment([name, md.render(content),time, postId,avator])\n    await userModel.findDataById(postId)\n        .then(result => {\n            res_comments = parseInt(result[0]['comments'])\n            res_comments += 1\n        })\n    await userModel.updatePostComment([res_comments, postId])\n        .then(() => {\n            ctx.body = true\n        }).catch(() => {\n            ctx.body = false\n        })\n})\n// 评论分页\nrouter.post('/posts/:postId/commentPage', async function(ctx){\n    let postId = ctx.params.postId,\n        page = ctx.request.body.page;\n    await userModel.findCommentByPage(page,postId)\n        .then(res=>{\n            ctx.body = res\n        }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n```\n现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此\n评论我们也做了分页，所以后面会有一个评论的分页的接口，我们已经在sPost.ejs里面写好了ajax请求\n\n> 删除评论\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 删除评论\nrouter.post('/posts/:postId/comment/:commentId/remove', async(ctx, next) => {\n    let postId = ctx.params.postId,\n        commentId = ctx.params.commentId,\n        res_comments;\n    await userModel.findDataById(postId)\n        .then(result => {\n            res_comments = parseInt(result[0]['comments'])\n            //console.log('res', res_comments)\n            res_comments -= 1\n            //console.log(res_comments)\n        })\n    await userModel.updatePostComment([res_comments, postId])\n    await userModel.deleteComment(commentId)\n        .then(() => {\n            ctx.body = {\n                data: 1\n            }\n        }).catch(() => {\n            ctx.body = {\n                data: 2\n            }\n\n        })\n})\n```\n现在试试删除评论的功能吧\n\n> 删除文章\n\n只有自己发表的文字删除的文字才会显示出来，才能被删除，\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 删除单篇文章\nrouter.post('/posts/:postId/remove', async(ctx, next) => {\n    let postId = ctx.params.postId\n    await userModel.deleteAllPostComment(postId)\n    await userModel.deletePost(postId)\n        .then(() => {\n            ctx.body = {\n                data: 1\n            }\n        }).catch(() => {\n            ctx.body = {\n                data: 2\n            }\n        })\n})\n```\n现在试试删除文章的功能吧\n\n> 编辑文章\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 编辑单篇文章页面\nrouter.get('/posts/:postId/edit', async(ctx, next) => {\n    let name = ctx.session.user,\n        postId = ctx.params.postId,\n        res;\n    await userModel.findDataById(postId)\n        .then(result => {\n            res = result[0]\n            //console.log('修改文章', res)\n        })\n    await ctx.render('edit', {\n        session: ctx.session,\n        postsContent: res.md,\n        postsTitle: res.title\n    })\n\n})\n\n// post 编辑单篇文章\nrouter.post('/posts/:postId/edit', async(ctx, next) => {\n    let title = ctx.request.body.title,\n        content = ctx.request.body.content,\n        id = ctx.session.id,\n        postId = ctx.params.postId,\n         // 现在使用markdown不需要单独转义\n        newTitle = title.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        }),\n        newContent = content.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        });\n    await userModel.updatePost([newTitle, md.render(content), content, postId])\n        .then(() => {\n            ctx.body = true\n        }).catch(() => {\n            ctx.body = false\n        })\n})\n\n```\n\n修改views/edit.js \n\n```html\n<%- include(\"header\",{type:''}) %>\n<div class=\"container\">\n\t<form style=\"width:100%\" class=\"form create\" method=\"post\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"标题\" type=\"text\" name=\"title\" value=\"<%- postsTitle %>\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\"><%= postsContent %></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">修改</div>\n\t</form>\n</div>\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: '',\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\tfade('修改成功')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\t\n\t})\n</script>\n<% include footer %>\n```\n\n现在试试编辑文字然后修改提交吧\n\n## 结语 \n\n至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的\n\n所有的代码都在 https://github.com/wclimb/Koa2-blog 里面，如果觉得不错就star一下吧。有问题可以提问哟\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/Node-Koa2-Mysql-搭建简易博客.md","raw":"---\ntitle: Node+Koa2+Mysql 搭建简易博客\ndate: 2017-07-12 14:23:15\ntags:\n- Node\n- Koa\n- Mysql\n- javascript\n- 原创\n\ncategories: [javascript,node]\n---\n\n## Koa2-blog\n\n> 2018-1-5 更新教程（新增上传头像、新增分页、样式改版、发布文章和评论支持markdown语法）\n> 现在GitHub的代码结构有变，优化了蛮多东西\n\nNode+Koa2+Mysql 搭建简易博客\n\n## 预览地址\n\nhttp://blog.wclimb.site\n\n## 写在前面\n\n本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\nps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！\n\n## 演示效果\n\n![img](http://www.wclimb.site/cdn/blog1.gif)\n\n## 开发环境\n\n- nodejs `v8.1.0`\n- koa `v2.3.0`\n- mysql `v5.7.0`\n\n## 准备工作\n\n文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 http://es6.ruanyifeng.com/ \n\n如果你已经配置好node和mysql可以跳过\n\n> 经常会有人问报错的问题，运行出错大部分是因为不支持async，升级node版本可解决\n\n```\n$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本\n```\n下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456\n\n```\n进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\n\n```\n然后开启mysql\n```\n$ mysql -u root -p\t\n\n```\n输入密码之后创建`database`(数据库)，`nodesql`是我们创建的数据库\n```\n$ create database nodesql;\n```\n记住sql语句后面一定要跟`;`符号，接下来看看我们创建好的数据库列表\n\n```\n$ show databases;\n```\n![img](/img/database.png)\n\n启用创建的数据库\n```\n$ use nodesql;\n```\n查看数据库中的表\n<!-- more -->\n```\n$ show tables;\n```\n显示`Empty set (0.00 sec)`，因为我们还没有建表，稍后会用代码建表\n注释：\n这是后面建表之后的状态\n![img](/img/tables.png)\n\n## 目录结构\n\n![img](/img/item.png)\n\n- config 存放默认文件\n- lib 存放操作数据库文件\n- middlewares 存放判断登录与否文件\n- public 存放样式和头像文件\n- routes 存放路由文件\n- views 存放模板文件\n- index 程序主文件\n- package.json 包括项目名、作者、依赖等等\n\n首先我们创建koa2-blog文件夹，然后`cd koa2-blog`\n```\n 接着使用 npm init 来创建package.json\n```\n接着安装包，安装之前我们使用[cnpm](https://npm.taobao.org/)安装 \n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n```\n$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs markdown-it chai mocha koa-static-cache --save-dev\n```\n各模块用处\n\n1. `koa node`框架\n2. `koa-bodyparser` 表单解析中间件\n3. `koa-mysql-session`、`koa-session-minimal` 处理数据库的中间件\n4. `koa-router` 路由中间件\n5. `koa-static` 静态资源加载中间件\n6. `ejs` 模板引擎\n7. `md5` 密码加密\n8. `moment` 时间中间件\n9. `mysql` 数据库\n10. `markdown-it` markdown语法\n11. `koa-views` 模板呈现中间件\n12. `chai` `mocha` 测试使用\n13. `koa-static-cache` 文件缓存\n\n在文件夹里面新建所需文件\n\n![img](/img/view.png)\n\n\n## 首先配置config\n\n我们新建`default.js`文件 \n\n```\nconst config = {\n  // 启动端口\n  port: 3000,\n\n  // 数据库配置\n  database: {\n    DATABASE: 'nodesql',\n    USERNAME: 'root',\n    PASSWORD: '123456',\n    PORT: '3306',\n    HOST: 'localhost'\n  }\n}\n\nmodule.exports = config\n\n```\n这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用\n\n## 配置index.js文件\n`index.js`\n\n```js\nconst Koa=require('koa');\nconst path=require('path')\nconst bodyParser = require('koa-bodyparser');\nconst ejs=require('ejs');\nconst session = require('koa-session-minimal');\nconst MysqlStore = require('koa-mysql-session');\nconst config = require('./config/default.js');\nconst router=require('koa-router')\nconst views = require('koa-views')\n// const koaStatic = require('koa-static')\nconst staticCache = require('koa-static-cache')\nconst app = new Koa()\n\n\n// session存储配置\nconst sessionMysqlConfig= {\n  user: config.database.USERNAME,\n  password: config.database.PASSWORD,\n  database: config.database.DATABASE,\n  host: config.database.HOST,\n}\n\n// 配置session中间件\napp.use(session({\n  key: 'USER_SID',\n  store: new MysqlStore(sessionMysqlConfig)\n}))\n\n\n// 配置静态资源加载中间件\n// app.use(koaStatic(\n//   path.join(__dirname , './public')\n// ))\n// 缓存\napp.use(staticCache(path.join(__dirname, './public'), { dynamic: true }, {\n  maxAge: 365 * 24 * 60 * 60\n}))\napp.use(staticCache(path.join(__dirname, './images'), { dynamic: true }, {\n  maxAge: 365 * 24 * 60 * 60\n}))\n\n// 配置服务端模板渲染引擎中间件\napp.use(views(path.join(__dirname, './views'), {\n  extension: 'ejs'\n}))\napp.use(bodyParser({\n  formLimit: '1mb'\n}))\n\n//  路由(我们先注释三个，等后面添加好了再取消注释，因为我们还没有定义路由，稍后会先实现注册)\n//app.use(require('./routers/signin.js').routes())\napp.use(require('./routers/signup.js').routes())\n//app.use(require('./routers/posts.js').routes())\n//app.use(require('./routers/signout.js').routes())\n\n\napp.listen(3000)\n\nconsole.log(`listening on port ${config.port}`)\n\n```\n我们使用`koa-session-minimal``koa-mysql-session`来进行数据库的操作\n使用`koa-static`配置静态资源，目录设置为`public`\n使用`ejs`模板引擎\n使用`koa-bodyparser`来解析提交的表单信息\n使用`koa-router`做路由\n使用`koa-static-cache`来缓存文件\n之前我们配置了default.js，我们就可以在这里使用了\n首先引入进来 var config = require('./config/default.js');\n然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。\n\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n\n## 配置lib的mysql.js文件\n\n\n关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数`query`，通过返回promise的方式以便可以方便用`.then()`来获取数据库返回的数据，然后我们定义了三个表的字段，通过`createTable`来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。\n\n> 这里只介绍注册用户insertData，后续的可以自行查看，都差不多\n\n\n```js\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users set name=?,pass=?,avator=?,moment=?;\"\n  return query( _sql, value )\n}\n```\n我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name、pass、avator、moment，就是用户名、密码、头像、注册时间，最后调用`query`函数把sql语句传进去（之前的写法是`\"insert into users(name,pass) values(?,?);\"`,换成现在得更容易理解）\n\n\nlib/mysql.js\n```js\nvar mysql = require('mysql');\nvar config = require('../config/default.js')\n\nvar pool  = mysql.createPool({\n  host     : config.database.HOST,\n  user     : config.database.USERNAME,\n  password : config.database.PASSWORD,\n  database : config.database.DATABASE\n});\n\nlet query = function( sql, values ) {\n\n  return new Promise(( resolve, reject ) => {\n    pool.getConnection(function(err, connection) {\n      if (err) {\n        reject( err )\n      } else {\n        connection.query(sql, values, ( err, rows) => {\n\n          if ( err ) {\n            reject( err )\n          } else {\n            resolve( rows )\n          }\n          connection.release()\n        })\n      }\n    })\n  })\n\n}\n\n\n// let query = function( sql, values ) {\n// pool.getConnection(function(err, connection) {\n//   // 使用连接\n//   connection.query( sql,values, function(err, rows) {\n//     // 使用连接执行查询\n//     console.log(rows)\n//     connection.release();\n//     //连接不再使用，返回到连接池\n//   });\n// });\n// }\n\nlet users =\n    `create table if not exists users(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     pass VARCHAR(100) NOT NULL,\n     avator VARCHAR(100) NOT NULL,\n     moment VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet posts =\n    `create table if not exists posts(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     title TEXT(0) NOT NULL,\n     content TEXT(0) NOT NULL,\n     md TEXT(0) NOT NULL,\n     uid VARCHAR(40) NOT NULL,\n     moment VARCHAR(100) NOT NULL,\n     comments VARCHAR(200) NOT NULL DEFAULT '0',\n     pv VARCHAR(40) NOT NULL DEFAULT '0',\n     avator VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet comment =\n    `create table if not exists comment(\n     id INT NOT NULL AUTO_INCREMENT,\n     name VARCHAR(100) NOT NULL,\n     content TEXT(0) NOT NULL,\n     moment VARCHAR(40) NOT NULL,\n     postid VARCHAR(40) NOT NULL,\n     avator VARCHAR(100) NOT NULL,\n     PRIMARY KEY ( id )\n    );`\n\nlet createTable = function( sql ) {\n  return query( sql, [] )\n}\n\n// 建表\ncreateTable(users)\ncreateTable(posts)\ncreateTable(comment)\n\n// 注册用户\nlet insertData = function( value ) {\n  let _sql = \"insert into users set name=?,pass=?,avator=?,moment=?;\"\n  return query( _sql, value )\n}\n// 删除用户\nlet deleteUserData = function( name ) {\n  let _sql = `delete from users where name=\"${name}\";`\n  return query( _sql )\n}\n// 查找用户\nlet findUserData = function( name ) {\n  let _sql = `select * from users where name=\"${name}\";`\n  return query( _sql )\n}\n// 发表文章\nlet insertPost = function( value ) {\n  let _sql = \"insert into posts set name=?,title=?,content=?,md=?,uid=?,moment=?,avator=?;\"\n  return query( _sql, value )\n}\n// 更新文章评论数\nlet updatePostComment = function( value ) {\n  let _sql = \"update posts set comments=? where id=?\"\n  return query( _sql, value )\n}\n\n// 更新浏览数\nlet updatePostPv = function( value ) {\n  let _sql = \"update posts set pv=? where id=?\"\n  return query( _sql, value )\n}\n\n// 发表评论\nlet insertComment = function( value ) {\n  let _sql = \"insert into comment set name=?,content=?,moment=?,postid=?,avator=?;\"\n  return query( _sql, value )\n}\n// 通过名字查找用户\nlet findDataByName = function ( name ) {\n  let _sql = `select * from users where name=\"${name}\";`\n  return query( _sql)\n}\n// 通过文章的名字查找用户\nlet findDataByUser = function ( name ) {\n  let _sql = `select * from posts where name=\"${name}\";`\n  return query( _sql)\n}\n// 通过文章id查找\nlet findDataById = function ( id ) {\n  let _sql = `select * from posts where id=\"${id}\";`\n  return query( _sql)\n}\n// 通过评论id查找\nlet findCommentById = function ( id ) {\n  let _sql = `select * FROM comment where postid=\"${id}\";`\n  return query( _sql)\n}\n\n// 查询所有文章\nlet findAllPost = function () {\n  let _sql = ` select * FROM posts;`\n  return query( _sql)\n}\n// 查询分页文章\nlet findPostByPage = function (page) {\n  let _sql = ` select * FROM posts limit ${(page-1)*10},10;`\n  return query( _sql)\n}\n// 查询个人分页文章\nlet findPostByUserPage = function (name,page) {\n  let _sql = ` select * FROM posts where name=\"${name}\" order by id desc limit ${(page-1)*10},10 ;`\n  return query( _sql)\n}\n// 更新修改文章\nlet updatePost = function(values){\n  let _sql = `update posts set  title=?,content=?,md=? where id=?`\n  return query(_sql,values)\n}\n// 删除文章\nlet deletePost = function(id){\n  let _sql = `delete from posts where id = ${id}`\n  return query(_sql)\n}\n// 删除评论\nlet deleteComment = function(id){\n  let _sql = `delete from comment where id=${id}`\n  return query(_sql)\n}\n// 删除所有评论\nlet deleteAllPostComment = function(id){\n  let _sql = `delete from comment where postid=${id}`\n  return query(_sql)\n}\n// 查找评论数\nlet findCommentLength = function(id){\n  let _sql = `select content from comment where postid in (select id from posts where id=${id})`\n  return query(_sql)\n}\n\n// 滚动无限加载数据\nlet findPageById = function(page){\n  let _sql = `select * from posts limit ${(page-1)*5},5;`\n  return query(_sql)\n}\n// 评论分页\nlet findCommentByPage = function(page,postId){\n  let _sql = `select * from comment where postid=${postId} order by id desc limit ${(page-1)*10},10;`\n  return query(_sql)\n}\n\nmodule.exports = {\n\tquery,\n\tcreateTable,\n\tinsertData,\n  \tdeleteUserData,\n  \tfindUserData,\n\tfindDataByName,\n  \tinsertPost,\n  \tfindAllPost,\n  \tfindPostByPage,\n\tfindPostByUserPage,\n\tfindDataByUser,\n\tfindDataById,\n\tinsertComment,\n\tfindCommentById,\n\tupdatePost,\n\tdeletePost,\n\tdeleteComment,\n\tfindCommentLength,\n\tupdatePostComment,\n\tdeleteAllPostComment,\n\tupdatePostPv,\n\tfindPageById,\n\tfindCommentByPage\n}\n\n\n```\n下面是我们建的表\n\n| users   | posts    |  comment  |\n| :----: | :----:   | :----: |\n|   id    |   id    |   id    |\n|   name    |   name    |   name    |\n|   pass    |   title    |   content    |\n|   avator     | content      |   moment    |\n|    moment     | md      |    postid   |\n|     -    | uid      |   avator    |\n|     -    | moment      |    -   |\n|     -   | comments      |    -   |      \n|     -   | pv             |   -   |      \n|     -   |  avator       |    -   |    \n\n\n* id主键递增\n* name: 用户名\n* pass：密码\n* avator：头像\n* title：文章标题\n* content：文章内容和评论\n* md：markdown语法\n* uid：发表文章的用户id \n* moment：创建时间\n* comments：文章评论数\n* pv：文章浏览数\n* postid：文章id\n\n\n现在感觉有点枯燥，那我们先来实现一下注册吧\n\n## 实现注册页面\n\nrouters/singup.js \n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js');\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\nconst moment = require('moment');\nconst fs = require('fs')\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n    \nmodule.exports = router\n```\n使用get方式得到'/signup'页面，然后渲染signup模板，这里我们还没有在写signup.ejs\n\nviews/signup.ejs\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>注册</title>\n</head>\n<body>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"请输入用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"请输入密码\" class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input placeholder=\"请确认密码\" class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>上传头像：</label>\n\t\t\t\t<input type=\"file\" name=\"avator\" id=\"avator\">\n\t\t\t\t<input type=\"hidden\" id=\"avatorVal\">\n\t\t\t\t<img class=\"preview\" alt=\"预览头像\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n</body>\n</html>\n```\n我们先安装supervisor\n\n```\n$ cnpm i supervisor -g\n```\nsupervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序\n```\nsupervisor --harmony index\n```\n现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭\n\n## 完善注册功能\n\n首先我们来完善一下样式吧，稍微美化一下\n\npublic/index.css\n\n```css\nbody,\nheader,\nul,\nli,\np,\ndiv,\nhtml,\nspan,\nh3,\na,\nblockquote {\n    margin: 0;\n    padding: 0;\n    color: #333;\n}\n\nbody {\n    margin-bottom: 20px;\n}\nul,li{\n    list-style-type: none;\n}\na {\n    text-decoration: none;\n}\n\nheader {\n    width: 60%;\n    margin: 20px auto;\n}\nheader:after{\n    content: '';\n    clear: both;\n    display: table;\n}\nheader .user_right{\n    float: right\n}\nheader .user_right .active{\n    color: #5FB878;\n    background: #fff;\n    border: 1px solid #5FB878;\n    box-shadow: 0 5px 5px #ccc;\n}\nheader .user_name {\n    float: left\n}\n.user_name {\n    font-size: 20px;\n}\n\n.has_user a,\n.has_user span,\n.none_user a {\n    padding: 5px 15px;\n    background: #5FB878;\n    border-radius: 15px;\n    color: #fff;\n    cursor: pointer;\n    border: 1px solid #fff;\n    transition: all 0.3s;\n}\n\n.has_user a:hover,.has_user span:hover{\n    color: #5FB878;\n    background: #fff;\n    border: 1px solid #5FB878;\n    box-shadow: 0 5px 5px #ccc;\n}\n\n.posts{\n    border-radius: 4px; \n    border: 1px solid #ddd;\n}\n.posts > li{\n    padding: 10px;\n    position: relative;\n    padding-bottom: 40px;\n}\n.posts .comment_pv{\n    position: absolute;\n    bottom: 5px;\n    right: 10px;\n}\n.posts .author{\n    position: absolute;\n    left: 10px;\n    bottom: 5px;\n}\n.posts .author span{\n    margin-right: 5px;\n}\n.posts > li:hover {\n    background: #f2f2f2;\n}\n.posts > li:hover pre{\n    border: 1px solid #666;\n}\n.posts > li:hover .content{\n    border-top: 1px solid #fff;\n    border-bottom: 1px solid #fff;\n}\n.posts > li + li{\n    border-top: 1px solid #ddd;\n}\n.posts li .title span{\n    position: absolute;\n    left: 10px;\n    top: 10px;\n    color: #5FB878;\n    font-size: 14px;\n}\n.posts li .title{\n     margin-left: 40px;\n     font-size: 20px;\n     color: #222;\n}\n.posts .userAvator{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n}\n.posts .content{\n    border-top: 1px solid #f2f2f2;\n    border-bottom: 1px solid #f2f2f2;\n    margin: 10px 0 0 0 ;\n    padding: 10px 0;\n    margin-left: 40px;\n}\n.userMsg img{\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    margin-right: 10px;\n    vertical-align: middle;\n    display: inline-block;\n}\n.userMsg span{\n    font-size: 18px;\n    color:#333;\n    position: relative;\n    top: 2px;\n}\n.posts li img{\n    max-width: 100%;\n}\n.spost .comment_pv{\n    position: absolute;\n    top: 10px;\n}\n.spost .edit {\n    position: absolute;\n    right: 20px;\n    bottom: 5px;\n}\n\n.spost .edit p {\n    display: inline-block;\n    margin-left: 10px;\n}\n\n.comment_wrap {\n    width: 60%;\n    margin: 20px auto;\n}\n\n.submit {\n    display: block;\n    width: 100px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    border-radius: 4px;\n    background: #5FB878;\n    cursor: pointer;\n    color: #fff;\n    float: left;\n    margin-top: 20px ;\n    border:1px solid #fff;\n}\n.submit:hover{\n    background: #fff;\n    color: #5FB878;\n    border:1px solid #5FB878;\n}\n.comment_list{\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n.cmt_lists:hover{\n    background: #f2f2f2;\n}\n.cmt_lists + .cmt_lists{\n    border-top: 1px solid #ddd;\n}\n.cmt_content {\n    padding: 10px;\n    position: relative;\n    border-radius: 4px;\n    word-break: break-all;\n}\n.cmt_detail{\n    margin-left: 48px;\n}\n.cmt_content img{\n    max-width: 100%;\n}\n/* .cmt_content:after {\n    content: '#content';\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    color: #aaa;\n    font-size: 13px;\n}\n */\n.cmt_name {\n    position: absolute;\n    right: 8px;\n    bottom: 5px;\n    color: #333;\n}\n\n.cmt_name a {\n    margin-left: 5px;\n    color: #1E9FFF;\n}\n.cmt_time{\n    position: absolute;\n    font-size: 12px;\n    right: 5px;\n    top: 5px;\n    color: #aaa\n}\n.form {\n    margin: 0 auto;\n    width: 50%;\n    margin-top: 20px;\n}\n\ntextarea {\n    width: 100%;\n    height: 150px;\n    padding:10px 0 0 10px;\n    font-size: 20px;\n    border-radius: 4px;   \n\tborder: 1px solid #d7dde4;\n    -webkit-appearance: none;\n    resize: none;\n}\n\ntextarea#spContent{\n    width: 98%;\n}\n\n.tips {\n    margin: 20px 0;\n    color: #ec5051;\n    text-align: center;\n}\n\n.container {\n    width: 60%;\n    margin: 0 auto;\n}\n.form img.preview {\n    width:100px;\n    height:100px;\n    border-radius: 50%;\n    display: none;\n    margin-top:10px;\n}\ninput {\n    display: block;\n    width: 100%;\n    height: 35px;\n    font-size: 18px;\n    padding: 6px 7px;\t\n\tborder-radius: 4px;   \n\tborder: 1px solid #d7dde4;\n\t-webkit-appearance: none;\n}\n\ninput:focus,textarea:focus{\n    outline: 0;\n    box-shadow: 0 0 0 2px rgba(51,153,255,.2);\n    border-color: #5cadff;\n}\n\ninput:hover,input:active,textarea:hover,textarea:active{\n    border-color: #5cadff;\n}\n\n.create label {\n    display: block;\n    margin: 10px 0;\n}\n\n.comment_wrap form {\n    width: 100%;\n    margin-bottom: 85px;\n}\n\n.delete_comment,\n.delete_post {\n    cursor: pointer;\n}\n\n.delete_comment:hover,\n.delete_post:hover,\na:hover {\n    color: #ec5051;\n}\n.disabled{\n    user-select: none;\n    cursor: not-allowed !important;\n}\n.error{\n    color: #ec5051;\n}\n.success{\n    color: #1E9FFF;\n}\n.container{\n    width: 60%;\n    margin:0 auto;\n}\n.message{\n    position: fixed;\n    top: -100%;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 10px 20px;\n    background: rgba(0, 0, 0, 0.7);\n    color: #fff;\n    border-bottom-left-radius: 15px;\n    border-bottom-right-radius: 15px;\n    z-index: 99999;\n}\n.markdown pre{\n    display: block;\n    overflow-x: auto;\n    padding: 0.5em;\n    background: #F0F0F0;\n    border-radius: 3px;\n    border: 1px solid #fff;\n}\n.markdown blockquote{\n    padding: 0 1em;\n    color: #6a737d;\n    border-left: 0.25em solid #dfe2e5;\n    margin: 10px 0;\n}\n.markdown ul li{\n    list-style: circle;\n    margin-top: 5px;\n}\n```\n\n我们再把模板引擎的header和footer独立出来\n\n/views/header.ejs\n顺便引入index.css和jq\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>koa2-blog</title>\n\t<link rel=\"icon\" href=\"http://www.wclimb.site/images/avatar.png\">\n\t<link rel=\"stylesheet\" href=\"/index.css\">\n\t<script src=\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\t<script>\n\t\tfunction fade(txt){\n\t\t\t$('.message').text(txt)\n\t\t\t$('.message').animate({\n\t\t\t\ttop:0\n\t\t\t})\n\t\t\tsetTimeout(function(){\n\t\t\t\t$('.message').animate({\n\t\t\t\t\ttop: '-100%'\n\t\t\t\t})\n\t\t\t},1500)\n\t\t}\n\t\t$(function(){\n\t\t\t$('.signout').click(()=>{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signout\",\n\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\tfade('登出成功')\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\twindow.location.href = \"/posts\"\n\t\t\t\t\t\t\t},1500)\t\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\t</script>\n</head>\n<body>\n\t<header>\n\t\t<div class=\"user_name\">\n\t\t\t<% if(session.user){ %>\n\t\t\t\t Hello,<%= session.user %>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t欢迎注册登录^_^\n\t\t\t<% } %>\n\t\t</div>\n\t\t<div class=\"message\">登录成功</div>\n\t\t<div class=\"user_right\">\n\t\t\t<%  if(session.user){ %>\n\t\t\t\t<div class=\"has_user\">\n\t\t\t\t\t<a target=\"__blank\" href=\"https://github.com/wclimb/Koa2-blog\">GitHub</a>\n\t\t\t\t\t<% if(type == 'all'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'my'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts?author=<%= session.user %>\">我的文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts?author=<%= session.user %>\">我的文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'create'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/create\">发表文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/create\">发表文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t\n\t\t\t\t\t<span class=\"signout\">登出</span>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t\t<% if(!session.user){ %>\n\t\t\t\t<div class=\"none_user has_user\">\n\t\t\t\t\t<a target=\"__blank\" href=\"https://github.com/wclimb/Koa2-blog\">GitHub</a>\n\t\t\t\t\t<% if(type == 'all'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/posts\">全部文章</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'signup'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/signup\">注册</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/signup\">注册</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t\t<% if(type == 'signin'){ %>\n\t\t\t\t\t\t<a class=\"active\" href=\"/signin\">登录</a>\n\t\t\t\t\t<% }else{ %>\n\t\t\t\t\t\t<a href=\"/signin\">登录</a>\n\t\t\t\t\t<% }%>\n\t\t\t\t</div>\n\t\t\t<% } %>\n\t\t</div>\n\t</header>\n\n```\n首先我们看到用到了session.user，这个值从哪来呢？请看下面的代码\n```js\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n```\n我们可以看到我们向模板传了一个session值，session:ctx.session，这个值存取的就是用户的信息，包括用户名、登录之后的id等，session一般是你关闭浏览器就过期了，等于下次打开浏览器的时候就得重新登录了，用if判断他存不存在，就可以知道用户是否需要登录，如果不存在用户，则只显示`全部文章` `注册` `登录` ,如果session.user存在则有登出的按钮。\n\n在上面我们会看到我用了另外一个if判断，判断type类型，这样做的目的是比如我们登录注册页面，注册页面的导航会高亮，其实就是添加了class：active;\n之后我们每个ejs文件的头部会这样写`<%- include(\"header\",{type:'signup'}) %>` 登录页面则是`<%- include(\"header\",{type:'signin'}) %>`\n\n\n/views/footer.ejs\n```html\n\t\n</body>\n</html>\n```\n\n修改views/signup.ejs \n```html\n<%- include(\"header\",{type:'signup'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"请输入用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"请输入密码\" class=\"password\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>重复密码：</label> \n\t\t\t\t<input placeholder=\"请确认密码\" class=\"repeatpass\" type=\"password\" name=\"repeatpass\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>上传头像：</label>\n\t\t\t\t<input type=\"file\" name=\"avator\" id=\"avator\">\n\t\t\t\t<input type=\"hidden\" id=\"avatorVal\">\n\t\t\t\t<img class=\"preview\" alt=\"预览头像\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">注册</div>\n\t\t</form>\n\t</div>\n\t<script>\n\t\t$(window).keyup(function (e) {\n\t\t\t//console.log(e.keyCode)\n\t\t\tif (e.keyCode == 13) {\n\t\t\t\t$('.submit').click()\n\t\t\t}\n\t\t})\n\t\t$('#avator').change(function(){\n\t\t\tif (this.files.length != 0) {\n\t\t\t\tvar file = this.files[0],\n\t\t\t\t\treader = new FileReader();\n\t\t\t\tif (!reader) {\n\t\t\t\t\tthis.value = '';\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\tconsole.log(file.size)\n\t\t\t\tif (file.size >= 1024 * 1024 / 2) {\n\t\t\t\t\tfade(\"请上传小于512kb的图片!\")\n\t\t\t\t\treturn \n\t\t\t\t}\n\t\t\t\treader.onload = function (e) {\n\t\t\t\t\tthis.value = '';\n\t\t\t\t\t$('form .preview').attr('src', e.target.result)\n\t\t\t\t\t$('form .preview').fadeIn()\n\t\t\t\t\t$('#avatorVal').val(e.target.result)\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(file);\n\t\t\t};\n\t\t})\n\t\t$('.submit').click(()=>{\n\t\t\t// console.log($('.form').serialize())\n\t\t\tif ($('input[name=name]').val().trim() == '') {\n\t\t\t\tfade('请输入用户名！')\n\t\t\t}else if($('input[name=name]').val().match(/[<'\">]/g)){\n\t\t\t\tfade('请输入合法字符！')\n\t\t\t}else if($('#avatorVal').val() == ''){\n\t\t\t\tfade('请上传头像！')\n\t\t\t}else{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signup\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname: $('input[name=name]').val(),\n\t\t\t\t\t\tpassword: $('input[name=password]').val(),\n\t\t\t\t\t\trepeatpass: $('input[name=repeatpass]').val(),\n\t\t\t\t\t\tavator: $('#avatorVal').val(),\n\t\t\t\t\t},\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t   if (msg.data == 1) {           \t\t\n\t\t\t\t\t\t   $('input').val('')\n\t\t\t\t\t\t   fade('用户名存在')\n\t\t\t\t\t   }\n\t\t\t\t\t   else if (msg.data == 2){\n\t\t\t\t\t\t\tfade('请输入重复的密码')\t               \t\t\n\t\t\t\t\t   }\n\t\t\t\t\t   else if(msg.data == 3){\n\t\t\t\t\t\t\tfade('注册成功')\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\twindow.location.href=\"/signin\"\t  \n\t\t\t\t\t\t\t},1000)\n\t\t\t\t\t   \t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\n\t\t\t\t\t}\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t})\t\t\n\t</script>\n<% include footer %>\n```\n先看我们请求的url地址，是'/signup'，为什么是这个呢？我们看下面这段代码(后面有完整的)\n```js\nrouter.post('/signup', async(ctx, next) => {\n    //console.log(ctx.request.body)\n    let user = {\n        name: ctx.request.body.name,\n        pass: ctx.request.body.password,\n        repeatpass: ctx.request.body.repeatpass,\n        avator: ctx.request.body.avator\n    }\n    ....\n}\n```\n我们的请求方式是post，地址是`/signup`所以走了这段代码，之后会获取我们输入的信息，通过ctx.request.body拿到\n\n这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中\n\n修改routers/signup.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js');\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\nconst moment = require('moment');\nconst fs = require('fs')\n// 注册页面\nrouter.get('/signup', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signup', {\n        session: ctx.session,\n    })\n})\n// post 注册\nrouter.post('/signup', async(ctx, next) => {\n    //console.log(ctx.request.body)\n    let user = {\n        name: ctx.request.body.name,\n        pass: ctx.request.body.password,\n        repeatpass: ctx.request.body.repeatpass,\n        avator: ctx.request.body.avator\n    }\n    await userModel.findDataByName(user.name)\n        .then(async (result) => {\n            console.log(result)\n            if (result.length) {\n                try {\n                    throw Error('用户已经存在')\n                } catch (error) {\n                    //处理err\n                    console.log(error)\n                }\n                // 用户存在\n                ctx.body = {\n                    data: 1\n                };;\n                \n            } else if (user.pass !== user.repeatpass || user.pass === '') {\n                ctx.body = {\n                    data: 2\n                };\n            } else {\n                // ctx.session.user=ctx.request.body.name   \n                let base64Data = user.avator.replace(/^data:image\\/\\w+;base64,/, \"\");\n                let dataBuffer = new Buffer(base64Data, 'base64');\n                let getName = Number(Math.random().toString().substr(3)).toString(36) + Date.now()\n                await fs.writeFile('./public/images/' + getName + '.png', dataBuffer, err => { \n                    if (err) throw err;\n                    console.log('头像上传成功') \n                });            \n                await userModel.insertData([user.name, md5(user.pass), getName, moment().format('YYYY-MM-DD HH:mm:ss')])\n                    .then(res=>{\n                        console.log('注册成功',res)\n                        //注册成功\n                        ctx.body = {\n                            data: 3\n                        };\n                    })\n            }\n        })\n})\nmodule.exports = router\n```\n- 我们使用md5实现密码加密，长度是32位的\n- 使用我们之前说的`bodyParse`来解析提交的数据，通过`ctx.request.body`得到\n- 我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中\n- ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后`msg.data=1`的时候就代表用户存在，`msg.data`出现在后面的`signup.ejs`模板ajax请求中\n- 上传头像之前要新建好文件夹，我们ajax发送的是base64的格式，然后使用fs.writeFile来生成图片\n\n我们使用ajax来提交数据，方便来做成功错误的处理\n\n## 模板引擎ejs\n\n我们使用的是ejs，语法可以见[ejs](https://www.npmjs.com/package/ejs)\n\n之前我们写了这么一段代码\n```js\nrouter.get('/signup',async (ctx,next)=>{\n\tawait ctx.render('signup',{\n\t\tsession:ctx.session,\n\t})\n})\n```\n这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了\nejs的常用标签为：\n\n- `<% code %>`：运行 JavaScript 代码，不输出\n- `<%= code %>`：显示转义后的 HTML内容\n- `<%- code %>`：显示原始 HTML 内容\n\n`<%= code %>`和`<%- code %>`的区别在于，<%= code %>不管你写什么都会原样输出，比如code为 `<strong>hello</strong>`的时候 `<%= code %>` 会显示`<strong>hello</strong>`\n而`<%- code %>`则显示加粗的hello\n\n\n\n## 实现登录页面\n![img](/img/signin1.png)\n\n修改 /routers/signin.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\n\nrouter.get('/signin', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signin', {\n        session: ctx.session,\n    })\n})\nmodule.exports=router\n```\n\n修改 /views/signin.ejs\n\n```html\n<%- include(\"header\",{type:'signin'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\t\n\t</div>\n<% include footer %>\n```\n\n修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下\n\n```js\napp.use(require('./routers/signin.js').routes())\n\n```\n\n现在注册一下来看看效果吧\n```\n$ supervisor --harmony index\n```\n![img](/img/signup1.png)\n\n我们怎么查看我们注册好的账号和密码呢？打开mysql控制台\n\n```\n$ select * from users;\n```\n这样刚刚我们注册的用户信息都出现了\n![img](/img/users.png)\n\n\n如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，https://github.com/wclimb/Koa2-blog\n\n## 登录页面\n\n修改signin\nrouters/signin.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst md5 = require('md5')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin\n\nrouter.get('/signin', async(ctx, next) => {\n    await checkNotLogin(ctx)\n    await ctx.render('signin', {\n        session: ctx.session,\n    })\n})\n\nrouter.post('/signin', async(ctx, next) => {\n    console.log(ctx.request.body)\n    let name = ctx.request.body.name;\n    let pass = ctx.request.body.password;\n\n    await userModel.findDataByName(name)\n        .then(result => {\n            let res = result\n            if (name === res[0]['name'] && md5(pass) === res[0]['pass']) {\n                ctx.body = true\n                ctx.session.user = res[0]['name']\n                ctx.session.id = res[0]['id']\n                console.log('ctx.session.id', ctx.session.id)\n                console.log('session', ctx.session)\n                console.log('登录成功')\n            }else{\n                ctx.body = false\n                console.log('用户名或密码错误!')\n            }\n        }).catch(err => {\n            console.log(err)\n        })\n\n})\n\nmodule.exports = router\n```\n我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密\n我们可以看到登录成功返回的结果是`result` 结果是这样的一个json数组：id：4 name：rrr  pass：...\n[ RowDataPacket { id: 4, name: 'rrr', pass: '44f437ced647ec3f40fa0841041871cd' } ]\n\n修改views/signin.ejs\nsignin.ejs\n```html\n<%- include(\"header\",{type:'signin'}) %>\n\t<div class=\"container\">\n\t\t<form class=\"form create\" method=\"post \">\n\t\t\t<div>\n\t\t\t\t<label>用户名：</label> \n\t\t\t\t<input placeholder=\"用户名\" type=\"text\" name=\"name\">\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>密码：</label> \n\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\">\n\t\t\t</div>\n\t\t\t<div class=\"submit\">登录</div>\n\t\t</form>\t\t\n\t</div>\n\t<script>\n\t\t$(window).keyup(function(e){\n\t\t\t//console.log(e.keyCode)\n\t\t\tif (e.keyCode == 13) {\n\t\t\t\t$('.submit').click()\n\t\t\t}\n\t\t})\n\t\t$('.submit').click(()=>{\n\t\t\tif ($('input[name=name]').val().trim() == '' || $('input[name=password]').val().trim() == '' ) {\n\t\t\t\tfade('请输入用户名或密码')\n\t\t\t}else{\n\t\t\t\tconsole.log($('.form').serialize())\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: \"/signin\",\n\t\t\t\t\tdata: $('.form').serialize(),\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t    if (!msg) {\n\t\t\t\t\t\t\t$('input').val('')\n\t\t\t\t\t\t    fade('用户名或密码错误')\n\t\t\t\t\t    } else{\n\t\t\t\t\t\t    fade('登录成功')\n\t\t\t\t\t\t    setTimeout(()=>{\n\t\t\t\t\t\t\t    window.location.href = \"/posts\"\n\t\t\t\t\t\t    },1500)\t               \t\n\t\t\t\t\t    }\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t})\t\t\n\t</script>\n<% include footer %>\n```\n我们增加了ajax请求，在routers/signin.js里，我们设置如果登录失败就返回false，登录成功返回true\n\n```\nctx.body = false\nctx.body = true\n```\n那我们登录成功后要做跳转，可以看到`window.location.href=\"/posts\"`跳转到posts页面\n\n## 全部文章\n![img](/img/posts1.png)\n修改routers/posts.js\n\nposts.js\n```js\nconst router = require('koa-router')();\nconst userModel = require('../lib/mysql.js')\nconst moment = require('moment')\nconst checkNotLogin = require('../middlewares/check.js').checkNotLogin\nconst checkLogin = require('../middlewares/check.js').checkLogin;\nconst md = require('markdown-it')();  \n// 重置到文章页\nrouter.get('/', async(ctx, next) => {\n    ctx.redirect('/posts')\n})\n// 文章页\nrouter.get('/posts', async(ctx, next) => {\n    let res,\n        postsLength,\n        name = decodeURIComponent(ctx.request.querystring.split('=')[1]);\n    if (ctx.request.querystring) {\n        console.log('ctx.request.querystring', name)\n        await userModel.findDataByUser(name)\n            .then(result => {\n                postsLength = result.length\n            })\n        await userModel.findPostByUserPage(name,1)\n            .then(result => {\n                res = result\n            })\n        await ctx.render('selfPosts', {\n            session: ctx.session,\n            posts: res,\n            postsPageLength:Math.ceil(postsLength / 10),\n        })\n    } else {\n        await userModel.findPostByPage(1)\n            .then(result => {\n                //console.log(result)\n                res = result\n            })\n        await userModel.findAllPost()\n            .then(result=>{\n                postsLength = result.length\n            })    \n        await ctx.render('posts', {\n            session: ctx.session,\n            posts: res,\n            postsLength: postsLength,\n            postsPageLength: Math.ceil(postsLength / 10),\n            \n        })\n    }\n})\n// 首页分页，每次输出10条\nrouter.post('/posts/page', async(ctx, next) => {\n    let page = ctx.request.body.page;\n    await userModel.findPostByPage(page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n// 个人文章分页，每次输出10条\nrouter.post('/posts/self/page', async(ctx, next) => {\n    let data = ctx.request.body\n    await userModel.findPostByUserPage(data.name,data.page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\nmodule.exports = router\n```\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉\n\n\n修改 views/posts.ejs\n\n```\n<%- include(\"header\",{type:'posts'}) %>\n\n    posts\n\n<% include footer %>\n```\n现在看看登录成功之后的页面吧\n\n接下来我们实现登出页面\n\n## 登出页面\n\n修改 router/signout.js\n\nsignout.js\n```js\nconst router = require('koa-router')();\n\nrouter.get('/signout', async(ctx, next) => {\n    ctx.session = null;\n    console.log('登出成功')\n    ctx.body = true\n})\n\nmodule.exports = router\n```\n把session设置为null即可\n\n修改 index.js\n\napp.use(require('./routers/posts.js').routes())的注释去掉，现在把注释的路由全部取消注释就对了\n\n\n然后我们看看 `views/header.ejs`\n\n我们点击登出后的ajax 的提交，成功之后回到posts页面\n\n## 发表文章\n\n修改router/posts\n在后面增加\n```js\n// 发表文章页面\nrouter.get('/create', async(ctx, next) => {\n    await ctx.render('create', {\n        session: ctx.session,\n    })\n})\n\n// post 发表文章\nrouter.post('/create', async(ctx, next) => {\n    let title = ctx.request.body.title,\n        content = ctx.request.body.content,\n        id = ctx.session.id,\n        name = ctx.session.user,\n        time = moment().format('YYYY-MM-DD HH:mm:ss'),\n        avator,\n        // 现在使用markdown不需要单独转义\n        newContent = content.replace(/[<\">']/g, (target) => { \n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        }),\n        newTitle = title.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        });\n\n    //console.log([name, newTitle, content, id, time])\n    await userModel.findUserData(ctx.session.user)\n        .then(res => {\n            console.log(res[0]['avator'])\n            avator = res[0]['avator']       \n        })\n    await userModel.insertPost([name, newTitle, md.render(content), content, id, time,avator])\n            .then(() => {\n                ctx.body = true\n            }).catch(() => {\n                ctx.body = false\n            })\n\n})\n```\n\n修改 views/create.ejs\n\ncreate.ejs\n![img](/img/create1.png)\n```html\n<%- include(\"header\",{type:'create'}) %>\n<div class=\"container\">\n\t<form style=\"width:100%\" method=\"post\" class=\"form create\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"请输入标题\" type=\"text\" name=\"title\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea placeholder=\"请输入内容\" name=\"content\" id=\"\" cols=\"42\" rows=\"10\"></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">发表</div>\n\t</form>\n</div>\n<script>\n    $('.submit').click(()=>{\n        if ($('input[name=title]').val().trim() == '') {\n            fade('请输入标题')\n        }else if ($('textarea').val().trim() == '') {\n            fade('请输入内容')\n        }else{          \n            $.ajax({\n                url: \"/create\",\n                data: $('.form').serialize(),\n                type: \"POST\",\n                cache: false,\n                dataType: 'json',\n                success: function (msg) {\n                    if (msg) {\n                        fade('发表成功')\n                        setTimeout(()=>{\n                            window.location.href=\"/posts\"\n                        },1000)\n                    }else{\n                        fade('发表失败')\n                    }\n                },\n                error: function () {\n                    alert('异常');\n                }\n            })\t\t\t\n        }   \n    })\n</script>\n<% include footer %>\n```\n现在看看能不能发表吧\n\n即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据\n\n我们可以看我们之前写的代码 `router.get('/posts', async(ctx, next) => {}`路由\n```js\nif (ctx.request.querystring) {\n\t...\n}else {\n        await userModel.findPostByPage(1)\n            .then(result => {\n                //console.log(result)\n                res = result\n            })\n        await userModel.findAllPost()\n            .then(result=>{\n                postsLength = result.length\n            })    \n        await ctx.render('posts', {\n            session: ctx.session,\n            posts: res,\n            postsLength: postsLength,\n            postsPageLength: Math.ceil(postsLength / 10),\n            \n        })\n    }\n```\nif前面这部分我们先不用管，后面会说。只需要看else后面的代码我们通过`userModel.findPostByPage(1)`来获取第一页的数据，然后查找所有文章的数量，最后除以10拿到首页文章的页数，把数据`postsPageLength`的值传给模板posts.ejs。这样就可以渲染出来了\n\n修改 views/posts.ejs\n\nposts.ejs\n\n```html\n<%- include(\"header\",{type:'all'}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts\">\n\t\t\t<% posts.forEach(function(res){ %>\n\t\t\t\t<li>\n\t\t\t\t\t<div class=\"author\">\n\t\t\t\t\t\t<span title=\"<%= res.name %>\"><a href=\"/posts?author=<%= res.name %> \">author: <%= res.name %></a></span>\n\t\t\t\t\t\t<span>评论数：<%= res.comments %></span>\n\t\t\t\t\t\t<span>浏览量：<%= res.pv %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t\t<span><%= res.moment %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<a href=\"/posts/<%= res.id %>\">\n\t\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t\t<img class=\"userAvator\" src=\"images/<%= res.avator %>.png\">\n\t\t\t\t\t\t\t<%= res.title %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t\t<%- res.content %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t<% }) %>\n\t\t</ul>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= postsPageLength %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage: true,\n\t\t\tcount: 2//当前页前后显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\t$.ajax({\n\t\t\t\turl: \"posts/page\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tconsole.log(msg)\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.posts').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t$('.posts').append(\n\t\t\t\t\t\t\t\t'<li>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"author\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span title=\\\"'+ val.name +'\\\"><a href=\\\"/posts?author='+ val.name +' \\\">author: '+ val.name +'</a></span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>评论数：'+ val.comments +'</span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>浏览量：'+ val.pv +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"comment_pv\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span>'+ val.moment +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<a href=\\\"/posts/'+ val.id +'\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"title\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t'<img class=\"userAvator\" src=\"images/'+ val.avator +'.png\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.title +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"content\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.content +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'</a>'+\n\t\t\t\t\t\t\t\t'</li>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t</script>\n<% include footer %>\n```\n现在看看posts页面有没有文章出现了\n\n我们看到是所第一页的文章数据，初始化的稍后我们是用服务端渲染的数据，使用了分页，每页显示10条数据，然后通过请求页数。\n下面是服务端请求拿到的第一页的数据\n```\nawait userModel.findPostByUserPage(name,1)\n        .then(result => {\n            res = result\n        })\n```\n要拿到别的页面数据的话要向服务器发送post请求，如下\n```\n// 首页分页，每次输出10条\nrouter.post('/posts/page', async(ctx, next) => {\n    let page = ctx.request.body.page;\n    await userModel.findPostByPage(page)\n            .then(result=>{\n                //console.log(result)\n                ctx.body = result   \n            }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n```\n\n## 单篇文章页面\n![img](/img/postcontent1.png)\n但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？\n\n修改 routers/posts.js\n\n在posts.js后面增加\n\n```js\n// 单篇文章页\nrouter.get('/posts/:postId', async(ctx, next) => {\n    let comment_res,\n        res,\n        pageOne,\n        res_pv; \n    await userModel.findDataById(ctx.params.postId)\n        .then(result => {\n            //console.log(result )\n            res = result\n            res_pv = parseInt(result[0]['pv'])\n            res_pv += 1\n           // console.log(res_pv)\n        })\n    await userModel.updatePostPv([res_pv, ctx.params.postId])\n    await userModel.findCommentByPage(1,ctx.params.postId)\n        .then(result => {\n            pageOne = result\n            //console.log('comment', comment_res)\n        })\n    await userModel.findCommentById(ctx.params.postId)\n        .then(result => {\n            comment_res = result\n            //console.log('comment', comment_res)\n        })\n    await ctx.render('sPost', {\n        session: ctx.session,\n        posts: res[0],\n        commentLenght: comment_res.length,\n        commentPageLenght: Math.ceil(comment_res.length/10),\n        pageOne:pageOne\n    })\n\n})\n```\n\n现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增\n\n我们通过userModel.findDataById 文章的id来查找数据库\n我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能\n最后通过sPost.ejs模板渲染单篇文章\n\n\n修改 views/sPost.ejs\n\nsPost.ejs\n\n```html\n<%- include(\"header\",{type:''}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts spost\">\n\t\t\t<li>\n\t\t\t\t<div class=\"author\">\n\t\t\t\t\t<span title=\"<%= posts.name %>\"><a href=\"/posts?author=<%= posts.name %> \">author: <%= posts.name %></a></span>\n\t\t\t\t\t<span>评论数：<%= posts.comments %></span>\n\t\t\t\t\t<span>浏览量：<%= posts.pv %></span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t<span><%= posts.moment %></span>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"/posts/<%= posts.id %>\">\n\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t<img class=\"userAvator\" src=\"../images/<%= posts.avator %>.png\">\n\t\t\t\t\t\t<%= posts.title %>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t<%- posts.content %>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t\t<div class=\"edit\">\n\t\t\t\t\t<% if(session && session.user ===  posts.name  ){ %>\n\t\t\t\t\t<p><a href=\"<%= posts['id'] %>/edit\">编辑</a></p>\n\t\t\t\t\t<p><a class=\"delete_post\">删除</a></p>\n\t\t\t\t\t<% } %>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t<div class=\"comment_wrap\">\n\t\t<% if(session.user){ %>\n\t\t<form class=\"form\" method=\"post\" action=\"/<%= posts.id %>\">\n\t\t\t<textarea id=\"spContent\" name=\"content\" cols=\"82\"></textarea>\n\t\t\t<div class=\"submit\">发表留言</div>\n\t\t</form>\n\t\t<% } else{ %>\n\t\t\t<p class=\"tips\">登录之后才可以评论哟</p>\n\t\t<% } %>\n\t\t<% if (commentPageLenght > 0) { %>\n\t\t<div class=\"comment_list markdown\">\n\t\t\t<% pageOne.forEach(function(res){ %>\n\t\t\t\t<div class=\"cmt_lists\">\n\t\t\t\t\t<div class=\"cmt_content\">\n\t\t\t\t\t\t<div class=\"userMsg\">\n\t\t\t\t\t\t\t<img src=\"../images/<%= res['avator'] %>.png\" alt=\"\"><span><%= res['name'] %></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"cmt_detail\">\n\t\t\t\t\t\t\t<%- res['content'] %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"cmt_time\"><%= res['moment'] %></span>\n\t\t\t\t\t\t<span class=\"cmt_name\">\n\t\t\t\t\t\t\t<% if(session && session.user ===  res['name']){ %>\n\t\t\t\t\t\t\t\t<a class=\"delete_comment\" href=\"javascript:delete_comment(<%= res['id'] %>);\"> 删除</a>\n\t\t\t\t\t\t\t<% } %>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t<% }) %>\n\t\t</div>\t\n\t\t<% } else{ %>\n\t\t\t<p class=\"tips\">还没有评论，赶快去评论吧！</p>\n\t\t<% } %>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tvar userName = \"<%- session.user %>\"\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= commentPageLenght %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage:true,\n\t\t\tcount: 2//当前页前面显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\tvar _comment = ''\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/commentPage\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t//console.log(msg)\n\t\t\t\t\t_comment = ''\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.comment_list').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t_comment += '<div class=\\\"cmt_lists\\\"><div class=\\\"cmt_content\\\"><div class=\\\"userMsg\\\"><img src = \\\"../images/'+ val.avator +'.png\\\" ><span>'+ val.name +'</span></div ><div class=\"cmt_detail\">'+ val.content + '</div><span class=\\\"cmt_time\\\">'+ val.moment +'</span><span class=\\\"cmt_name\\\">';\n\t\t\t\t\t\t\t\tif (val.name == userName) {\n\t\t\t\t\t\t\t\t\t_comment += '<a class=\\\"delete_comment\\\" href=\\\"javascript:delete_comment('+ val.id +');\\\"> 删除</a>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_comment += '</span></div></div>'\n\t\t\t\t\t\t})\n\t\t\t\t\t\t$('.comment_list').append(_comment)\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t})\n\t\t\n\t\t// 删除文章\n\t\t$('.delete_post').click(() => {\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/remove\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tif (msg.data == 1) {\n\t\t\t\t\t\tfade('删除文章成功')\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.href = \"/posts\"\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t} else if (msg.data == 2) {\n\t\t\t\t\t\tfade('删除文章失败');\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t// 评论\n\t\tvar isAllow = true\n\t\t$('.submit').click(function(){\n\t\t\tif (!isAllow) return\n\t\t\tisAllow = false\n\t\t\tif ($('textarea').val().trim() == '') {\n\t\t\t\tfade('请输入评论！')\n\t\t\t}else{\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: '/' + location.pathname.split('/')[2],\n\t\t\t\t\tdata:$('.form').serialize(),\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tcache: false,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\tfade('发表留言成功')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\tisAllow = true\n\t\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t\t},1500)  \t\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\talert('异常');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\t// 删除评论\n\t\tfunction delete_comment(id) {\n\t\t\t$.ajax({\n\t\t\t\turl: \"<%= posts.id %>/comment/\" + id + \"/remove\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\tif (msg.data == 1) {\n\t\t\t\t\t\tfade('删除留言成功')\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t} else if (msg.data == 2) {\n\t\t\t\t\t\tfade('删除留言失败');\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t\t}, 1500)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function () {\n\t\t\t\t\talert('异常')\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t</script>\n<% include footer %>\n```\n现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户自己发表的文章列表，我们之前在 get '/posts' 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了一个处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了`ctx.request.querystring` 获取到的是：`author=xxx`\n\n注：这里我们处理了，通过判断 `session.user ===  res['name']` 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的`<a href=\"\"></a>`标签\n\n## 个人已发表文章列表里面\n还记得之前在 get '/post' 里面的代码吗？\n下面的代码就是之前说先不处理的代码片段，不过这个不用再次添加，之前已经添加好了，这段代码处理个人发布的文章列表，我们是通过selfPosts.ejs模板来渲染的，样式和全部文章列表一样，但是牵扯到分页的问题，\n分页请求的是不同的接口地址\n\n```js\nif (ctx.request.querystring) {\n        console.log('ctx.request.querystring', name)\n        await userModel.findDataByUser(name)\n            .then(result => {\n                postsLength = result.length\n            })\n        await userModel.findPostByUserPage(name,1)\n            .then(result => {\n                res = result\n            })\n        await ctx.render('selfPosts', {\n            session: ctx.session,\n            posts: res,\n            postsPageLength:Math.ceil(postsLength / 10),\n        })\n    }\n```\n修改 selfPost.ejs\n\n```html\n<%- include(\"header\",{type:'my'}) %>\n\t<div class=\"container\">\n\t\t<ul class=\"posts\">\n\t\t\t<% posts.forEach(function(res){ %>\n\t\t\t\t<li>\n\t\t\t\t\t<div class=\"author\">\n\t\t\t\t\t\t<span title=\"<%= res.name %>\"><a href=\"/posts?author=<%= res.name %> \">author: <%= res.name %></a></span>\n\t\t\t\t\t\t<span>评论数：<%= res.comments %></span>\n\t\t\t\t\t\t<span>浏览量：<%= res.pv %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"comment_pv\">\n\t\t\t\t\t\t<span><%= res.moment %></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<a href=\"/posts/<%= res.id %>\">\n\t\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t\t<img class=\"userAvator\" src=\"images/<%= res.avator %>.png\">\n\t\t\t\t\t\t\t<%= res.title %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"content markdown\">\n\t\t\t\t\t\t\t<%- res.content %>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t<% }) %>\n\t\t</ul>\n\t\t<div style=\"margin-top: 30px\" class=\"pagination\" id=\"page\"></div>\t\n\t</div>\n\t<script src=\"http://www.wclimb.site/pagination/pagination.js\"></script>\n\t<script>\n\t\tpagination({\n\t\t\tselector: '#page',\n\t\t\ttotalPage: <%= postsPageLength %>,\n\t\t\tcurrentPage: 1,\n\t\t\tprev: '上一页',\n\t\t\tnext: '下一页',\n\t\t\tfirst: true,\n\t\t\tlast: true,\n\t\t\tshowTotalPage: true,\n\t\t\tcount: 2//当前页前后显示的数量\n\t\t},function(val){\n\t\t\t// 当前页\n\t\t\t$.ajax({\n\t\t\t\turl: \"posts/self/page\",\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata:{\n\t\t\t\t\tpage: val,\n\t\t\t\t\tname: location.search.slice(1).split('=')[1]\n\t\t\t\t},\n\t\t\t\tcache: false,\n\t\t\t\tsuccess: function (msg) {\n\t\t\t\t\t//console.log(msg)\n\t\t\t\t\tif (msg != 'error') {\n\t\t\t\t\t\t$('.posts').html(' ')\n\t\t\t\t\t\t$.each(msg,function(i,val){\n\t\t\t\t\t\t\t//console.log(val.content)\n\t\t\t\t\t\t\t$('.posts').append(\n\t\t\t\t\t\t\t\t'<li>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"author\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span title=\\\"'+ val.name +'\\\"><a href=\\\"/posts?author='+ val.name +' \\\">author: '+ val.name +'</a></span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>评论数：'+ val.comments +'</span>'+\n\t\t\t\t\t\t\t\t\t\t'<span>浏览量：'+ val.pv +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<div class=\\\"comment_pv\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<span>'+ val.moment +'</span>'+\n\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'<a href=\\\"/posts/'+ val.id +'\\\">'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"title\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t'<img class=\"userAvator\" src=\"images/' + val.avator + '.png\">' +\n\t\t\t\t\t\t\t\t\t\t\t val.title +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t\t'<div class=\\\"content\\\">'+\n\t\t\t\t\t\t\t\t\t\t\t val.content +\n\t\t\t\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t\t\t'</a>'+\n\t\t\t\t\t\t\t\t'</li>'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}else{\n\t\t\t\t\t\talert('分页不存在')\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t})\n\t</script>\n<% include footer %>\n```\n\n\n## 编辑文章、删除文章、评论、删除评论\n\n> 评论\n\n修改routers/posts.js \n\n在post.js 后面增加\n\n```js\n// 发表评论\nrouter.post('/:postId', async(ctx, next) => {\n    let name = ctx.session.user,\n        content = ctx.request.body.content,\n        postId = ctx.params.postId,\n        res_comments,\n        time = moment().format('YYYY-MM-DD HH:mm:ss'),\n        avator;\n    await userModel.findUserData(ctx.session.user)\n        .then(res => {\n            console.log(res[0]['avator'])\n            avator = res[0]['avator']\n        })   \n    await userModel.insertComment([name, md.render(content),time, postId,avator])\n    await userModel.findDataById(postId)\n        .then(result => {\n            res_comments = parseInt(result[0]['comments'])\n            res_comments += 1\n        })\n    await userModel.updatePostComment([res_comments, postId])\n        .then(() => {\n            ctx.body = true\n        }).catch(() => {\n            ctx.body = false\n        })\n})\n// 评论分页\nrouter.post('/posts/:postId/commentPage', async function(ctx){\n    let postId = ctx.params.postId,\n        page = ctx.request.body.page;\n    await userModel.findCommentByPage(page,postId)\n        .then(res=>{\n            ctx.body = res\n        }).catch(()=>{\n            ctx.body = 'error'\n        })  \n})\n```\n现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此\n评论我们也做了分页，所以后面会有一个评论的分页的接口，我们已经在sPost.ejs里面写好了ajax请求\n\n> 删除评论\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 删除评论\nrouter.post('/posts/:postId/comment/:commentId/remove', async(ctx, next) => {\n    let postId = ctx.params.postId,\n        commentId = ctx.params.commentId,\n        res_comments;\n    await userModel.findDataById(postId)\n        .then(result => {\n            res_comments = parseInt(result[0]['comments'])\n            //console.log('res', res_comments)\n            res_comments -= 1\n            //console.log(res_comments)\n        })\n    await userModel.updatePostComment([res_comments, postId])\n    await userModel.deleteComment(commentId)\n        .then(() => {\n            ctx.body = {\n                data: 1\n            }\n        }).catch(() => {\n            ctx.body = {\n                data: 2\n            }\n\n        })\n})\n```\n现在试试删除评论的功能吧\n\n> 删除文章\n\n只有自己发表的文字删除的文字才会显示出来，才能被删除，\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 删除单篇文章\nrouter.post('/posts/:postId/remove', async(ctx, next) => {\n    let postId = ctx.params.postId\n    await userModel.deleteAllPostComment(postId)\n    await userModel.deletePost(postId)\n        .then(() => {\n            ctx.body = {\n                data: 1\n            }\n        }).catch(() => {\n            ctx.body = {\n                data: 2\n            }\n        })\n})\n```\n现在试试删除文章的功能吧\n\n> 编辑文章\n\n修改routers/posts.js \n\n继续在post.js 后面增加\n\n```js\n// 编辑单篇文章页面\nrouter.get('/posts/:postId/edit', async(ctx, next) => {\n    let name = ctx.session.user,\n        postId = ctx.params.postId,\n        res;\n    await userModel.findDataById(postId)\n        .then(result => {\n            res = result[0]\n            //console.log('修改文章', res)\n        })\n    await ctx.render('edit', {\n        session: ctx.session,\n        postsContent: res.md,\n        postsTitle: res.title\n    })\n\n})\n\n// post 编辑单篇文章\nrouter.post('/posts/:postId/edit', async(ctx, next) => {\n    let title = ctx.request.body.title,\n        content = ctx.request.body.content,\n        id = ctx.session.id,\n        postId = ctx.params.postId,\n         // 现在使用markdown不需要单独转义\n        newTitle = title.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        }),\n        newContent = content.replace(/[<\">']/g, (target) => {\n            return {\n                '<': '&lt;',\n                '\"': '&quot;',\n                '>': '&gt;',\n                \"'\": '&#39;'\n            }[target]\n        });\n    await userModel.updatePost([newTitle, md.render(content), content, postId])\n        .then(() => {\n            ctx.body = true\n        }).catch(() => {\n            ctx.body = false\n        })\n})\n\n```\n\n修改views/edit.js \n\n```html\n<%- include(\"header\",{type:''}) %>\n<div class=\"container\">\n\t<form style=\"width:100%\" class=\"form create\" method=\"post\">\n\t\t<div>\n\t\t\t<label>标题：</label>\n\t\t\t<input placeholder=\"标题\" type=\"text\" name=\"title\" value=\"<%- postsTitle %>\">\n\t\t</div>\n\t\t<div>\n\t\t\t<label>内容：</label>\n\t\t\t<textarea name=\"content\" id=\"\" cols=\"42\" rows=\"10\"><%= postsContent %></textarea>\n\t\t</div>\n\t\t<div class=\"submit\">修改</div>\n\t</form>\n</div>\n<script>\n\t$('.submit').click(()=>{\n\t\t$.ajax({\n            url: '',\n            data: $('.form').serialize(),\n            type: \"POST\",\n            cache: false,\n            dataType: 'json',\n            success: function (msg) {\n               if (msg) {\n               \t\tfade('修改成功')\n               \t\tsetTimeout(()=>{\n\t               \t\twindow.location.href=\"/posts\"\n               \t\t},1000)\n               }\n            },\n            error: function () {\n                alert('异常');\n            }\n        })\t\t\n\t})\n</script>\n<% include footer %>\n```\n\n现在试试编辑文字然后修改提交吧\n\n## 结语 \n\n至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的\n\n所有的代码都在 https://github.com/wclimb/Koa2-blog 里面，如果觉得不错就star一下吧。有问题可以提问哟\n下一篇可能是 Node + express + mongoose 或 zepto源码系列\n感谢您的阅读^_^\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"Node-Koa2-Mysql-搭建简易博客","published":1,"updated":"2019-06-06T01:06:26.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9h001b59x3qosgv6h4","content":"<h2 id=\"Koa2-blog\"><a href=\"#Koa2-blog\" class=\"headerlink\" title=\"Koa2-blog\"></a>Koa2-blog</h2><blockquote>\n<p>2018-1-5 更新教程（新增上传头像、新增分页、样式改版、发布文章和评论支持markdown语法）<br>现在GitHub的代码结构有变，优化了蛮多东西</p>\n</blockquote>\n<p>Node+Koa2+Mysql 搭建简易博客</p>\n<h2 id=\"预览地址\"><a href=\"#预览地址\" class=\"headerlink\" title=\"预览地址\"></a>预览地址</h2><p><a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，<br>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a><br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^<br>ps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！</p>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><p><img src=\"http://www.wclimb.site/cdn/blog1.gif\" alt=\"img\"></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>koa <code>v2.3.0</code></li>\n<li>mysql <code>v5.7.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> </p>\n<p>如果你已经配置好node和mysql可以跳过</p>\n<blockquote>\n<p>经常会有人问报错的问题，运行出错大部分是因为不支持async，升级node版本可解决</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本</span><br></pre></td></tr></table></figure>\n<p>下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin</span><br></pre></td></tr></table></figure>\n<p>然后开启mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>输入密码之后创建<code>database</code>(数据库)，<code>nodesql</code>是我们创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create database nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>记住sql语句后面一定要跟<code>;</code>符号，接下来看看我们创建好的数据库列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show databases;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/database.png\" alt=\"img\"></p>\n<p>启用创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ use nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库中的表<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show tables;</span><br></pre></td></tr></table></figure></p>\n<p>显示<code>Empty set (0.00 sec)</code>，因为我们还没有建表，稍后会用代码建表<br>注释：<br>这是后面建表之后的状态<br><img src=\"/img/tables.png\" alt=\"img\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p><img src=\"/img/item.png\" alt=\"img\"></p>\n<ul>\n<li>config 存放默认文件</li>\n<li>lib 存放操作数据库文件</li>\n<li>middlewares 存放判断登录与否文件</li>\n<li>public 存放样式和头像文件</li>\n<li>routes 存放路由文件</li>\n<li>views 存放模板文件</li>\n<li>index 程序主文件</li>\n<li>package.json 包括项目名、作者、依赖等等</li>\n</ul>\n<p>首先我们创建koa2-blog文件夹，然后<code>cd koa2-blog</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着使用 npm init 来创建package.json</span><br></pre></td></tr></table></figure></p>\n<p>接着安装包，安装之前我们使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs markdown-it chai mocha koa-static-cache --save-dev</span><br></pre></td></tr></table></figure>\n<p>各模块用处</p>\n<ol>\n<li><code>koa node</code>框架</li>\n<li><code>koa-bodyparser</code> 表单解析中间件</li>\n<li><code>koa-mysql-session</code>、<code>koa-session-minimal</code> 处理数据库的中间件</li>\n<li><code>koa-router</code> 路由中间件</li>\n<li><code>koa-static</code> 静态资源加载中间件</li>\n<li><code>ejs</code> 模板引擎</li>\n<li><code>md5</code> 密码加密</li>\n<li><code>moment</code> 时间中间件</li>\n<li><code>mysql</code> 数据库</li>\n<li><code>markdown-it</code> markdown语法</li>\n<li><code>koa-views</code> 模板呈现中间件</li>\n<li><code>chai</code> <code>mocha</code> 测试使用</li>\n<li><code>koa-static-cache</code> 文件缓存</li>\n</ol>\n<p>在文件夹里面新建所需文件</p>\n<p><img src=\"/img/view.png\" alt=\"img\"></p>\n<h2 id=\"首先配置config\"><a href=\"#首先配置config\" class=\"headerlink\" title=\"首先配置config\"></a>首先配置config</h2><p>我们新建<code>default.js</code>文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  // 启动端口</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据库配置</span><br><span class=\"line\">  database: &#123;</span><br><span class=\"line\">    DATABASE: &apos;nodesql&apos;,</span><br><span class=\"line\">    USERNAME: &apos;root&apos;,</span><br><span class=\"line\">    PASSWORD: &apos;123456&apos;,</span><br><span class=\"line\">    PORT: &apos;3306&apos;,</span><br><span class=\"line\">    HOST: &apos;localhost&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config</span><br></pre></td></tr></table></figure>\n<p>这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用</p>\n<h2 id=\"配置index-js文件\"><a href=\"#配置index-js文件\" class=\"headerlink\" title=\"配置index.js文件\"></a>配置index.js文件</h2><p><code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa=<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ejs=<span class=\"built_in\">require</span>(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session-minimal'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MysqlStore = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-mysql-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/default.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> views = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-views'</span>)</span><br><span class=\"line\"><span class=\"comment\">// const koaStatic = require('koa-static')</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticCache = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static-cache'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// session存储配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sessionMysqlConfig= &#123;</span><br><span class=\"line\">  user: config.database.USERNAME,</span><br><span class=\"line\">  password: config.database.PASSWORD,</span><br><span class=\"line\">  database: config.database.DATABASE,</span><br><span class=\"line\">  host: config.database.HOST,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置session中间件</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  key: <span class=\"string\">'USER_SID'</span>,</span><br><span class=\"line\">  store: <span class=\"keyword\">new</span> MysqlStore(sessionMysqlConfig)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源加载中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(koaStatic(</span></span><br><span class=\"line\"><span class=\"comment\">//   path.join(__dirname , './public')</span></span><br><span class=\"line\"><span class=\"comment\">// ))</span></span><br><span class=\"line\"><span class=\"comment\">// 缓存</span></span><br><span class=\"line\">app.use(staticCache(path.join(__dirname, <span class=\"string\">'./public'</span>), &#123; <span class=\"attr\">dynamic</span>: <span class=\"literal\">true</span> &#125;, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">365</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(staticCache(path.join(__dirname, <span class=\"string\">'./images'</span>), &#123; <span class=\"attr\">dynamic</span>: <span class=\"literal\">true</span> &#125;, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">365</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置服务端模板渲染引擎中间件</span></span><br><span class=\"line\">app.use(views(path.join(__dirname, <span class=\"string\">'./views'</span>), &#123;</span><br><span class=\"line\">  extension: <span class=\"string\">'ejs'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(bodyParser(&#123;</span><br><span class=\"line\">  formLimit: <span class=\"string\">'1mb'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  路由(我们先注释三个，等后面添加好了再取消注释，因为我们还没有定义路由，稍后会先实现注册)</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/signin.js').routes())</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signup.js'</span>).routes())</span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/posts.js').routes())</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/signout.js').routes())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>koa-session-minimal`</code>koa-mysql-session<code>来进行数据库的操作\n使用</code>koa-static<code>配置静态资源，目录设置为</code>public<code>使用</code>ejs<code>模板引擎\n使用</code>koa-bodyparser<code>来解析提交的表单信息\n使用</code>koa-router<code>做路由\n使用</code>koa-static-cache`来缓存文件<br>之前我们配置了default.js，我们就可以在这里使用了<br>首先引入进来 var config = require(‘./config/default.js’);<br>然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。</p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"配置lib的mysql-js文件\"><a href=\"#配置lib的mysql-js文件\" class=\"headerlink\" title=\"配置lib的mysql.js文件\"></a>配置lib的mysql.js文件</h2><p>关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数<code>query</code>，通过返回promise的方式以便可以方便用<code>.then()</code>来获取数据库返回的数据，然后我们定义了三个表的字段，通过<code>createTable</code>来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。</p>\n<blockquote>\n<p>这里只介绍注册用户insertData，后续的可以自行查看，都差不多</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users set name=?,pass=?,avator=?,moment=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name、pass、avator、moment，就是用户名、密码、头像、注册时间，最后调用<code>query</code>函数把sql语句传进去（之前的写法是<code>&quot;insert into users(name,pass) values(?,?);&quot;</code>,换成现在得更容易理解）</p>\n<p>lib/mysql.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/default.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool  = mysql.createPool(&#123;</span><br><span class=\"line\">  host     : config.database.HOST,</span><br><span class=\"line\">  user     : config.database.USERNAME,</span><br><span class=\"line\">  password : config.database.PASSWORD,</span><br><span class=\"line\">  database : config.database.DATABASE</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql, values </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\"> resolve, reject </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject( err )</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, ( err, rows) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( err ) &#123;</span><br><span class=\"line\">            reject( err )</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve( rows )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let query = function( sql, values ) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// pool.getConnection(function(err, connection) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   // 使用连接</span></span><br><span class=\"line\"><span class=\"comment\">//   connection.query( sql,values, function(err, rows) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 使用连接执行查询</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(rows)</span></span><br><span class=\"line\"><span class=\"comment\">//     connection.release();</span></span><br><span class=\"line\"><span class=\"comment\">//     //连接不再使用，返回到连接池</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> users =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists users(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     pass VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> posts =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists posts(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     title TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     content TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     md TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     uid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     comments VARCHAR(200) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\">     pv VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> comment =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists comment(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     content TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     postid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( sql, [] )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建表</span></span><br><span class=\"line\">createTable(users)</span><br><span class=\"line\">createTable(posts)</span><br><span class=\"line\">createTable(comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users set name=?,pass=?,avator=?,moment=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteUserData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findUserData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发表文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertPost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into posts set name=?,title=?,content=?,md=?,uid=?,moment=?,avator=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新文章评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set comments=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新浏览数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostPv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set pv=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into comment set name=?,content=?,moment=?,postid=?,avator=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章的名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByUser = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts where id=\"<span class=\"subst\">$&#123;id&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过评论id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * FROM comment where postid=\"<span class=\"subst\">$&#123;id&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAllPost = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询分页文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPostByPage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询个人分页文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPostByUserPage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name,page</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts where name=\"<span class=\"subst\">$&#123;name&#125;</span>\" order by id desc limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10 ;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新修改文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`update posts set  title=?,content=?,md=? where id=?`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql,values)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deletePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from posts where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from comment where id=<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除所有评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAllPostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from comment where postid=<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select content from comment where postid in (select id from posts where id=<span class=\"subst\">$&#123;id&#125;</span>)`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动无限加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPageById = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">5</span>&#125;</span>,5;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 评论分页</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentByPage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page,postId</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from comment where postid=<span class=\"subst\">$&#123;postId&#125;</span> order by id desc limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tquery,</span><br><span class=\"line\">\tcreateTable,</span><br><span class=\"line\">\tinsertData,</span><br><span class=\"line\">  \tdeleteUserData,</span><br><span class=\"line\">  \tfindUserData,</span><br><span class=\"line\">\tfindDataByName,</span><br><span class=\"line\">  \tinsertPost,</span><br><span class=\"line\">  \tfindAllPost,</span><br><span class=\"line\">  \tfindPostByPage,</span><br><span class=\"line\">\tfindPostByUserPage,</span><br><span class=\"line\">\tfindDataByUser,</span><br><span class=\"line\">\tfindDataById,</span><br><span class=\"line\">\tinsertComment,</span><br><span class=\"line\">\tfindCommentById,</span><br><span class=\"line\">\tupdatePost,</span><br><span class=\"line\">\tdeletePost,</span><br><span class=\"line\">\tdeleteComment,</span><br><span class=\"line\">\tfindCommentLength,</span><br><span class=\"line\">\tupdatePostComment,</span><br><span class=\"line\">\tdeleteAllPostComment,</span><br><span class=\"line\">\tupdatePostPv,</span><br><span class=\"line\">\tfindPageById,</span><br><span class=\"line\">\tfindCommentByPage</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是我们建的表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">users</th>\n<th style=\"text-align:center\">posts</th>\n<th style=\"text-align:center\">comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pass</td>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">content</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avator</td>\n<td style=\"text-align:center\">content</td>\n<td style=\"text-align:center\">moment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\">md</td>\n<td style=\"text-align:center\">postid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">uid</td>\n<td style=\"text-align:center\">avator</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">pv</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">avator</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>id主键递增</li>\n<li>name: 用户名</li>\n<li>pass：密码</li>\n<li>avator：头像</li>\n<li>title：文章标题</li>\n<li>content：文章内容和评论</li>\n<li>md：markdown语法</li>\n<li>uid：发表文章的用户id </li>\n<li>moment：创建时间</li>\n<li>comments：文章评论数</li>\n<li>pv：文章浏览数</li>\n<li>postid：文章id</li>\n</ul>\n<p>现在感觉有点枯燥，那我们先来实现一下注册吧</p>\n<h2 id=\"实现注册页面\"><a href=\"#实现注册页面\" class=\"headerlink\" title=\"实现注册页面\"></a>实现注册页面</h2><p>routers/singup.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>使用get方式得到’/signup’页面，然后渲染signup模板，这里我们还没有在写signup.ejs</p>\n<p>views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请确认密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>上传头像：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avator\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatorVal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"preview\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"预览头像\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们先安装supervisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i supervisor -g</span><br></pre></td></tr></table></figure>\n<p>supervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p>现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭</p>\n<h2 id=\"完善注册功能\"><a href=\"#完善注册功能\" class=\"headerlink\" title=\"完善注册功能\"></a>完善注册功能</h2><p>首先我们来完善一下样式吧，稍微美化一下</p>\n<p>public/index.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">header</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">span</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_right</span> <span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">5px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.user_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.none_user</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">5px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.posts</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.comment_pv</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.author</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.author</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span> + <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-class\">.title</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.userAvator</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.userMsg</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.userMsg</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.comment_pv</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.edit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.edit</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span> ;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.submit</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_list</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_lists</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_lists</span> + <span class=\"selector-class\">.cmt_lists</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_detail</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* .cmt_content:after &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    content: '#content';</span></span><br><span class=\"line\"><span class=\"comment\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"comment\">    top: 5px;</span></span><br><span class=\"line\"><span class=\"comment\">    right: 5px;</span></span><br><span class=\"line\"><span class=\"comment\">    color: #aaa;</span></span><br><span class=\"line\"><span class=\"comment\">    font-size: 13px;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_time</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#aaa</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7dde4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">resize</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span><span class=\"selector-id\">#spContent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">98%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tips</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.preview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">7px</span>;\t</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7dde4</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:focus</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(51,153,255,.2);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#5cadff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:active</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#5cadff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.create</span> <span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> <span class=\"selector-tag\">form</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">85px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.delete_post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.delete_post</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.disabled</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: not-allowed <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.success</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%);</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.7);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">99999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#F0F0F0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">blockquote</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#6a737d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">0.25em</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: circle;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再把模板引擎的header和footer独立出来</p>\n<p>/views/header.ejs<br>顺便引入index.css和jq<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa2-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.wclimb.site/images/avatar.png\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">txt</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.message'</span>).text(txt)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.message'</span>).animate(&#123;</span></span><br><span class=\"line\">\t\t\t\ttop:0</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.message'</span>).animate(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttop: <span class=\"string\">'-100%'</span></span></span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;,1500)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.signout'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signout\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"GET\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'登出成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1500)\t</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t Hello,<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t欢迎注册登录^_^</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span>登录成功<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"__blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/wclimb/Koa2-blog\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'all'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'my'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= session.user %&gt;\"</span>&gt;</span>我的文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= session.user %&gt;\"</span>&gt;</span>我的文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'create'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"__blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/wclimb/Koa2-blog\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'all'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'signup'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'signin'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>首先我们看到用到了session.user，这个值从哪来呢？请看下面的代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们向模板传了一个session值，session:ctx.session，这个值存取的就是用户的信息，包括用户名、登录之后的id等，session一般是你关闭浏览器就过期了，等于下次打开浏览器的时候就得重新登录了，用if判断他存不存在，就可以知道用户是否需要登录，如果不存在用户，则只显示<code>全部文章</code> <code>注册</code> <code>登录</code> ,如果session.user存在则有登出的按钮。</p>\n<p>在上面我们会看到我用了另外一个if判断，判断type类型，这样做的目的是比如我们登录注册页面，注册页面的导航会高亮，其实就是添加了class：active;<br>之后我们每个ejs文件的头部会这样写<code>&lt;%- include(&quot;header&quot;,{type:&#39;signup&#39;}) %&gt;</code> 登录页面则是<code>&lt;%- include(&quot;header&quot;,{type:&#39;signin&#39;}) %&gt;</code></p>\n<p>/views/footer.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>修改views/signup.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signup</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请确认密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>上传头像：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avator\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatorVal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"preview\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"预览头像\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"built_in\">window</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//console.log(e.keyCode)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.submit'</span>).click()</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'#avator'</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.length != <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">var</span> file = <span class=\"keyword\">this</span>.files[<span class=\"number\">0</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\treader = <span class=\"keyword\">new</span> FileReader();</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (!reader) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">this</span>.value = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(file.size)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (file.size &gt;= <span class=\"number\">1024</span> * <span class=\"number\">1024</span> / <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tfade(<span class=\"string\">\"请上传小于512kb的图片!\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">return</span> </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">this</span>.value = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'form .preview'</span>).attr(<span class=\"string\">'src'</span>, e.target.result)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'form .preview'</span>).fadeIn()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'#avatorVal'</span>).val(e.target.result)</span></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\treader.readAsDataURL(file);</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// console.log($('.form').serialize())</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=name]'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入用户名！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($(<span class=\"string\">'input[name=name]'</span>).val().match(<span class=\"regexp\">/[&lt;'\"&gt;]/g</span>))&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入合法字符！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($(<span class=\"string\">'#avatorVal'</span>).val() == <span class=\"string\">''</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请上传头像！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signup\"</span>,</span></span><br><span class=\"line\">\t\t\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tname: $(<span class=\"string\">'input[name=name]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tpassword: $(<span class=\"string\">'input[name=password]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\trepeatpass: $(<span class=\"string\">'input[name=repeatpass]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tavator: $(<span class=\"string\">'#avatorVal'</span>).val(),</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;           \t\t</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t   $(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t   fade(<span class=\"string\">'用户名存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'请输入重复的密码'</span>)\t               \t\t</span></span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data == <span class=\"number\">3</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'注册成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/signin\"</span>\t  </span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t   \t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>先看我们请求的url地址，是’/signup’，为什么是这个呢？我们看下面这段代码(后面有完整的)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(ctx.request.body)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        pass: ctx.request.body.password,</span><br><span class=\"line\">        repeatpass: ctx.request.body.repeatpass,</span><br><span class=\"line\">        avator: ctx.request.body.avator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们的请求方式是post，地址是<code>/signup</code>所以走了这段代码，之后会获取我们输入的信息，通过ctx.request.body拿到</p>\n<p>这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中</p>\n<p>修改routers/signup.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post 注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(ctx.request.body)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        pass: ctx.request.body.password,</span><br><span class=\"line\">        repeatpass: ctx.request.body.repeatpass,</span><br><span class=\"line\">        avator: ctx.request.body.avator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataByName(user.name)</span><br><span class=\"line\">        .then(<span class=\"keyword\">async</span> (result) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户已经存在'</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理err</span></span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 用户存在</span></span><br><span class=\"line\">                ctx.body = &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;;;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (user.pass !== user.repeatpass || user.pass === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                ctx.body = &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">2</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ctx.session.user=ctx.request.body.name   </span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> base64Data = user.avator.replace(<span class=\"regexp\">/^data:image\\/\\w+;base64,/</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> dataBuffer = <span class=\"keyword\">new</span> Buffer(base64Data, <span class=\"string\">'base64'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> getName = <span class=\"built_in\">Number</span>(<span class=\"built_in\">Math</span>.random().toString().substr(<span class=\"number\">3</span>)).toString(<span class=\"number\">36</span>) + <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">                <span class=\"keyword\">await</span> fs.writeFile(<span class=\"string\">'./public/images/'</span> + getName + <span class=\"string\">'.png'</span>, dataBuffer, err =&gt; &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'头像上传成功'</span>) </span><br><span class=\"line\">                &#125;);            </span><br><span class=\"line\">                <span class=\"keyword\">await</span> userModel.insertData([user.name, md5(user.pass), getName, moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)])</span><br><span class=\"line\">                    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>,res)</span><br><span class=\"line\">                        <span class=\"comment\">//注册成功</span></span><br><span class=\"line\">                        ctx.body = &#123;</span><br><span class=\"line\">                            data: <span class=\"number\">3</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们使用md5实现密码加密，长度是32位的</li>\n<li>使用我们之前说的<code>bodyParse</code>来解析提交的数据，通过<code>ctx.request.body</code>得到</li>\n<li>我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中</li>\n<li>ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后<code>msg.data=1</code>的时候就代表用户存在，<code>msg.data</code>出现在后面的<code>signup.ejs</code>模板ajax请求中</li>\n<li>上传头像之前要新建好文件夹，我们ajax发送的是base64的格式，然后使用fs.writeFile来生成图片</li>\n</ul>\n<p>我们使用ajax来提交数据，方便来做成功错误的处理</p>\n<h2 id=\"模板引擎ejs\"><a href=\"#模板引擎ejs\" class=\"headerlink\" title=\"模板引擎ejs\"></a>模板引擎ejs</h2><p>我们使用的是ejs，语法可以见<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs</a></p>\n<p>之前我们写了这么一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了<br>ejs的常用标签为：</p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ul>\n<p><code>&lt;%= code %&gt;</code>和<code>&lt;%- code %&gt;</code>的区别在于，&lt;%= code %&gt;不管你写什么都会原样输出，比如code为 <code>&lt;strong&gt;hello&lt;/strong&gt;</code>的时候 <code>&lt;%= code %&gt;</code> 会显示<code>&lt;strong&gt;hello&lt;/strong&gt;</code><br>而<code>&lt;%- code %&gt;</code>则显示加粗的hello</p>\n<h2 id=\"实现登录页面\"><a href=\"#实现登录页面\" class=\"headerlink\" title=\"实现登录页面\"></a>实现登录页面</h2><p><img src=\"/img/signin1.png\" alt=\"img\"></p>\n<p>修改 /routers/signin.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure></p>\n<p>修改 /views/signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signin</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signin.js'</span>).routes())</span><br></pre></td></tr></table></figure>\n<p>现在注册一下来看看效果吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/signup1.png\" alt=\"img\"></p>\n<p>我们怎么查看我们注册好的账号和密码呢？打开mysql控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from users;</span><br></pre></td></tr></table></figure>\n<p>这样刚刚我们注册的用户信息都出现了<br><img src=\"/img/users.png\" alt=\"img\"></p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h2><p>修改signin<br>routers/signin.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.request.body.name;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pass = ctx.request.body.password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataByName(name)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = result</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (name === res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>] &amp;&amp; md5(pass) === res[<span class=\"number\">0</span>][<span class=\"string\">'pass'</span>]) &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">                ctx.session.user = res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>]</span><br><span class=\"line\">                ctx.session.id = res[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.session.id'</span>, ctx.session.id)</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'session'</span>, ctx.session)</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户名或密码错误!'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密<br>我们可以看到登录成功返回的结果是<code>result</code> 结果是这样的一个json数组：id：4 name：rrr  pass：…<br>[ RowDataPacket { id: 4, name: ‘rrr’, pass: ‘44f437ced647ec3f40fa0841041871cd’ } ]</p>\n<p>修改views/signin.ejs<br>signin.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signin</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"built_in\">window</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//console.log(e.keyCode)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.submit'</span>).click()</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=name]'</span>).val().trim() == <span class=\"string\">''</span> || $(<span class=\"string\">'input[name=password]'</span>).val().trim() == <span class=\"string\">''</span> ) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入用户名或密码'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signin\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdata: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t    <span class=\"keyword\">if</span> (!msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    fade(<span class=\"string\">'用户名或密码错误'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t    &#125; <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    fade(<span class=\"string\">'登录成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t    <span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t    &#125;,1500)\t               \t</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们增加了ajax请求，在routers/signin.js里，我们设置如果登录失败就返回false，登录成功返回true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.body = false</span><br><span class=\"line\">ctx.body = true</span><br></pre></td></tr></table></figure>\n<p>那我们登录成功后要做跳转，可以看到<code>window.location.href=&quot;/posts&quot;</code>跳转到posts页面</p>\n<h2 id=\"全部文章\"><a href=\"#全部文章\" class=\"headerlink\" title=\"全部文章\"></a>全部文章</h2><p><img src=\"/img/posts1.png\" alt=\"img\"><br>修改routers/posts.js</p>\n<p>posts.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin;</span><br><span class=\"line\"><span class=\"keyword\">const</span> md = <span class=\"built_in\">require</span>(<span class=\"string\">'markdown-it'</span>)();  </span><br><span class=\"line\"><span class=\"comment\">// 重置到文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res,</span><br><span class=\"line\">        postsLength,</span><br><span class=\"line\">        name = <span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>, name)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findDataByUser(name)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByUserPage(name,<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'selfPosts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsPageLength:<span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByPage(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)    </span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsLength: postsLength,</span><br><span class=\"line\">            postsPageLength: <span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 首页分页，每次输出10条</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/page'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> page = ctx.request.body.page;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findPostByPage(page)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 个人文章分页，每次输出10条</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/self/page'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = ctx.request.body</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findPostByUserPage(data.name,data.page)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉</p>\n<p>修改 views/posts.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&quot;header&quot;,&#123;type:&apos;posts&apos;&#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    posts</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% include footer %&gt;</span><br></pre></td></tr></table></figure>\n<p>现在看看登录成功之后的页面吧</p>\n<p>接下来我们实现登出页面</p>\n<h2 id=\"登出页面\"><a href=\"#登出页面\" class=\"headerlink\" title=\"登出页面\"></a>登出页面</h2><p>修改 router/signout.js</p>\n<p>signout.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signout'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.session = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">    ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>把session设置为null即可</p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉，现在把注释的路由全部取消注释就对了</p>\n<p>然后我们看看 <code>views/header.ejs</code></p>\n<p>我们点击登出后的ajax 的提交，成功之后回到posts页面</p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>修改router/posts<br>在后面增加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发表文章页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'create'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post 发表文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = ctx.request.body.title,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        id = ctx.session.id,</span><br><span class=\"line\">        name = ctx.session.user,</span><br><span class=\"line\">        time = moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class=\"line\">        avator,</span><br><span class=\"line\">        <span class=\"comment\">// 现在使用markdown不需要单独转义</span></span><br><span class=\"line\">        newContent = content.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        newTitle = title.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//console.log([name, newTitle, content, id, time])</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findUserData(ctx.session.user)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>])</span><br><span class=\"line\">            avator = res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>]       </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.insertPost([name, newTitle, md.render(content), content, id, time,avator])</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>修改 views/create.ejs</p>\n<p>create.ejs<br><img src=\"/img/create1.png\" alt=\"img\"><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">create</span>'&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入内容\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=title]'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fade(<span class=\"string\">'请输入标题'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(<span class=\"string\">'textarea'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fade(<span class=\"string\">'请输入内容'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;          </span></span><br><span class=\"line\"><span class=\"javascript\">            $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                url: <span class=\"string\">\"/create\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">                type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        fade(<span class=\"string\">'发表成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                            <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">                        &#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">                    &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        fade(<span class=\"string\">'发表失败'</span>)</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\"><span class=\"javascript\">                error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)\t\t\t</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>现在看看能不能发表吧</p>\n<p>即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据</p>\n<p>我们可以看我们之前写的代码 <code>router.get(&#39;/posts&#39;, async(ctx, next) =&gt; {}</code>路由<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByPage(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)    </span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsLength: postsLength,</span><br><span class=\"line\">            postsPageLength: <span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>if前面这部分我们先不用管，后面会说。只需要看else后面的代码我们通过<code>userModel.findPostByPage(1)</code>来获取第一页的数据，然后查找所有文章的数量，最后除以10拿到首页文章的页数，把数据<code>postsPageLength</code>的值传给模板posts.ejs。这样就可以渲染出来了</p>\n<p>修改 views/posts.ejs</p>\n<p>posts.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">all</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= res.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/&lt;%= res.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsPageLength</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前后显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"posts/page\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(msg)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).append(</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;li&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">author</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\\</span>\"'+ <span class=\"attr\">val.name</span> +'\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"/<span class=\"attr\">posts</span>?<span class=\"attr\">author</span>=<span class=\"string\">'+ val.name +'</span> \\\"&gt;</span>author: '+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;评论数：'</span>+ val.comments +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;浏览量：'</span>+ val.pv +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">comment_pv</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;'</span>+ val.moment +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;a href=\\\"/posts/'</span>+ val.id +<span class=\"string\">'\\\"&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">title</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/'+ val.avator +'.png\"</span>&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.title +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">content</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.content +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/a&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/li&gt;'</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看posts页面有没有文章出现了</p>\n<p>我们看到是所第一页的文章数据，初始化的稍后我们是用服务端渲染的数据，使用了分页，每页显示10条数据，然后通过请求页数。<br>下面是服务端请求拿到的第一页的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">await userModel.findPostByUserPage(name,1)</span><br><span class=\"line\">        .then(result =&gt; &#123;</span><br><span class=\"line\">            res = result</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>要拿到别的页面数据的话要向服务器发送post请求，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首页分页，每次输出10条</span><br><span class=\"line\">router.post(&apos;/posts/page&apos;, async(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    let page = ctx.request.body.page;</span><br><span class=\"line\">    await userModel.findPostByPage(page)</span><br><span class=\"line\">            .then(result=&gt;&#123;</span><br><span class=\"line\">                //console.log(result)</span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">            ctx.body = &apos;error&apos;</span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单篇文章页面\"><a href=\"#单篇文章页面\" class=\"headerlink\" title=\"单篇文章页面\"></a>单篇文章页面</h2><p><img src=\"/img/postcontent1.png\" alt=\"img\"><br>但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？</p>\n<p>修改 routers/posts.js</p>\n<p>在posts.js后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单篇文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> comment_res,</span><br><span class=\"line\">        res,</span><br><span class=\"line\">        pageOne,</span><br><span class=\"line\">        res_pv; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//console.log(result )</span></span><br><span class=\"line\">            res = result</span><br><span class=\"line\">            res_pv = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'pv'</span>])</span><br><span class=\"line\">            res_pv += <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"comment\">// console.log(res_pv)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostPv([res_pv, ctx.params.postId])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentByPage(<span class=\"number\">1</span>,ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            pageOne = result</span><br><span class=\"line\">            <span class=\"comment\">//console.log('comment', comment_res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentById(ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            comment_res = result</span><br><span class=\"line\">            <span class=\"comment\">//console.log('comment', comment_res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'sPost'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">        posts: res[<span class=\"number\">0</span>],</span><br><span class=\"line\">        commentLenght: comment_res.length,</span><br><span class=\"line\">        commentPageLenght: <span class=\"built_in\">Math</span>.ceil(comment_res.length/<span class=\"number\">10</span>),</span><br><span class=\"line\">        pageOne:pageOne</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增</p>\n<p>我们通过userModel.findDataById 文章的id来查找数据库<br>我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能<br>最后通过sPost.ejs模板渲染单篇文章</p>\n<p>修改 views/sPost.ejs</p>\n<p>sPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>''&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts spost\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= posts.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= posts.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= posts.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/&lt;%= posts.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">posts.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">posts.name</span>  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= posts['id'] %&gt;/edit\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_post\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/&lt;%= posts.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"spContent\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"82\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>登录之后才可以评论哟<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">commentPageLenght</span> &gt;</span> 0) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_list markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">pageOne.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_lists\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userMsg\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/&lt;%= res['avator'] %&gt;.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_detail\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_time\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">moment</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">res[</span>'<span class=\"attr\">name</span>'])&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_comment\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:delete_comment(&lt;%= res['id'] %&gt;);\"</span>&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>还没有评论，赶快去评论吧！<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> userName = <span class=\"string\">\"&lt;%- session.user %&gt;\"</span></span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">commentPageLenght</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前面显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> _comment = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/commentPage\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">//console.log(msg)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t_comment = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.comment_list'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_lists</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_content</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">userMsg</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">\\</span>\"<span class=\"attr\">..</span>/<span class=\"attr\">images</span>/'+ <span class=\"attr\">val.avator</span> +'<span class=\"attr\">.png</span>\\\" &gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>'+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_detail\"</span>&gt;</span>'+ val.content + '<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_time</span>\\\"&gt;</span>'+ val.moment +'<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_name</span>\\\"&gt;</span>';</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (val.name == userName) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">delete_comment</span>\\\" <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">javascript:delete_comment</span>('+ <span class=\"attr\">val.id</span> +');\\\"&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>'</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.comment_list'</span>).append(_comment)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 删除文章</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.delete_post'</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除文章成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除文章失败'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 评论</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> isAllow = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (!isAllow) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tisAllow = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'textarea'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入评论！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">'/'</span> + location.pathname.split(<span class=\"string\">'/'</span>)[<span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdata:$(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'发表留言成功'</span>)\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\tisAllow = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1500)  \t</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 删除评论</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_comment</span>(<span class=\"params\">id</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/comment/\"</span> + id + <span class=\"string\">\"/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除留言失败'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1500)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\talert(<span class=\"string\">'异常'</span>)</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户自己发表的文章列表，我们之前在 get ‘/posts’ 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了一个处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了<code>ctx.request.querystring</code> 获取到的是：<code>author=xxx</code></p>\n<p>注：这里我们处理了，通过判断 <code>session.user ===  res[&#39;name&#39;]</code> 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签</p>\n<h2 id=\"个人已发表文章列表里面\"><a href=\"#个人已发表文章列表里面\" class=\"headerlink\" title=\"个人已发表文章列表里面\"></a>个人已发表文章列表里面</h2><p>还记得之前在 get ‘/post’ 里面的代码吗？<br>下面的代码就是之前说先不处理的代码片段，不过这个不用再次添加，之前已经添加好了，这段代码处理个人发布的文章列表，我们是通过selfPosts.ejs模板来渲染的，样式和全部文章列表一样，但是牵扯到分页的问题，<br>分页请求的是不同的接口地址</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>, name)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findDataByUser(name)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByUserPage(name,<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'selfPosts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsPageLength:<span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>修改 selfPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">my</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= res.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/&lt;%= res.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsPageLength</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前后显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"posts/self/page\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tname: location.search.slice(<span class=\"number\">1</span>).split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">//console.log(msg)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).append(</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;li&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">author</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\\</span>\"'+ <span class=\"attr\">val.name</span> +'\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"/<span class=\"attr\">posts</span>?<span class=\"attr\">author</span>=<span class=\"string\">'+ val.name +'</span> \\\"&gt;</span>author: '+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;评论数：'</span>+ val.comments +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;浏览量：'</span>+ val.pv +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">comment_pv</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;'</span>+ val.moment +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;a href=\\\"/posts/'</span>+ val.id +<span class=\"string\">'\\\"&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">title</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/' + val.avator + '.png\"</span>&gt;</span>' +</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.title +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">content</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.content +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/a&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/li&gt;'</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑文章、删除文章、评论、删除评论\"><a href=\"#编辑文章、删除文章、评论、删除评论\" class=\"headerlink\" title=\"编辑文章、删除文章、评论、删除评论\"></a>编辑文章、删除文章、评论、删除评论</h2><blockquote>\n<p>评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.session.user,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">        res_comments,</span><br><span class=\"line\">        time = moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class=\"line\">        avator;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findUserData(ctx.session.user)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>])</span><br><span class=\"line\">            avator = res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>]</span><br><span class=\"line\">        &#125;)   </span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.insertComment([name, md.render(content),time, postId,avator])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res_comments = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">            res_comments += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostComment([res_comments, postId])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 评论分页</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/commentPage'</span>, <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId,</span><br><span class=\"line\">        page = ctx.request.body.page;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentByPage(page,postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = res</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此<br>评论我们也做了分页，所以后面会有一个评论的分页的接口，我们已经在sPost.ejs里面写好了ajax请求</p>\n<blockquote>\n<p>删除评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/comment/:commentId/remove'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId,</span><br><span class=\"line\">        commentId = ctx.params.commentId,</span><br><span class=\"line\">        res_comments;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res_comments = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">            <span class=\"comment\">//console.log('res', res_comments)</span></span><br><span class=\"line\">            res_comments -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(res_comments)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostComment([res_comments, postId])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deleteComment(commentId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除评论的功能吧</p>\n<blockquote>\n<p>删除文章</p>\n</blockquote>\n<p>只有自己发表的文字删除的文字才会显示出来，才能被删除，</p>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除单篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/remove'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deleteAllPostComment(postId)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deletePost(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除文章的功能吧</p>\n<blockquote>\n<p>编辑文章</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编辑单篇文章页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/edit'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.session.user,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">        res;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\">//console.log('修改文章', res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'edit'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">        postsContent: res.md,</span><br><span class=\"line\">        postsTitle: res.title</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post 编辑单篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/edit'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = ctx.request.body.title,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        id = ctx.session.id,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">         <span class=\"comment\">// 现在使用markdown不需要单独转义</span></span><br><span class=\"line\">        newTitle = title.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        newContent = content.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePost([newTitle, md.render(content), content, postId])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>修改views/edit.js </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>''&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%- postsTitle %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsContent</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'修改成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在试试编辑文字然后修改提交吧</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的</p>\n<p>所有的代码都在 <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a> 里面，如果觉得不错就star一下吧。有问题可以提问哟<br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^</p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Koa2-blog\"><a href=\"#Koa2-blog\" class=\"headerlink\" title=\"Koa2-blog\"></a>Koa2-blog</h2><blockquote>\n<p>2018-1-5 更新教程（新增上传头像、新增分页、样式改版、发布文章和评论支持markdown语法）<br>现在GitHub的代码结构有变，优化了蛮多东西</p>\n</blockquote>\n<p>Node+Koa2+Mysql 搭建简易博客</p>\n<h2 id=\"预览地址\"><a href=\"#预览地址\" class=\"headerlink\" title=\"预览地址\"></a>预览地址</h2><p><a href=\"http://blog.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://blog.wclimb.site</a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，<br>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a><br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^<br>ps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！</p>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><p><img src=\"http://www.wclimb.site/cdn/blog1.gif\" alt=\"img\"></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>nodejs <code>v8.1.0</code></li>\n<li>koa <code>v2.3.0</code></li>\n<li>mysql <code>v5.7.0</code></li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> </p>\n<p>如果你已经配置好node和mysql可以跳过</p>\n<blockquote>\n<p>经常会有人问报错的问题，运行出错大部分是因为不支持async，升级node版本可解决</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本</span><br></pre></td></tr></table></figure>\n<p>下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到 bin 目录下 比如 cd C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin</span><br></pre></td></tr></table></figure>\n<p>然后开启mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>输入密码之后创建<code>database</code>(数据库)，<code>nodesql</code>是我们创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ create database nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>记住sql语句后面一定要跟<code>;</code>符号，接下来看看我们创建好的数据库列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show databases;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/database.png\" alt=\"img\"></p>\n<p>启用创建的数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ use nodesql;</span><br></pre></td></tr></table></figure></p>\n<p>查看数据库中的表<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ show tables;</span><br></pre></td></tr></table></figure></p>\n<p>显示<code>Empty set (0.00 sec)</code>，因为我们还没有建表，稍后会用代码建表<br>注释：<br>这是后面建表之后的状态<br><img src=\"/img/tables.png\" alt=\"img\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p><img src=\"/img/item.png\" alt=\"img\"></p>\n<ul>\n<li>config 存放默认文件</li>\n<li>lib 存放操作数据库文件</li>\n<li>middlewares 存放判断登录与否文件</li>\n<li>public 存放样式和头像文件</li>\n<li>routes 存放路由文件</li>\n<li>views 存放模板文件</li>\n<li>index 程序主文件</li>\n<li>package.json 包括项目名、作者、依赖等等</li>\n</ul>\n<p>首先我们创建koa2-blog文件夹，然后<code>cd koa2-blog</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着使用 npm init 来创建package.json</span><br></pre></td></tr></table></figure></p>\n<p>接着安装包，安装之前我们使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs markdown-it chai mocha koa-static-cache --save-dev</span><br></pre></td></tr></table></figure>\n<p>各模块用处</p>\n<ol>\n<li><code>koa node</code>框架</li>\n<li><code>koa-bodyparser</code> 表单解析中间件</li>\n<li><code>koa-mysql-session</code>、<code>koa-session-minimal</code> 处理数据库的中间件</li>\n<li><code>koa-router</code> 路由中间件</li>\n<li><code>koa-static</code> 静态资源加载中间件</li>\n<li><code>ejs</code> 模板引擎</li>\n<li><code>md5</code> 密码加密</li>\n<li><code>moment</code> 时间中间件</li>\n<li><code>mysql</code> 数据库</li>\n<li><code>markdown-it</code> markdown语法</li>\n<li><code>koa-views</code> 模板呈现中间件</li>\n<li><code>chai</code> <code>mocha</code> 测试使用</li>\n<li><code>koa-static-cache</code> 文件缓存</li>\n</ol>\n<p>在文件夹里面新建所需文件</p>\n<p><img src=\"/img/view.png\" alt=\"img\"></p>\n<h2 id=\"首先配置config\"><a href=\"#首先配置config\" class=\"headerlink\" title=\"首先配置config\"></a>首先配置config</h2><p>我们新建<code>default.js</code>文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  // 启动端口</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据库配置</span><br><span class=\"line\">  database: &#123;</span><br><span class=\"line\">    DATABASE: &apos;nodesql&apos;,</span><br><span class=\"line\">    USERNAME: &apos;root&apos;,</span><br><span class=\"line\">    PASSWORD: &apos;123456&apos;,</span><br><span class=\"line\">    PORT: &apos;3306&apos;,</span><br><span class=\"line\">    HOST: &apos;localhost&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config</span><br></pre></td></tr></table></figure>\n<p>这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用</p>\n<h2 id=\"配置index-js文件\"><a href=\"#配置index-js文件\" class=\"headerlink\" title=\"配置index.js文件\"></a>配置index.js文件</h2><p><code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa=<span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ejs=<span class=\"built_in\">require</span>(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session-minimal'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MysqlStore = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-mysql-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/default.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router=<span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> views = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-views'</span>)</span><br><span class=\"line\"><span class=\"comment\">// const koaStatic = require('koa-static')</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticCache = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static-cache'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// session存储配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sessionMysqlConfig= &#123;</span><br><span class=\"line\">  user: config.database.USERNAME,</span><br><span class=\"line\">  password: config.database.PASSWORD,</span><br><span class=\"line\">  database: config.database.DATABASE,</span><br><span class=\"line\">  host: config.database.HOST,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置session中间件</span></span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  key: <span class=\"string\">'USER_SID'</span>,</span><br><span class=\"line\">  store: <span class=\"keyword\">new</span> MysqlStore(sessionMysqlConfig)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置静态资源加载中间件</span></span><br><span class=\"line\"><span class=\"comment\">// app.use(koaStatic(</span></span><br><span class=\"line\"><span class=\"comment\">//   path.join(__dirname , './public')</span></span><br><span class=\"line\"><span class=\"comment\">// ))</span></span><br><span class=\"line\"><span class=\"comment\">// 缓存</span></span><br><span class=\"line\">app.use(staticCache(path.join(__dirname, <span class=\"string\">'./public'</span>), &#123; <span class=\"attr\">dynamic</span>: <span class=\"literal\">true</span> &#125;, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">365</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(staticCache(path.join(__dirname, <span class=\"string\">'./images'</span>), &#123; <span class=\"attr\">dynamic</span>: <span class=\"literal\">true</span> &#125;, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">365</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置服务端模板渲染引擎中间件</span></span><br><span class=\"line\">app.use(views(path.join(__dirname, <span class=\"string\">'./views'</span>), &#123;</span><br><span class=\"line\">  extension: <span class=\"string\">'ejs'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(bodyParser(&#123;</span><br><span class=\"line\">  formLimit: <span class=\"string\">'1mb'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  路由(我们先注释三个，等后面添加好了再取消注释，因为我们还没有定义路由，稍后会先实现注册)</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/signin.js').routes())</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signup.js'</span>).routes())</span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/posts.js').routes())</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(require('./routers/signout.js').routes())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>koa-session-minimal`</code>koa-mysql-session<code>来进行数据库的操作\n使用</code>koa-static<code>配置静态资源，目录设置为</code>public<code>使用</code>ejs<code>模板引擎\n使用</code>koa-bodyparser<code>来解析提交的表单信息\n使用</code>koa-router<code>做路由\n使用</code>koa-static-cache`来缓存文件<br>之前我们配置了default.js，我们就可以在这里使用了<br>首先引入进来 var config = require(‘./config/default.js’);<br>然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。</p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"配置lib的mysql-js文件\"><a href=\"#配置lib的mysql-js文件\" class=\"headerlink\" title=\"配置lib的mysql.js文件\"></a>配置lib的mysql.js文件</h2><p>关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数<code>query</code>，通过返回promise的方式以便可以方便用<code>.then()</code>来获取数据库返回的数据，然后我们定义了三个表的字段，通过<code>createTable</code>来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。</p>\n<blockquote>\n<p>这里只介绍注册用户insertData，后续的可以自行查看，都差不多</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users set name=?,pass=?,avator=?,moment=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name、pass、avator、moment，就是用户名、密码、头像、注册时间，最后调用<code>query</code>函数把sql语句传进去（之前的写法是<code>&quot;insert into users(name,pass) values(?,?);&quot;</code>,换成现在得更容易理解）</p>\n<p>lib/mysql.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config/default.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool  = mysql.createPool(&#123;</span><br><span class=\"line\">  host     : config.database.HOST,</span><br><span class=\"line\">  user     : config.database.USERNAME,</span><br><span class=\"line\">  password : config.database.PASSWORD,</span><br><span class=\"line\">  database : config.database.DATABASE</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql, values </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\"> resolve, reject </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject( err )</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, ( err, rows) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( err ) &#123;</span><br><span class=\"line\">            reject( err )</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve( rows )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let query = function( sql, values ) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// pool.getConnection(function(err, connection) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   // 使用连接</span></span><br><span class=\"line\"><span class=\"comment\">//   connection.query( sql,values, function(err, rows) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 使用连接执行查询</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(rows)</span></span><br><span class=\"line\"><span class=\"comment\">//     connection.release();</span></span><br><span class=\"line\"><span class=\"comment\">//     //连接不再使用，返回到连接池</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> users =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists users(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     pass VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> posts =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists posts(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     title TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     content TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     md TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     uid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     comments VARCHAR(200) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\">     pv VARCHAR(40) NOT NULL DEFAULT '0',</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> comment =</span><br><span class=\"line\">    <span class=\"string\">`create table if not exists comment(</span></span><br><span class=\"line\"><span class=\"string\">     id INT NOT NULL AUTO_INCREMENT,</span></span><br><span class=\"line\"><span class=\"string\">     name VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     content TEXT(0) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     moment VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     postid VARCHAR(40) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     avator VARCHAR(100) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">     PRIMARY KEY ( id )</span></span><br><span class=\"line\"><span class=\"string\">    );`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> sql </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( sql, [] )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建表</span></span><br><span class=\"line\">createTable(users)</span><br><span class=\"line\">createTable(posts)</span><br><span class=\"line\">createTable(comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into users set name=?,pass=?,avator=?,moment=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteUserData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findUserData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发表文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertPost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into posts set name=?,title=?,content=?,md=?,uid=?,moment=?,avator=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新文章评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set comments=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新浏览数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePostPv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"update posts set pv=? where id=?\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insertComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">\"insert into comment set name=?,content=?,moment=?,postid=?,avator=?;\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql, value )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from users where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章的名字查找用户</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataByUser = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts where name=\"<span class=\"subst\">$&#123;name&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过文章id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findDataById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts where id=\"<span class=\"subst\">$&#123;id&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过评论id查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentById = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * FROM comment where postid=\"<span class=\"subst\">$&#123;id&#125;</span>\";`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findAllPost = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询分页文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPostByPage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查询个人分页文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPostByUserPage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name,page</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">` select * FROM posts where name=\"<span class=\"subst\">$&#123;name&#125;</span>\" order by id desc limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10 ;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query( _sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 更新修改文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`update posts set  title=?,content=?,md=? where id=?`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql,values)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文章</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deletePost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from posts where id = <span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from comment where id=<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除所有评论</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAllPostComment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`delete from comment where postid=<span class=\"subst\">$&#123;id&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查找评论数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select content from comment where postid in (select id from posts where id=<span class=\"subst\">$&#123;id&#125;</span>)`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 滚动无限加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findPageById = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from posts limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">5</span>&#125;</span>,5;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 评论分页</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> findCommentByPage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page,postId</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _sql = <span class=\"string\">`select * from comment where postid=<span class=\"subst\">$&#123;postId&#125;</span> order by id desc limit <span class=\"subst\">$&#123;(page<span class=\"number\">-1</span>)*<span class=\"number\">10</span>&#125;</span>,10;`</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query(_sql)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tquery,</span><br><span class=\"line\">\tcreateTable,</span><br><span class=\"line\">\tinsertData,</span><br><span class=\"line\">  \tdeleteUserData,</span><br><span class=\"line\">  \tfindUserData,</span><br><span class=\"line\">\tfindDataByName,</span><br><span class=\"line\">  \tinsertPost,</span><br><span class=\"line\">  \tfindAllPost,</span><br><span class=\"line\">  \tfindPostByPage,</span><br><span class=\"line\">\tfindPostByUserPage,</span><br><span class=\"line\">\tfindDataByUser,</span><br><span class=\"line\">\tfindDataById,</span><br><span class=\"line\">\tinsertComment,</span><br><span class=\"line\">\tfindCommentById,</span><br><span class=\"line\">\tupdatePost,</span><br><span class=\"line\">\tdeletePost,</span><br><span class=\"line\">\tdeleteComment,</span><br><span class=\"line\">\tfindCommentLength,</span><br><span class=\"line\">\tupdatePostComment,</span><br><span class=\"line\">\tdeleteAllPostComment,</span><br><span class=\"line\">\tupdatePostPv,</span><br><span class=\"line\">\tfindPageById,</span><br><span class=\"line\">\tfindCommentByPage</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是我们建的表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">users</th>\n<th style=\"text-align:center\">posts</th>\n<th style=\"text-align:center\">comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pass</td>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">content</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avator</td>\n<td style=\"text-align:center\">content</td>\n<td style=\"text-align:center\">moment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\">md</td>\n<td style=\"text-align:center\">postid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">uid</td>\n<td style=\"text-align:center\">avator</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">moment</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">pv</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">avator</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>id主键递增</li>\n<li>name: 用户名</li>\n<li>pass：密码</li>\n<li>avator：头像</li>\n<li>title：文章标题</li>\n<li>content：文章内容和评论</li>\n<li>md：markdown语法</li>\n<li>uid：发表文章的用户id </li>\n<li>moment：创建时间</li>\n<li>comments：文章评论数</li>\n<li>pv：文章浏览数</li>\n<li>postid：文章id</li>\n</ul>\n<p>现在感觉有点枯燥，那我们先来实现一下注册吧</p>\n<h2 id=\"实现注册页面\"><a href=\"#实现注册页面\" class=\"headerlink\" title=\"实现注册页面\"></a>实现注册页面</h2><p>routers/singup.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>使用get方式得到’/signup’页面，然后渲染signup模板，这里我们还没有在写signup.ejs</p>\n<p>views/signup.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请确认密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>上传头像：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avator\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatorVal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"preview\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"预览头像\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们先安装supervisor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm i supervisor -g</span><br></pre></td></tr></table></figure>\n<p>supervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p>现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭</p>\n<h2 id=\"完善注册功能\"><a href=\"#完善注册功能\" class=\"headerlink\" title=\"完善注册功能\"></a>完善注册功能</h2><p>首先我们来完善一下样式吧，稍微美化一下</p>\n<p>public/index.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">header</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">span</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_right</span> <span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">5px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-class\">.user_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.user_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.none_user</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.has_user</span> <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">5px</span> <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.posts</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.comment_pv</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.author</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.author</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> &gt; <span class=\"selector-tag\">li</span> + <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-class\">.title</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.userAvator</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.userMsg</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.userMsg</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.posts</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.comment_pv</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.edit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.spost</span> <span class=\"selector-class\">.edit</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.submit</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span> ;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.submit</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#5FB878</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.comment_list</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_lists</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#f2f2f2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_lists</span> + <span class=\"selector-class\">.cmt_lists</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_detail</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_content</span> <span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* .cmt_content:after &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    content: '#content';</span></span><br><span class=\"line\"><span class=\"comment\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"comment\">    top: 5px;</span></span><br><span class=\"line\"><span class=\"comment\">    right: 5px;</span></span><br><span class=\"line\"><span class=\"comment\">    color: #aaa;</span></span><br><span class=\"line\"><span class=\"comment\">    font-size: 13px;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cmt_name</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cmt_time</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#aaa</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7dde4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">resize</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span><span class=\"selector-id\">#spContent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">98%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tips</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.form</span> <span class=\"selector-tag\">img</span><span class=\"selector-class\">.preview</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">7px</span>;\t</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d7dde4</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:focus</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(51,153,255,.2);</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#5cadff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:active</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:active</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#5cadff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.create</span> <span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.comment_wrap</span> <span class=\"selector-tag\">form</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">85px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.delete_post</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.delete_comment</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.delete_post</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.disabled</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: not-allowed <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ec5051</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.success</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E9FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.message</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%);</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.7);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">99999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">pre</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#F0F0F0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">blockquote</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#6a737d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">0.25em</span> solid <span class=\"number\">#dfe2e5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.markdown</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: circle;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再把模板引擎的header和footer独立出来</p>\n<p>/views/header.ejs<br>顺便引入index.css和jq<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>koa2-blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.wclimb.site/images/avatar.png\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fade</span>(<span class=\"params\">txt</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.message'</span>).text(txt)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.message'</span>).animate(&#123;</span></span><br><span class=\"line\">\t\t\t\ttop:0</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.message'</span>).animate(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttop: <span class=\"string\">'-100%'</span></span></span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;,1500)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$(<span class=\"string\">'.signout'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signout\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"GET\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'登出成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1500)\t</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t Hello,<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">session.user</span> %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t欢迎注册登录^_^</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span>登录成功<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_right\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span>  <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"__blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/wclimb/Koa2-blog\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'all'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'my'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= session.user %&gt;\"</span>&gt;</span>我的文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= session.user %&gt;\"</span>&gt;</span>我的文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'create'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/create\"</span>&gt;</span>发表文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"signout\"</span>&gt;</span>登出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(!<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none_user has_user\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"__blank\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/wclimb/Koa2-blog\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'all'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts\"</span>&gt;</span>全部文章<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'signup'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signup\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">type</span> == <span class=\"string\">'signin'</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;<span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signin\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>首先我们看到用到了session.user，这个值从哪来呢？请看下面的代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们向模板传了一个session值，session:ctx.session，这个值存取的就是用户的信息，包括用户名、登录之后的id等，session一般是你关闭浏览器就过期了，等于下次打开浏览器的时候就得重新登录了，用if判断他存不存在，就可以知道用户是否需要登录，如果不存在用户，则只显示<code>全部文章</code> <code>注册</code> <code>登录</code> ,如果session.user存在则有登出的按钮。</p>\n<p>在上面我们会看到我用了另外一个if判断，判断type类型，这样做的目的是比如我们登录注册页面，注册页面的导航会高亮，其实就是添加了class：active;<br>之后我们每个ejs文件的头部会这样写<code>&lt;%- include(&quot;header&quot;,{type:&#39;signup&#39;}) %&gt;</code> 登录页面则是<code>&lt;%- include(&quot;header&quot;,{type:&#39;signin&#39;}) %&gt;</code></p>\n<p>/views/footer.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>修改views/signup.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signup</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请确认密码\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"repeatpass\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"repeatpass\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>上传头像：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avator\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatorVal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"preview\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"预览头像\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"built_in\">window</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//console.log(e.keyCode)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.submit'</span>).click()</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'#avator'</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.length != <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">var</span> file = <span class=\"keyword\">this</span>.files[<span class=\"number\">0</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\treader = <span class=\"keyword\">new</span> FileReader();</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (!reader) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">this</span>.value = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(file.size)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (file.size &gt;= <span class=\"number\">1024</span> * <span class=\"number\">1024</span> / <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tfade(<span class=\"string\">\"请上传小于512kb的图片!\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">return</span> </span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">this</span>.value = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'form .preview'</span>).attr(<span class=\"string\">'src'</span>, e.target.result)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'form .preview'</span>).fadeIn()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t$(<span class=\"string\">'#avatorVal'</span>).val(e.target.result)</span></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\treader.readAsDataURL(file);</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// console.log($('.form').serialize())</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=name]'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入用户名！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($(<span class=\"string\">'input[name=name]'</span>).val().match(<span class=\"regexp\">/[&lt;'\"&gt;]/g</span>))&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入合法字符！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($(<span class=\"string\">'#avatorVal'</span>).val() == <span class=\"string\">''</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请上传头像！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signup\"</span>,</span></span><br><span class=\"line\">\t\t\t\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tname: $(<span class=\"string\">'input[name=name]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tpassword: $(<span class=\"string\">'input[name=password]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\trepeatpass: $(<span class=\"string\">'input[name=repeatpass]'</span>).val(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tavator: $(<span class=\"string\">'#avatorVal'</span>).val(),</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;           \t\t</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t   $(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t   fade(<span class=\"string\">'用户名存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'请输入重复的密码'</span>)\t               \t\t</span></span><br><span class=\"line\">\t\t\t\t\t   &#125;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(msg.data == <span class=\"number\">3</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'注册成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/signin\"</span>\t  </span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1000)</span><br><span class=\"line\">\t\t\t\t\t   \t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>先看我们请求的url地址，是’/signup’，为什么是这个呢？我们看下面这段代码(后面有完整的)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(ctx.request.body)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        pass: ctx.request.body.password,</span><br><span class=\"line\">        repeatpass: ctx.request.body.repeatpass,</span><br><span class=\"line\">        avator: ctx.request.body.avator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们的请求方式是post，地址是<code>/signup</code>所以走了这段代码，之后会获取我们输入的信息，通过ctx.request.body拿到</p>\n<p>这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中</p>\n<p>修改routers/signup.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注册页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// post 注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/signup'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(ctx.request.body)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">        name: ctx.request.body.name,</span><br><span class=\"line\">        pass: ctx.request.body.password,</span><br><span class=\"line\">        repeatpass: ctx.request.body.repeatpass,</span><br><span class=\"line\">        avator: ctx.request.body.avator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataByName(user.name)</span><br><span class=\"line\">        .then(<span class=\"keyword\">async</span> (result) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户已经存在'</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//处理err</span></span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 用户存在</span></span><br><span class=\"line\">                ctx.body = &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;;;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (user.pass !== user.repeatpass || user.pass === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                ctx.body = &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">2</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ctx.session.user=ctx.request.body.name   </span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> base64Data = user.avator.replace(<span class=\"regexp\">/^data:image\\/\\w+;base64,/</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> dataBuffer = <span class=\"keyword\">new</span> Buffer(base64Data, <span class=\"string\">'base64'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> getName = <span class=\"built_in\">Number</span>(<span class=\"built_in\">Math</span>.random().toString().substr(<span class=\"number\">3</span>)).toString(<span class=\"number\">36</span>) + <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">                <span class=\"keyword\">await</span> fs.writeFile(<span class=\"string\">'./public/images/'</span> + getName + <span class=\"string\">'.png'</span>, dataBuffer, err =&gt; &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'头像上传成功'</span>) </span><br><span class=\"line\">                &#125;);            </span><br><span class=\"line\">                <span class=\"keyword\">await</span> userModel.insertData([user.name, md5(user.pass), getName, moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)])</span><br><span class=\"line\">                    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'注册成功'</span>,res)</span><br><span class=\"line\">                        <span class=\"comment\">//注册成功</span></span><br><span class=\"line\">                        ctx.body = &#123;</span><br><span class=\"line\">                            data: <span class=\"number\">3</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>我们使用md5实现密码加密，长度是32位的</li>\n<li>使用我们之前说的<code>bodyParse</code>来解析提交的数据，通过<code>ctx.request.body</code>得到</li>\n<li>我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中</li>\n<li>ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后<code>msg.data=1</code>的时候就代表用户存在，<code>msg.data</code>出现在后面的<code>signup.ejs</code>模板ajax请求中</li>\n<li>上传头像之前要新建好文件夹，我们ajax发送的是base64的格式，然后使用fs.writeFile来生成图片</li>\n</ul>\n<p>我们使用ajax来提交数据，方便来做成功错误的处理</p>\n<h2 id=\"模板引擎ejs\"><a href=\"#模板引擎ejs\" class=\"headerlink\" title=\"模板引擎ejs\"></a>模板引擎ejs</h2><p>我们使用的是ejs，语法可以见<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs</a></p>\n<p>之前我们写了这么一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/signup'</span>,<span class=\"keyword\">async</span> (ctx,next)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signup'</span>,&#123;</span><br><span class=\"line\">\t\tsession:ctx.session,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了<br>ejs的常用标签为：</p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ul>\n<p><code>&lt;%= code %&gt;</code>和<code>&lt;%- code %&gt;</code>的区别在于，&lt;%= code %&gt;不管你写什么都会原样输出，比如code为 <code>&lt;strong&gt;hello&lt;/strong&gt;</code>的时候 <code>&lt;%= code %&gt;</code> 会显示<code>&lt;strong&gt;hello&lt;/strong&gt;</code><br>而<code>&lt;%- code %&gt;</code>则显示加粗的hello</p>\n<h2 id=\"实现登录页面\"><a href=\"#实现登录页面\" class=\"headerlink\" title=\"实现登录页面\"></a>实现登录页面</h2><p><img src=\"/img/signin1.png\" alt=\"img\"></p>\n<p>修改 /routers/signin.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=router</span><br></pre></td></tr></table></figure></p>\n<p>修改 /views/signin.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signin</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'./routers/signin.js'</span>).routes())</span><br></pre></td></tr></table></figure>\n<p>现在注册一下来看看效果吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisor --harmony index</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/signup1.png\" alt=\"img\"></p>\n<p>我们怎么查看我们注册好的账号和密码呢？打开mysql控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ select * from users;</span><br></pre></td></tr></table></figure>\n<p>这样刚刚我们注册的用户信息都出现了<br><img src=\"/img/users.png\" alt=\"img\"></p>\n<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a></p>\n<h2 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h2><p>修改signin<br>routers/signin.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> checkNotLogin(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'signin'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/signin'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ctx.request.body)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.request.body.name;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pass = ctx.request.body.password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataByName(name)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = result</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (name === res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>] &amp;&amp; md5(pass) === res[<span class=\"number\">0</span>][<span class=\"string\">'pass'</span>]) &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">                ctx.session.user = res[<span class=\"number\">0</span>][<span class=\"string\">'name'</span>]</span><br><span class=\"line\">                ctx.session.id = res[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.session.id'</span>, ctx.session.id)</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'session'</span>, ctx.session)</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'用户名或密码错误!'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密<br>我们可以看到登录成功返回的结果是<code>result</code> 结果是这样的一个json数组：id：4 name：rrr  pass：…<br>[ RowDataPacket { id: 4, name: ‘rrr’, pass: ‘44f437ced647ec3f40fa0841041871cd’ } ]</p>\n<p>修改views/signin.ejs<br>signin.ejs<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">signin</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post \"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"built_in\">window</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">//console.log(e.keyCode)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (e.keyCode == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$(<span class=\"string\">'.submit'</span>).click()</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=name]'</span>).val().trim() == <span class=\"string\">''</span> || $(<span class=\"string\">'input[name=password]'</span>).val().trim() == <span class=\"string\">''</span> ) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入用户名或密码'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'.form'</span>).serialize())</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">\"/signin\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdata: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t    <span class=\"keyword\">if</span> (!msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'input'</span>).val(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    fade(<span class=\"string\">'用户名或密码错误'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t    &#125; <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    fade(<span class=\"string\">'登录成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t    <span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t    &#125;,1500)\t               \t</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们增加了ajax请求，在routers/signin.js里，我们设置如果登录失败就返回false，登录成功返回true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.body = false</span><br><span class=\"line\">ctx.body = true</span><br></pre></td></tr></table></figure>\n<p>那我们登录成功后要做跳转，可以看到<code>window.location.href=&quot;/posts&quot;</code>跳转到posts页面</p>\n<h2 id=\"全部文章\"><a href=\"#全部文章\" class=\"headerlink\" title=\"全部文章\"></a>全部文章</h2><p><img src=\"/img/posts1.png\" alt=\"img\"><br>修改routers/posts.js</p>\n<p>posts.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> userModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mysql.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkNotLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check.js'</span>).checkLogin;</span><br><span class=\"line\"><span class=\"keyword\">const</span> md = <span class=\"built_in\">require</span>(<span class=\"string\">'markdown-it'</span>)();  </span><br><span class=\"line\"><span class=\"comment\">// 重置到文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res,</span><br><span class=\"line\">        postsLength,</span><br><span class=\"line\">        name = <span class=\"built_in\">decodeURIComponent</span>(ctx.request.querystring.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>, name)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findDataByUser(name)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByUserPage(name,<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'selfPosts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsPageLength:<span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByPage(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)    </span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsLength: postsLength,</span><br><span class=\"line\">            postsPageLength: <span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 首页分页，每次输出10条</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/page'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> page = ctx.request.body.page;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findPostByPage(page)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 个人文章分页，每次输出10条</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/self/page'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = ctx.request.body</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findPostByUserPage(data.name,data.page)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉</p>\n<p>修改 views/posts.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&quot;header&quot;,&#123;type:&apos;posts&apos;&#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    posts</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% include footer %&gt;</span><br></pre></td></tr></table></figure>\n<p>现在看看登录成功之后的页面吧</p>\n<p>接下来我们实现登出页面</p>\n<h2 id=\"登出页面\"><a href=\"#登出页面\" class=\"headerlink\" title=\"登出页面\"></a>登出页面</h2><p>修改 router/signout.js</p>\n<p>signout.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/signout'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.session = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">    ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>\n<p>把session设置为null即可</p>\n<p>修改 index.js</p>\n<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉，现在把注释的路由全部取消注释就对了</p>\n<p>然后我们看看 <code>views/header.ejs</code></p>\n<p>我们点击登出后的ajax 的提交，成功之后回到posts页面</p>\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>修改router/posts<br>在后面增加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发表文章页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'create'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post 发表文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = ctx.request.body.title,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        id = ctx.session.id,</span><br><span class=\"line\">        name = ctx.session.user,</span><br><span class=\"line\">        time = moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class=\"line\">        avator,</span><br><span class=\"line\">        <span class=\"comment\">// 现在使用markdown不需要单独转义</span></span><br><span class=\"line\">        newContent = content.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        newTitle = title.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//console.log([name, newTitle, content, id, time])</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findUserData(ctx.session.user)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>])</span><br><span class=\"line\">            avator = res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>]       </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.insertPost([name, newTitle, md.render(content), content, id, time,avator])</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>修改 views/create.ejs</p>\n<p>create.ejs<br><img src=\"/img/create1.png\" alt=\"img\"><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">create</span>'&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入内容\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'input[name=title]'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fade(<span class=\"string\">'请输入标题'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(<span class=\"string\">'textarea'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            fade(<span class=\"string\">'请输入内容'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;          </span></span><br><span class=\"line\"><span class=\"javascript\">            $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                url: <span class=\"string\">\"/create\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">                type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        fade(<span class=\"string\">'发表成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                            <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">                        &#125;,1000)</span><br><span class=\"line\"><span class=\"javascript\">                    &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        fade(<span class=\"string\">'发表失败'</span>)</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\"><span class=\"javascript\">                error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)\t\t\t</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>现在看看能不能发表吧</p>\n<p>即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据</p>\n<p>我们可以看我们之前写的代码 <code>router.get(&#39;/posts&#39;, async(ctx, next) =&gt; {}</code>路由<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByPage(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//console.log(result)</span></span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findAllPost()</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>&#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)    </span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsLength: postsLength,</span><br><span class=\"line\">            postsPageLength: <span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>if前面这部分我们先不用管，后面会说。只需要看else后面的代码我们通过<code>userModel.findPostByPage(1)</code>来获取第一页的数据，然后查找所有文章的数量，最后除以10拿到首页文章的页数，把数据<code>postsPageLength</code>的值传给模板posts.ejs。这样就可以渲染出来了</p>\n<p>修改 views/posts.ejs</p>\n<p>posts.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">all</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= res.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/&lt;%= res.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsPageLength</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前后显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"posts/page\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(msg)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).append(</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;li&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">author</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\\</span>\"'+ <span class=\"attr\">val.name</span> +'\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"/<span class=\"attr\">posts</span>?<span class=\"attr\">author</span>=<span class=\"string\">'+ val.name +'</span> \\\"&gt;</span>author: '+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;评论数：'</span>+ val.comments +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;浏览量：'</span>+ val.pv +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">comment_pv</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;'</span>+ val.moment +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;a href=\\\"/posts/'</span>+ val.id +<span class=\"string\">'\\\"&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">title</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/'+ val.avator +'.png\"</span>&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.title +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">content</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.content +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/a&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/li&gt;'</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在看看posts页面有没有文章出现了</p>\n<p>我们看到是所第一页的文章数据，初始化的稍后我们是用服务端渲染的数据，使用了分页，每页显示10条数据，然后通过请求页数。<br>下面是服务端请求拿到的第一页的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">await userModel.findPostByUserPage(name,1)</span><br><span class=\"line\">        .then(result =&gt; &#123;</span><br><span class=\"line\">            res = result</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>要拿到别的页面数据的话要向服务器发送post请求，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首页分页，每次输出10条</span><br><span class=\"line\">router.post(&apos;/posts/page&apos;, async(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    let page = ctx.request.body.page;</span><br><span class=\"line\">    await userModel.findPostByPage(page)</span><br><span class=\"line\">            .then(result=&gt;&#123;</span><br><span class=\"line\">                //console.log(result)</span><br><span class=\"line\">                ctx.body = result   </span><br><span class=\"line\">            &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">            ctx.body = &apos;error&apos;</span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"单篇文章页面\"><a href=\"#单篇文章页面\" class=\"headerlink\" title=\"单篇文章页面\"></a>单篇文章页面</h2><p><img src=\"/img/postcontent1.png\" alt=\"img\"><br>但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？</p>\n<p>修改 routers/posts.js</p>\n<p>在posts.js后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单篇文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> comment_res,</span><br><span class=\"line\">        res,</span><br><span class=\"line\">        pageOne,</span><br><span class=\"line\">        res_pv; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//console.log(result )</span></span><br><span class=\"line\">            res = result</span><br><span class=\"line\">            res_pv = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'pv'</span>])</span><br><span class=\"line\">            res_pv += <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"comment\">// console.log(res_pv)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostPv([res_pv, ctx.params.postId])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentByPage(<span class=\"number\">1</span>,ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            pageOne = result</span><br><span class=\"line\">            <span class=\"comment\">//console.log('comment', comment_res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentById(ctx.params.postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            comment_res = result</span><br><span class=\"line\">            <span class=\"comment\">//console.log('comment', comment_res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'sPost'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">        posts: res[<span class=\"number\">0</span>],</span><br><span class=\"line\">        commentLenght: comment_res.length,</span><br><span class=\"line\">        commentPageLenght: <span class=\"built_in\">Math</span>.ceil(comment_res.length/<span class=\"number\">10</span>),</span><br><span class=\"line\">        pageOne:pageOne</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增</p>\n<p>我们通过userModel.findDataById 文章的id来查找数据库<br>我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能<br>最后通过sPost.ejs模板渲染单篇文章</p>\n<p>修改 views/sPost.ejs</p>\n<p>sPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>''&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts spost\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= posts.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= posts.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= posts.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/&lt;%= posts.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">posts.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">posts.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">posts.name</span>  )&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= posts['id'] %&gt;/edit\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_post\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session.user</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/&lt;%= posts.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"spContent\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"82\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>发表留言<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>登录之后才可以评论哟<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">commentPageLenght</span> &gt;</span> 0) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_list markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">pageOne.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_lists\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userMsg\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../images/&lt;%= res['avator'] %&gt;.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">name</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_detail\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res</span>['<span class=\"attr\">content</span>'] %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_time\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res</span>['<span class=\"attr\">moment</span>'] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_name\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">session</span> &amp;&amp; <span class=\"attr\">session.user</span> ===  <span class=\"string\">res[</span>'<span class=\"attr\">name</span>'])&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"delete_comment\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:delete_comment(&lt;%= res['id'] %&gt;);\"</span>&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span>&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tips\"</span>&gt;</span>还没有评论，赶快去评论吧！<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> userName = <span class=\"string\">\"&lt;%- session.user %&gt;\"</span></span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">commentPageLenght</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前面显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> _comment = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/commentPage\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">//console.log(msg)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t_comment = <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.comment_list'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_lists</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_content</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">userMsg</span>\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">\\</span>\"<span class=\"attr\">..</span>/<span class=\"attr\">images</span>/'+ <span class=\"attr\">val.avator</span> +'<span class=\"attr\">.png</span>\\\" &gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>'+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cmt_detail\"</span>&gt;</span>'+ val.content + '<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_time</span>\\\"&gt;</span>'+ val.moment +'<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">cmt_name</span>\\\"&gt;</span>';</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (val.name == userName) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">delete_comment</span>\\\" <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">javascript:delete_comment</span>('+ <span class=\"attr\">val.id</span> +');\\\"&gt;</span> 删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>'</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t_comment += '<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.comment_list'</span>).append(_comment)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 删除文章</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.delete_post'</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除文章成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除文章失败'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 评论</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> isAllow = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (!isAllow) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tisAllow = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'textarea'</span>).val().trim() == <span class=\"string\">''</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tfade(<span class=\"string\">'请输入评论！'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\turl: <span class=\"string\">'/'</span> + location.pathname.split(<span class=\"string\">'/'</span>)[<span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdata:$(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\ttype: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tdataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tfade(<span class=\"string\">'发表留言成功'</span>)\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\tisAllow = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,1500)  \t</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// 删除评论</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_comment</span>(<span class=\"params\">id</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"&lt;%= posts.id %&gt;/comment/\"</span> + id + <span class=\"string\">\"/remove\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg.data == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除留言成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1000)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.data == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tfade(<span class=\"string\">'删除留言失败'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"built_in\">window</span>.location.reload()</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;, 1500)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\talert(<span class=\"string\">'异常'</span>)</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户自己发表的文章列表，我们之前在 get ‘/posts’ 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了一个处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了<code>ctx.request.querystring</code> 获取到的是：<code>author=xxx</code></p>\n<p>注：这里我们处理了，通过判断 <code>session.user ===  res[&#39;name&#39;]</code> 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签</p>\n<h2 id=\"个人已发表文章列表里面\"><a href=\"#个人已发表文章列表里面\" class=\"headerlink\" title=\"个人已发表文章列表里面\"></a>个人已发表文章列表里面</h2><p>还记得之前在 get ‘/post’ 里面的代码吗？<br>下面的代码就是之前说先不处理的代码片段，不过这个不用再次添加，之前已经添加好了，这段代码处理个人发布的文章列表，我们是通过selfPosts.ejs模板来渲染的，样式和全部文章列表一样，但是牵扯到分页的问题，<br>分页请求的是不同的接口地址</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ctx.request.querystring) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ctx.request.querystring'</span>, name)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findDataByUser(name)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                postsLength = result.length</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> userModel.findPostByUserPage(name,<span class=\"number\">1</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                res = result</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'selfPosts'</span>, &#123;</span><br><span class=\"line\">            session: ctx.session,</span><br><span class=\"line\">            posts: res,</span><br><span class=\"line\">            postsPageLength:<span class=\"built_in\">Math</span>.ceil(postsLength / <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>修改 selfPost.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>'<span class=\"attr\">my</span>'&#125;) %&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">posts.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">res</span>)&#123; %&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"author\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= res.name %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts?author=&lt;%= res.name %&gt; \"</span>&gt;</span>author: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>评论数：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.comments</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>浏览量：<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.pv</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"comment_pv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.moment</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/posts/&lt;%= res.id %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/&lt;%= res.avator %&gt;.png\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">res.title</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content markdown\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">res.content</span> %&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top: 30px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.wclimb.site/pagination/pagination.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\tpagination(&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tselector: <span class=\"string\">'#page'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ttotalPage: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsPageLength</span> %&gt;</span>,</span></span></span><br><span class=\"line\">\t\t\tcurrentPage: 1,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\tprev: <span class=\"string\">'上一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tnext: <span class=\"string\">'下一页'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tfirst: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlast: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tshowTotalPage: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tcount: <span class=\"number\">2</span><span class=\"comment\">//当前页前后显示的数量</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 当前页</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\turl: <span class=\"string\">\"posts/self/page\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttype: <span class=\"string\">'POST'</span>,</span></span><br><span class=\"line\">\t\t\t\tdata:&#123;</span><br><span class=\"line\">\t\t\t\t\tpage: val,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\tname: location.search.slice(<span class=\"number\">1</span>).split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"comment\">//console.log(msg)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"keyword\">if</span> (msg != <span class=\"string\">'error'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).html(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t$.each(msg,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,val</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t<span class=\"comment\">//console.log(val.content)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t$(<span class=\"string\">'.posts'</span>).append(</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;li&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">author</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\\</span>\"'+ <span class=\"attr\">val.name</span> +'\\\"&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\\</span>\"/<span class=\"attr\">posts</span>?<span class=\"attr\">author</span>=<span class=\"string\">'+ val.name +'</span> \\\"&gt;</span>author: '+ val.name +'<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;评论数：'</span>+ val.comments +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;浏览量：'</span>+ val.pv +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">comment_pv</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;span&gt;'</span>+ val.moment +<span class=\"string\">'&lt;/span&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;a href=\\\"/posts/'</span>+ val.id +<span class=\"string\">'\\\"&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">title</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userAvator\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/' + val.avator + '.png\"</span>&gt;</span>' +</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.title +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t\t\t\t\t\t'<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\\</span>\"<span class=\"attr\">content</span>\\\"&gt;</span>'+</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t val.content +</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/div&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/a&gt;'</span>+</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t<span class=\"string\">'&lt;/li&gt;'</span></span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;)</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\talert(<span class=\"string\">'分页不存在'</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑文章、删除文章、评论、删除评论\"><a href=\"#编辑文章、删除文章、评论、删除评论\" class=\"headerlink\" title=\"编辑文章、删除文章、评论、删除评论\"></a>编辑文章、删除文章、评论、删除评论</h2><blockquote>\n<p>评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发表评论</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.session.user,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">        res_comments,</span><br><span class=\"line\">        time = moment().format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class=\"line\">        avator;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findUserData(ctx.session.user)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>])</span><br><span class=\"line\">            avator = res[<span class=\"number\">0</span>][<span class=\"string\">'avator'</span>]</span><br><span class=\"line\">        &#125;)   </span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.insertComment([name, md.render(content),time, postId,avator])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res_comments = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">            res_comments += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostComment([res_comments, postId])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 评论分页</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/commentPage'</span>, <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId,</span><br><span class=\"line\">        page = ctx.request.body.page;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findCommentByPage(page,postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = res</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            ctx.body = <span class=\"string\">'error'</span></span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此<br>评论我们也做了分页，所以后面会有一个评论的分页的接口，我们已经在sPost.ejs里面写好了ajax请求</p>\n<blockquote>\n<p>删除评论</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除评论</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/comment/:commentId/remove'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId,</span><br><span class=\"line\">        commentId = ctx.params.commentId,</span><br><span class=\"line\">        res_comments;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res_comments = <span class=\"built_in\">parseInt</span>(result[<span class=\"number\">0</span>][<span class=\"string\">'comments'</span>])</span><br><span class=\"line\">            <span class=\"comment\">//console.log('res', res_comments)</span></span><br><span class=\"line\">            res_comments -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">//console.log(res_comments)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePostComment([res_comments, postId])</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deleteComment(commentId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除评论的功能吧</p>\n<blockquote>\n<p>删除文章</p>\n</blockquote>\n<p>只有自己发表的文字删除的文字才会显示出来，才能被删除，</p>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除单篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/remove'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> postId = ctx.params.postId</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deleteAllPostComment(postId)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.deletePost(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = &#123;</span><br><span class=\"line\">                data: <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在试试删除文章的功能吧</p>\n<blockquote>\n<p>编辑文章</p>\n</blockquote>\n<p>修改routers/posts.js </p>\n<p>继续在post.js 后面增加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编辑单篇文章页面</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/posts/:postId/edit'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = ctx.session.user,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">        res;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.findDataById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">            res = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\">//console.log('修改文章', res)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'edit'</span>, &#123;</span><br><span class=\"line\">        session: ctx.session,</span><br><span class=\"line\">        postsContent: res.md,</span><br><span class=\"line\">        postsTitle: res.title</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post 编辑单篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/posts/:postId/edit'</span>, <span class=\"keyword\">async</span>(ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title = ctx.request.body.title,</span><br><span class=\"line\">        content = ctx.request.body.content,</span><br><span class=\"line\">        id = ctx.session.id,</span><br><span class=\"line\">        postId = ctx.params.postId,</span><br><span class=\"line\">         <span class=\"comment\">// 现在使用markdown不需要单独转义</span></span><br><span class=\"line\">        newTitle = title.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        newContent = content.replace(<span class=\"regexp\">/[&lt;\"&gt;']/g</span>, (target) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#39;'</span></span><br><span class=\"line\">            &#125;[target]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> userModel.updatePost([newTitle, md.render(content), content, postId])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            ctx.body = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>修改views/edit.js </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">include</span>(\"<span class=\"attr\">header</span>\",&#123;<span class=\"attr\">type:</span>''&#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form create\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>标题：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"标题\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%- postsTitle %&gt;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>内容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"42\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">postsContent</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t$(<span class=\"string\">'.submit'</span>).click(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            data: $(<span class=\"string\">'.form'</span>).serialize(),</span></span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">\"POST\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            cache: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">if</span> (msg) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tfade(<span class=\"string\">'修改成功'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">               \t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t               \t\t<span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"/posts\"</span></span></span><br><span class=\"line\">               \t\t&#125;,1000)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"string\">'异常'</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)\t\t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">footer</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在试试编辑文字然后修改提交吧</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的</p>\n<p>所有的代码都在 <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/Koa2-blog</a> 里面，如果觉得不错就star一下吧。有问题可以提问哟<br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^</p>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"webpack系列之初探","date":"2019-06-06T01:09:42.000Z","_content":"\n## 写在前面\n\n相信`webpack`这个名称对于前端的同学来说并不陌生，只要你在用`vue`、`react`等等之类的框架，就得天天和它打交道。但是大部分人都只是直接怼一个`vue-cli`脚手架生成一个项目，运行起来就开始一顿写，完全不会去看这个项目的其他相关的东西，今天开始，咱们就来说说这个又爱又恨的`webpack`\n\n## 问题\n\n使用wepack的时候经常会出现下面这些疑问\n\n1. <font color=red>你webpack只能打包单页面的文件吗？</font>\n2. <font color=red>WTF，我包怎么这么大，加载太慢了</font>\n3. <font color=red>我打包速度怎么这么慢，什么破玩意？</font>\n...\n\n## 为什么要使用webpack\n\n哈，你问我为什么要用？因为大家都在用啊😃😃。开个玩笑，前端发展到今天，新技术新思想新框架爆发式增长，当前的浏览器环境跑不赢啊，你说你写个ES6/7在浏览器环境都能跑起来？扯淡的。这个时候`babel`就出现了，你跑不起来是吧，那我转成`ES5`你总该跑起来吧~，那`babel`我还是不能直接用啊，肯定得借助工具编译呀，所以我们需要webpack去做这件事情了。<font color=red>这个时候有人就要站出来说了，我gulp不服，我也能做，我就不用`webpack`</font>。你这么说我就要跟你唠唠了，现在我们先来比较一下`webpack`和`gulp`。\n\n`gulp` 是 `task runner`，`Webpack` 是 `module bundler`\n\nwebpack的优势在模块化，`gulp`除了模块化方面都很不错。但是前端发展至今，模块化真的很重要，`CMD`、`AMD`就是模块化的产物。\n简单来说，如果你当前项目需要模块化编程，那就选`webpack`，如果是处理其他事情，比如把图片拼接成雪碧图或者压缩，那么`gulp`是最擅长的\n\n感兴趣的可以看看这个回答 [gulp 有哪些功能是 webpack 不能替代的？](https://www.zhihu.com/question/45536395/answer/164361274)\n\n## 安装\n\n这里可以参考[webpack官网](https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85)\n开发环境 `webpack: 4.34.0`\n```\n> mkdir webpack && cd webpack\n> npm init -y\n> npm install webpack webpack-cli -D\n```\n\n## 入口（entry）\n\n每个`webpack`都会有一个`entry`，就是入口的意思，指示 `webpack` 应该使用哪个模块，来作为构建其内部依赖图的开始。\n\n注意点：\n1. 入口可以有多个，如果是单页面只需要一个入口，多页面可以设置多个入口\n2. 入口的文件必须是`.js`文件，因为`webpack`只认识`js`（不完全对，其实任意文件都可以，只是`webpack`会把它当做`js`来处理）\n\n举个🌰\n<!-- more -->\n我们新建`webpack.config.js`和新建`src`文件夹，并且文件夹下新建`index.js`文件\n目录如下\n\n```\n- webpack/\n-   src/\n-     index.js\n-   webpack.config.js\n```\n\nwebpack.config.js\n```js\nmodule.exports = {\n  entry: './src/index.js'\n};\n```\n\n我们上面指定`webpack`的入口文件为`index.js`文件，这是总入口\n\n## 出口（output）\n\n有入口当然就会有出口了，就是你导出的文件\n\nwebpack.config.js\n```js\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n};\n```\n\n上述`entry`已经介绍过了，我们来看看`output`，他有文件导出的路径（path）和导出的文件名（filename）\n\n关于`filename`这里需要注意的地方有：\n1. 出口的文件名可以定制化，当前如果你是单页面的话，简单的可以写死一个filename，就如上面的`bundle.js`一样\n2. 你也可以这么写，使用入口名称的名称：`filename: '[name].bundle.js'`,当然还需要改一下entry，把它改成以下形式，name就会变成 -> app\n\n```js\nmodule.exports = {\n  entry: {\n    app: './src/index.js'\n  },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n};\n```\n\n现在我们来试一下webapck打包\n\n## 小试牛刀\n\n第一步，新建一个文件夹webpack-demo\n```\n> mkdir webpack-demo && cd webpack-demo\n> npm init -y\n> cnpm install webpack webpack-cli -D\n```\n第二步，新建src/index.js文件和webpack.config.js文件\n\nwebpack.config.js\n\n```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\n\nindex.js\n```js\ndocument.write('hello webpack');\n```\n\n第三步，打包\n命令行输入\n```\n> npx webpack --config webpack.config.js\n```\n然后控制台就会输出\n```\nHash: 348dca17387cd3f29cef\nVersion: webpack 4.33.0\nTime: 227ms\nBuilt at: 2019-06-08 15:24:07\n    Asset       Size  Chunks             Chunk Names\nbundle.js  961 bytes       0  [emitted]  main\nEntrypoint main = bundle.js\n[0] ./src/index.js 33 bytes {0} [built]\n```\n看到这个信息证明你已经大功告成了，去看看dist/文件夹下是不是有打包好的js文件\n最后面你会看到有黄色的警告，说mode没有设置，待会再讲\n\n<font color=red>这个时候你就会想，我每次生成的文件都叫bundle.js，我都区分不开，也不好做缓存，这个时候你就需要配置一下filename了</font>\n\n我们把webpack.config.js改成以下\n\n```js\nconst path = require('path');\nmodule.exports = {\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\n然后执行 \n```\n> npx webpack --config webpack.config.js\n```\n\n这个时候dist/文件夹下就会多出个类似`app.32434c7cc602e3049dac.js`的文件，而且如果你反复执行打包命令，你发现app.32434c7cc602e3049dac.js文件名都没有改变，这是为什么呢？\n因为webpack会判断你的文件是否有更改而来觉得文件夹hash的变更，现在你可以尝试修改一下index.js文件之后打包的效果就知道了。\n\n\n## 模式（mode ）\n\n上面说到每次打包的时候都会报警告，告诉我们没有设置mode，现在我们来说说mode\n首先mode有两个值，分别是development和production，意思就是，当前项目打包的开发环境还是生成环境的代码\n如果你设置了mode: 'development'，在项目里你可以使用 process.env.NODE_ENV 来获取当前的环境的值\n你可以尝试把webpack.config.js改成以下，然后在index.js里把这个值打印出来，运行一下效果\n\nwebpack.config.js\n```js\nconst path = require('path');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\nindex.js\n```js\ndocument.write(`hello webpack，this is ${process.env.NODE_ENV}`); \n```\n现在我们只有js文件，你可以先在根目录新建一个index.html文件，把js引入在浏览器环境执行(或者直接在浏览器控制台执行js)，你会看到浏览器显示 -> hello webpack，this is development\n你分别运行之后会发现他们的效果是不一样的，一个是被压缩的，一个没有被压缩\n\n<font color=red>这个时候你就会想了，怎么这么麻烦，我打包还得自己去新建html文件引入js然后运行或者去执行js文件，能不能让他自动运行跑起来？</font>\n当然是可以的，下面我们来说说plugins\n\n## 插件（plugins）\n\n插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！（官网的解释）\n插件怎么说呢？不好解释它，你可以理解为处理工具，插件目的在于解决 `loader`(这个等会再讲，现在用不上) 无法实现的其他事\n\n插件怎么配置？就像下面这样，当然不是随便找的插件，我们会用到下面配置的插件\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: 'index.html'})\n  ]\n};\n```\n我们先在根目录新建一个index.html文件，之前不是说运行项目很麻烦嘛？现在教你简单的方法\n然后我们用到了html-webpack-plugin，需要先安装他才能使用\n```\n> cnpm i html-webpack-plugin -D\n```\n下一步打包运行项目\n```\n> npx webpack --config webpack.config.js\n```\n运行结果：\n```\nHash: bea857ae13cad8af6e66\nVersion: webpack 4.33.0\nTime: 274ms\nBuilt at: 2019-06-08 16:00:33\n                      Asset      Size  Chunks             Chunk Names\napp.bea857ae13cad8af6e66.js  3.83 KiB     app  [emitted]  app\n                 index.html  74 bytes          [emitted]  \nEntrypoint app = app.bea857ae13cad8af6e66.js\n[./src/index.js] 65 bytes {app} [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [./node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./index.html] 209 bytes {0} [built]\n    [./node_modules/_webpack@4.33.0@webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes {0} [built]\n    [./node_modules/_webpack@4.33.0@webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes {0} [built]\n        + 1 hidden module\n```\n去查看dist文件夹下，你会发现多出了两个文件，js和index.html文件，这就是插件的功劳\nhtml-webpack-plugin这个插件需要指定是那个html模板，然后最后打包的时候就是以这个模板为主，把打包好的js文件放到这个index.html里面，你可以查看html文件里的内容：\n\nindex.html\n```html\n<script type=\"text/javascript\" src=\"app.1b0b2001b0579faec32d.js\"></script>\n```\n<font color=red>这个时候你会发现，我靠，我dist文件怎么这么多啊，怎么办啊？别急，我们再来用一个插件解决这个问题</font>\n\n安装插件clean-webpack-plugin\n```\n> cnpm i clean-webpack-plugin -D\n```\n然后配置文件去添加插件\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({template: 'index.html'})\n  ]\n};\n```\n\n然后你再去看看dist文件夹里的文件，是不是只有两个文件了？这个插件的作用是，先把dist文件夹里的文件先清空然后再把打包好的文件放入dist。\n\n<font color=red>那么你还会有问题，这还是麻烦啊，我不能只运行命令行，让重新自己打开浏览器运行我打包的项目吗？</font>当然可以啊\n\n首先安装 webpack-dev-server\n```\n> cnpm i webpack-dev-server -D\n```\n然后\n```\n> webpack-dev-server --open --config webpack.config.js\n```\n你会发现重新自动打开了浏览器，页面显示 hello webpack，this is development。是不是很简单？\n你现在可以去修改index.js然后保存文件，去浏览器看看是不是自动刷新了你刚刚更改的内容呢？\n\n<font color=red>现在你可能还会有问题，我去，这太简单了吧，我要用css和图片怎么办？js不能导入css文件啊！我怎么跟vue一样在自己的ip访问项目啊？现在肯定是问题一大堆</font>\n\n## loader\n\nloader 用于对模块的源代码进行转换。loader 可以使你在 import 或\"加载\"模块时预处理文件。比如可以把typescript转换成JavaScript，less转成css\n现在我们就来解决你上一章节末的问题，教你配置简单的loader，来加载css或者图片\n首先我们先安装css-loader/style-loader，来加载解析css文件\n```\n> cnpm i css-loader style-loader -D\n```\n下一步在src文件夹下新建test.css文件，再在index.js导入\ntest.css\n```css\nbody {\n  background: #ccc;\n}\n```\n\nindex.js\n```js\nimport './test.css';\ndocument.write(`hello webpack，this is ${process.env.NODE_ENV}，test`);\n```\n如果你直接运行会发现控制台报错了 \n```\nERROR in ./src/test.css 1:5\nModule parse failed: Unexpected token (1:5)\nYou may need an appropriate loader to handle this file type.\n> body {\n|   background: #ccc;\n| }\n @ ./src/index.js 1:0-20\n```\n这个时候loader登场了，我们修改配置文件\nwebpack.config.js\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n  ],\n  module: {\n    rules:[\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ]\n  }\n};\n```\n然后运行命令行\n```\n> webpack-dev-server --open --config webpack.config.js\n```\n你会发现页面背景颜色变了\n\n现在我们来说说配置：\nmodule.rules 允许你在 webpack 配置中指定多个 loader，上面我们规定正则匹配css文件，然后如果匹配到了，则使用style-laoder和css-loader去处理css文件，css-laoder负责解析css文件，style-loader负责把css文件放到页面中去，你打开调试可以看到head里被插入了style样式标签，当前如果你想解析例如xx.ts文件，则可以在数组里面新增：\n```js\n {\n  test: /\\.ts$/,\n  use: 'ts-loader',\n},\n```\n\n下面来看看怎么加载图片资源，还是跟上述原一样，图片也是有类型的，我们首先得匹配文件后缀，然后去用loader去解析他们，这里我们需要用到 url-loader file-loader\n按照惯例先安装\n```\n> cnpm i url-loader file-loader -D\n```\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules:[\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 6000,\n          name: 'img/[name].[hash:7].[ext]',\n        },\n      }\n    ]\n  }\n};\n```\n下一步就是往项目里增加图片了\n我们修改test.css文件\ntest.css\n```\nbody {\n  background: url(img.jpg);\n}\n```\n\n浏览器就显示的全是刚刚设置的重复图片了\n\n** 这里你又会问了，不对，你这里只用到了url-loader，file-loader不是多余的吗？** 不是的，你可以看看options，有一个limit参数，规定如果超过了6000bytes大小的文件会交给file-loader处理，因为如果图片小于这个数值，url-loader会把图片转成base64格式的图片加载，如果超过就自己不处理了，所以他们两者是有相依性的\n\n\n## 使用npm脚本\n\n上面基本上都是使用一大段的命令行来执行项目，现在我们来简化一下\n修改package.json\n```js\n\"scripts\": {\n  \"dev\": \"webpack-dev-server --open --config webpack.config.js\",\n  \"build\": \"webpack --config webpack.config.js\"\n},\n```\n命令行运行项目\n```\n> npm run dev\n> npm run build\n```\n\n## devServer\n\n在开发中你可能有很多需求，比如怎么通过ip访问项目，怎么把控制台信息输出的精简点，怎么修改端口等等？这个时候就需要用到devServer的配置了\n我们修改webpack.config.js,增加以下：\n\n```js\nmodule.exports = {\n  ...\n  devServer: {\n    contentBase: './dist', // 告诉服务器从哪里提供内容\n    host: '0.0.0.0', // 指定使用一个 host。默认是 localhost\n    useLocalIp: true, // 是否使用本地ip\n    open: true, // 是否自动打开浏览器\n    port: 8080, // 端口号\n    noInfo: true, // 显示的 webpack 包(bundle)信息」的消息将被隐藏\n  },\n}\n```\n是的，你现在可以不用在命令行里增加--open这个参数，在这里配置也是一样的\n\n## 最后\n\n累了累了，写到这已经是凌晨了。不多BB了，现在基本的webpack操作应该都已经学会了吧，后面就是稍微深入的玩一玩webpack了，成为一个webpack配置工程师？\n\n<font size=10>to be continued...</font>\n\n本文地址 [webpack系列之初探](http://www.wclimb.site/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/)\n","source":"_posts/webpack系列之初探.md","raw":"---\ntitle: webpack系列之初探\ndate: 2019-06-06 09:09:42\ntags:\n- javascript\n- 原创\n- webpack\ncategories: [javascript,webpack]\n---\n\n## 写在前面\n\n相信`webpack`这个名称对于前端的同学来说并不陌生，只要你在用`vue`、`react`等等之类的框架，就得天天和它打交道。但是大部分人都只是直接怼一个`vue-cli`脚手架生成一个项目，运行起来就开始一顿写，完全不会去看这个项目的其他相关的东西，今天开始，咱们就来说说这个又爱又恨的`webpack`\n\n## 问题\n\n使用wepack的时候经常会出现下面这些疑问\n\n1. <font color=red>你webpack只能打包单页面的文件吗？</font>\n2. <font color=red>WTF，我包怎么这么大，加载太慢了</font>\n3. <font color=red>我打包速度怎么这么慢，什么破玩意？</font>\n...\n\n## 为什么要使用webpack\n\n哈，你问我为什么要用？因为大家都在用啊😃😃。开个玩笑，前端发展到今天，新技术新思想新框架爆发式增长，当前的浏览器环境跑不赢啊，你说你写个ES6/7在浏览器环境都能跑起来？扯淡的。这个时候`babel`就出现了，你跑不起来是吧，那我转成`ES5`你总该跑起来吧~，那`babel`我还是不能直接用啊，肯定得借助工具编译呀，所以我们需要webpack去做这件事情了。<font color=red>这个时候有人就要站出来说了，我gulp不服，我也能做，我就不用`webpack`</font>。你这么说我就要跟你唠唠了，现在我们先来比较一下`webpack`和`gulp`。\n\n`gulp` 是 `task runner`，`Webpack` 是 `module bundler`\n\nwebpack的优势在模块化，`gulp`除了模块化方面都很不错。但是前端发展至今，模块化真的很重要，`CMD`、`AMD`就是模块化的产物。\n简单来说，如果你当前项目需要模块化编程，那就选`webpack`，如果是处理其他事情，比如把图片拼接成雪碧图或者压缩，那么`gulp`是最擅长的\n\n感兴趣的可以看看这个回答 [gulp 有哪些功能是 webpack 不能替代的？](https://www.zhihu.com/question/45536395/answer/164361274)\n\n## 安装\n\n这里可以参考[webpack官网](https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85)\n开发环境 `webpack: 4.34.0`\n```\n> mkdir webpack && cd webpack\n> npm init -y\n> npm install webpack webpack-cli -D\n```\n\n## 入口（entry）\n\n每个`webpack`都会有一个`entry`，就是入口的意思，指示 `webpack` 应该使用哪个模块，来作为构建其内部依赖图的开始。\n\n注意点：\n1. 入口可以有多个，如果是单页面只需要一个入口，多页面可以设置多个入口\n2. 入口的文件必须是`.js`文件，因为`webpack`只认识`js`（不完全对，其实任意文件都可以，只是`webpack`会把它当做`js`来处理）\n\n举个🌰\n<!-- more -->\n我们新建`webpack.config.js`和新建`src`文件夹，并且文件夹下新建`index.js`文件\n目录如下\n\n```\n- webpack/\n-   src/\n-     index.js\n-   webpack.config.js\n```\n\nwebpack.config.js\n```js\nmodule.exports = {\n  entry: './src/index.js'\n};\n```\n\n我们上面指定`webpack`的入口文件为`index.js`文件，这是总入口\n\n## 出口（output）\n\n有入口当然就会有出口了，就是你导出的文件\n\nwebpack.config.js\n```js\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n};\n```\n\n上述`entry`已经介绍过了，我们来看看`output`，他有文件导出的路径（path）和导出的文件名（filename）\n\n关于`filename`这里需要注意的地方有：\n1. 出口的文件名可以定制化，当前如果你是单页面的话，简单的可以写死一个filename，就如上面的`bundle.js`一样\n2. 你也可以这么写，使用入口名称的名称：`filename: '[name].bundle.js'`,当然还需要改一下entry，把它改成以下形式，name就会变成 -> app\n\n```js\nmodule.exports = {\n  entry: {\n    app: './src/index.js'\n  },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n};\n```\n\n现在我们来试一下webapck打包\n\n## 小试牛刀\n\n第一步，新建一个文件夹webpack-demo\n```\n> mkdir webpack-demo && cd webpack-demo\n> npm init -y\n> cnpm install webpack webpack-cli -D\n```\n第二步，新建src/index.js文件和webpack.config.js文件\n\nwebpack.config.js\n\n```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\n\nindex.js\n```js\ndocument.write('hello webpack');\n```\n\n第三步，打包\n命令行输入\n```\n> npx webpack --config webpack.config.js\n```\n然后控制台就会输出\n```\nHash: 348dca17387cd3f29cef\nVersion: webpack 4.33.0\nTime: 227ms\nBuilt at: 2019-06-08 15:24:07\n    Asset       Size  Chunks             Chunk Names\nbundle.js  961 bytes       0  [emitted]  main\nEntrypoint main = bundle.js\n[0] ./src/index.js 33 bytes {0} [built]\n```\n看到这个信息证明你已经大功告成了，去看看dist/文件夹下是不是有打包好的js文件\n最后面你会看到有黄色的警告，说mode没有设置，待会再讲\n\n<font color=red>这个时候你就会想，我每次生成的文件都叫bundle.js，我都区分不开，也不好做缓存，这个时候你就需要配置一下filename了</font>\n\n我们把webpack.config.js改成以下\n\n```js\nconst path = require('path');\nmodule.exports = {\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\n然后执行 \n```\n> npx webpack --config webpack.config.js\n```\n\n这个时候dist/文件夹下就会多出个类似`app.32434c7cc602e3049dac.js`的文件，而且如果你反复执行打包命令，你发现app.32434c7cc602e3049dac.js文件名都没有改变，这是为什么呢？\n因为webpack会判断你的文件是否有更改而来觉得文件夹hash的变更，现在你可以尝试修改一下index.js文件之后打包的效果就知道了。\n\n\n## 模式（mode ）\n\n上面说到每次打包的时候都会报警告，告诉我们没有设置mode，现在我们来说说mode\n首先mode有两个值，分别是development和production，意思就是，当前项目打包的开发环境还是生成环境的代码\n如果你设置了mode: 'development'，在项目里你可以使用 process.env.NODE_ENV 来获取当前的环境的值\n你可以尝试把webpack.config.js改成以下，然后在index.js里把这个值打印出来，运行一下效果\n\nwebpack.config.js\n```js\nconst path = require('path');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n};\n```\nindex.js\n```js\ndocument.write(`hello webpack，this is ${process.env.NODE_ENV}`); \n```\n现在我们只有js文件，你可以先在根目录新建一个index.html文件，把js引入在浏览器环境执行(或者直接在浏览器控制台执行js)，你会看到浏览器显示 -> hello webpack，this is development\n你分别运行之后会发现他们的效果是不一样的，一个是被压缩的，一个没有被压缩\n\n<font color=red>这个时候你就会想了，怎么这么麻烦，我打包还得自己去新建html文件引入js然后运行或者去执行js文件，能不能让他自动运行跑起来？</font>\n当然是可以的，下面我们来说说plugins\n\n## 插件（plugins）\n\n插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！（官网的解释）\n插件怎么说呢？不好解释它，你可以理解为处理工具，插件目的在于解决 `loader`(这个等会再讲，现在用不上) 无法实现的其他事\n\n插件怎么配置？就像下面这样，当然不是随便找的插件，我们会用到下面配置的插件\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: 'index.html'})\n  ]\n};\n```\n我们先在根目录新建一个index.html文件，之前不是说运行项目很麻烦嘛？现在教你简单的方法\n然后我们用到了html-webpack-plugin，需要先安装他才能使用\n```\n> cnpm i html-webpack-plugin -D\n```\n下一步打包运行项目\n```\n> npx webpack --config webpack.config.js\n```\n运行结果：\n```\nHash: bea857ae13cad8af6e66\nVersion: webpack 4.33.0\nTime: 274ms\nBuilt at: 2019-06-08 16:00:33\n                      Asset      Size  Chunks             Chunk Names\napp.bea857ae13cad8af6e66.js  3.83 KiB     app  [emitted]  app\n                 index.html  74 bytes          [emitted]  \nEntrypoint app = app.bea857ae13cad8af6e66.js\n[./src/index.js] 65 bytes {app} [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [./node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./index.html] 209 bytes {0} [built]\n    [./node_modules/_webpack@4.33.0@webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes {0} [built]\n    [./node_modules/_webpack@4.33.0@webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes {0} [built]\n        + 1 hidden module\n```\n去查看dist文件夹下，你会发现多出了两个文件，js和index.html文件，这就是插件的功劳\nhtml-webpack-plugin这个插件需要指定是那个html模板，然后最后打包的时候就是以这个模板为主，把打包好的js文件放到这个index.html里面，你可以查看html文件里的内容：\n\nindex.html\n```html\n<script type=\"text/javascript\" src=\"app.1b0b2001b0579faec32d.js\"></script>\n```\n<font color=red>这个时候你会发现，我靠，我dist文件怎么这么多啊，怎么办啊？别急，我们再来用一个插件解决这个问题</font>\n\n安装插件clean-webpack-plugin\n```\n> cnpm i clean-webpack-plugin -D\n```\n然后配置文件去添加插件\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({template: 'index.html'})\n  ]\n};\n```\n\n然后你再去看看dist文件夹里的文件，是不是只有两个文件了？这个插件的作用是，先把dist文件夹里的文件先清空然后再把打包好的文件放入dist。\n\n<font color=red>那么你还会有问题，这还是麻烦啊，我不能只运行命令行，让重新自己打开浏览器运行我打包的项目吗？</font>当然可以啊\n\n首先安装 webpack-dev-server\n```\n> cnpm i webpack-dev-server -D\n```\n然后\n```\n> webpack-dev-server --open --config webpack.config.js\n```\n你会发现重新自动打开了浏览器，页面显示 hello webpack，this is development。是不是很简单？\n你现在可以去修改index.js然后保存文件，去浏览器看看是不是自动刷新了你刚刚更改的内容呢？\n\n<font color=red>现在你可能还会有问题，我去，这太简单了吧，我要用css和图片怎么办？js不能导入css文件啊！我怎么跟vue一样在自己的ip访问项目啊？现在肯定是问题一大堆</font>\n\n## loader\n\nloader 用于对模块的源代码进行转换。loader 可以使你在 import 或\"加载\"模块时预处理文件。比如可以把typescript转换成JavaScript，less转成css\n现在我们就来解决你上一章节末的问题，教你配置简单的loader，来加载css或者图片\n首先我们先安装css-loader/style-loader，来加载解析css文件\n```\n> cnpm i css-loader style-loader -D\n```\n下一步在src文件夹下新建test.css文件，再在index.js导入\ntest.css\n```css\nbody {\n  background: #ccc;\n}\n```\n\nindex.js\n```js\nimport './test.css';\ndocument.write(`hello webpack，this is ${process.env.NODE_ENV}，test`);\n```\n如果你直接运行会发现控制台报错了 \n```\nERROR in ./src/test.css 1:5\nModule parse failed: Unexpected token (1:5)\nYou may need an appropriate loader to handle this file type.\n> body {\n|   background: #ccc;\n| }\n @ ./src/index.js 1:0-20\n```\n这个时候loader登场了，我们修改配置文件\nwebpack.config.js\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n  ],\n  module: {\n    rules:[\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ]\n  }\n};\n```\n然后运行命令行\n```\n> webpack-dev-server --open --config webpack.config.js\n```\n你会发现页面背景颜色变了\n\n现在我们来说说配置：\nmodule.rules 允许你在 webpack 配置中指定多个 loader，上面我们规定正则匹配css文件，然后如果匹配到了，则使用style-laoder和css-loader去处理css文件，css-laoder负责解析css文件，style-loader负责把css文件放到页面中去，你打开调试可以看到head里被插入了style样式标签，当前如果你想解析例如xx.ts文件，则可以在数组里面新增：\n```js\n {\n  test: /\\.ts$/,\n  use: 'ts-loader',\n},\n```\n\n下面来看看怎么加载图片资源，还是跟上述原一样，图片也是有类型的，我们首先得匹配文件后缀，然后去用loader去解析他们，这里我们需要用到 url-loader file-loader\n按照惯例先安装\n```\n> cnpm i url-loader file-loader -D\n```\n```js\nmodule.exports = {\n  ...\n  module: {\n    rules:[\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 6000,\n          name: 'img/[name].[hash:7].[ext]',\n        },\n      }\n    ]\n  }\n};\n```\n下一步就是往项目里增加图片了\n我们修改test.css文件\ntest.css\n```\nbody {\n  background: url(img.jpg);\n}\n```\n\n浏览器就显示的全是刚刚设置的重复图片了\n\n** 这里你又会问了，不对，你这里只用到了url-loader，file-loader不是多余的吗？** 不是的，你可以看看options，有一个limit参数，规定如果超过了6000bytes大小的文件会交给file-loader处理，因为如果图片小于这个数值，url-loader会把图片转成base64格式的图片加载，如果超过就自己不处理了，所以他们两者是有相依性的\n\n\n## 使用npm脚本\n\n上面基本上都是使用一大段的命令行来执行项目，现在我们来简化一下\n修改package.json\n```js\n\"scripts\": {\n  \"dev\": \"webpack-dev-server --open --config webpack.config.js\",\n  \"build\": \"webpack --config webpack.config.js\"\n},\n```\n命令行运行项目\n```\n> npm run dev\n> npm run build\n```\n\n## devServer\n\n在开发中你可能有很多需求，比如怎么通过ip访问项目，怎么把控制台信息输出的精简点，怎么修改端口等等？这个时候就需要用到devServer的配置了\n我们修改webpack.config.js,增加以下：\n\n```js\nmodule.exports = {\n  ...\n  devServer: {\n    contentBase: './dist', // 告诉服务器从哪里提供内容\n    host: '0.0.0.0', // 指定使用一个 host。默认是 localhost\n    useLocalIp: true, // 是否使用本地ip\n    open: true, // 是否自动打开浏览器\n    port: 8080, // 端口号\n    noInfo: true, // 显示的 webpack 包(bundle)信息」的消息将被隐藏\n  },\n}\n```\n是的，你现在可以不用在命令行里增加--open这个参数，在这里配置也是一样的\n\n## 最后\n\n累了累了，写到这已经是凌晨了。不多BB了，现在基本的webpack操作应该都已经学会了吧，后面就是稍微深入的玩一玩webpack了，成为一个webpack配置工程师？\n\n<font size=10>to be continued...</font>\n\n本文地址 [webpack系列之初探](http://www.wclimb.site/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/)\n","slug":"webpack系列之初探","published":1,"updated":"2019-06-30T15:04:40.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9i001d59x31pxulkle","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>相信<code>webpack</code>这个名称对于前端的同学来说并不陌生，只要你在用<code>vue</code>、<code>react</code>等等之类的框架，就得天天和它打交道。但是大部分人都只是直接怼一个<code>vue-cli</code>脚手架生成一个项目，运行起来就开始一顿写，完全不会去看这个项目的其他相关的东西，今天开始，咱们就来说说这个又爱又恨的<code>webpack</code></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用wepack的时候经常会出现下面这些疑问</p>\n<ol>\n<li><font color=\"red\">你webpack只能打包单页面的文件吗？</font></li>\n<li><font color=\"red\">WTF，我包怎么这么大，加载太慢了</font></li>\n<li><font color=\"red\">我打包速度怎么这么慢，什么破玩意？</font><br>…</li>\n</ol>\n<h2 id=\"为什么要使用webpack\"><a href=\"#为什么要使用webpack\" class=\"headerlink\" title=\"为什么要使用webpack\"></a>为什么要使用webpack</h2><p>哈，你问我为什么要用？因为大家都在用啊😃😃。开个玩笑，前端发展到今天，新技术新思想新框架爆发式增长，当前的浏览器环境跑不赢啊，你说你写个ES6/7在浏览器环境都能跑起来？扯淡的。这个时候<code>babel</code>就出现了，你跑不起来是吧，那我转成<code>ES5</code>你总该跑起来吧~，那<code>babel</code>我还是不能直接用啊，肯定得借助工具编译呀，所以我们需要webpack去做这件事情了。<font color=\"red\">这个时候有人就要站出来说了，我gulp不服，我也能做，我就不用<code>webpack</code></font>。你这么说我就要跟你唠唠了，现在我们先来比较一下<code>webpack</code>和<code>gulp</code>。</p>\n<p><code>gulp</code> 是 <code>task runner</code>，<code>Webpack</code> 是 <code>module bundler</code></p>\n<p>webpack的优势在模块化，<code>gulp</code>除了模块化方面都很不错。但是前端发展至今，模块化真的很重要，<code>CMD</code>、<code>AMD</code>就是模块化的产物。<br>简单来说，如果你当前项目需要模块化编程，那就选<code>webpack</code>，如果是处理其他事情，比如把图片拼接成雪碧图或者压缩，那么<code>gulp</code>是最擅长的</p>\n<p>感兴趣的可以看看这个回答 <a href=\"https://www.zhihu.com/question/45536395/answer/164361274\" target=\"_blank\" rel=\"noopener\">gulp 有哪些功能是 webpack 不能替代的？</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>这里可以参考<a href=\"https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">webpack官网</a><br>开发环境 <code>webpack: 4.34.0</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir webpack &amp;&amp; cd webpack</span><br><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"入口（entry）\"><a href=\"#入口（entry）\" class=\"headerlink\" title=\"入口（entry）\"></a>入口（entry）</h2><p>每个<code>webpack</code>都会有一个<code>entry</code>，就是入口的意思，指示 <code>webpack</code> 应该使用哪个模块，来作为构建其内部依赖图的开始。</p>\n<p>注意点：</p>\n<ol>\n<li>入口可以有多个，如果是单页面只需要一个入口，多页面可以设置多个入口</li>\n<li>入口的文件必须是<code>.js</code>文件，因为<code>webpack</code>只认识<code>js</code>（不完全对，其实任意文件都可以，只是<code>webpack</code>会把它当做<code>js</code>来处理）</li>\n</ol>\n<p>举个🌰<br><a id=\"more\"></a><br>我们新建<code>webpack.config.js</code>和新建<code>src</code>文件夹，并且文件夹下新建<code>index.js</code>文件<br>目录如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- webpack/</span><br><span class=\"line\">-   src/</span><br><span class=\"line\">-     index.js</span><br><span class=\"line\">-   webpack.config.js</span><br></pre></td></tr></table></figure>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>我们上面指定<code>webpack</code>的入口文件为<code>index.js</code>文件，这是总入口</p>\n<h2 id=\"出口（output）\"><a href=\"#出口（output）\" class=\"headerlink\" title=\"出口（output）\"></a>出口（output）</h2><p>有入口当然就会有出口了，就是你导出的文件</p>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上述<code>entry</code>已经介绍过了，我们来看看<code>output</code>，他有文件导出的路径（path）和导出的文件名（filename）</p>\n<p>关于<code>filename</code>这里需要注意的地方有：</p>\n<ol>\n<li>出口的文件名可以定制化，当前如果你是单页面的话，简单的可以写死一个filename，就如上面的<code>bundle.js</code>一样</li>\n<li>你也可以这么写，使用入口名称的名称：<code>filename: &#39;[name].bundle.js&#39;</code>,当然还需要改一下entry，把它改成以下形式，name就会变成 -&gt; app</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们来试一下webapck打包</p>\n<h2 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h2><p>第一步，新建一个文件夹webpack-demo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir webpack-demo &amp;&amp; cd webpack-demo</span><br><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p>\n<p>第二步，新建src/index.js文件和webpack.config.js文件</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'hello webpack'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第三步，打包<br>命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>然后控制台就会输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 348dca17387cd3f29cef</span><br><span class=\"line\">Version: webpack 4.33.0</span><br><span class=\"line\">Time: 227ms</span><br><span class=\"line\">Built at: 2019-06-08 15:24:07</span><br><span class=\"line\">    Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  961 bytes       0  [emitted]  main</span><br><span class=\"line\">Entrypoint main = bundle.js</span><br><span class=\"line\">[0] ./src/index.js 33 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure></p>\n<p>看到这个信息证明你已经大功告成了，去看看dist/文件夹下是不是有打包好的js文件<br>最后面你会看到有黄色的警告，说mode没有设置，待会再讲</p>\n<font color=\"red\">这个时候你就会想，我每次生成的文件都叫bundle.js，我都区分不开，也不好做缓存，这个时候你就需要配置一下filename了</font>\n\n<p>我们把webpack.config.js改成以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>这个时候dist/文件夹下就会多出个类似<code>app.32434c7cc602e3049dac.js</code>的文件，而且如果你反复执行打包命令，你发现app.32434c7cc602e3049dac.js文件名都没有改变，这是为什么呢？<br>因为webpack会判断你的文件是否有更改而来觉得文件夹hash的变更，现在你可以尝试修改一下index.js文件之后打包的效果就知道了。</p>\n<h2 id=\"模式（mode-）\"><a href=\"#模式（mode-）\" class=\"headerlink\" title=\"模式（mode ）\"></a>模式（mode ）</h2><p>上面说到每次打包的时候都会报警告，告诉我们没有设置mode，现在我们来说说mode<br>首先mode有两个值，分别是development和production，意思就是，当前项目打包的开发环境还是生成环境的代码<br>如果你设置了mode: ‘development’，在项目里你可以使用 process.env.NODE_ENV 来获取当前的环境的值<br>你可以尝试把webpack.config.js改成以下，然后在index.js里把这个值打印出来，运行一下效果</p>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">`hello webpack，this is <span class=\"subst\">$&#123;process.env.NODE_ENV&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>现在我们只有js文件，你可以先在根目录新建一个index.html文件，把js引入在浏览器环境执行(或者直接在浏览器控制台执行js)，你会看到浏览器显示 -&gt; hello webpack，this is development<br>你分别运行之后会发现他们的效果是不一样的，一个是被压缩的，一个没有被压缩</p>\n<font color=\"red\">这个时候你就会想了，怎么这么麻烦，我打包还得自己去新建html文件引入js然后运行或者去执行js文件，能不能让他自动运行跑起来？</font><br>当然是可以的，下面我们来说说plugins<br><br>## 插件（plugins）<br><br>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！（官网的解释）<br>插件怎么说呢？不好解释它，你可以理解为处理工具，插件目的在于解决 <code>loader</code>(这个等会再讲，现在用不上) 无法实现的其他事<br><br>插件怎么配置？就像下面这样，当然不是随便找的插件，我们会用到下面配置的插件<br><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br><br>我们先在根目录新建一个index.html文件，之前不是说运行项目很麻烦嘛？现在教你简单的方法<br>然后我们用到了html-webpack-plugin，需要先安装他才能使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><br><br>下一步打包运行项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><br><br>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: bea857ae13cad8af6e66</span><br><span class=\"line\">Version: webpack 4.33.0</span><br><span class=\"line\">Time: 274ms</span><br><span class=\"line\">Built at: 2019-06-08 16:00:33</span><br><span class=\"line\">                      Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">app.bea857ae13cad8af6e66.js  3.83 KiB     app  [emitted]  app</span><br><span class=\"line\">                 index.html  74 bytes          [emitted]  </span><br><span class=\"line\">Entrypoint app = app.bea857ae13cad8af6e66.js</span><br><span class=\"line\">[./src/index.js] 65 bytes &#123;app&#125; [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [./node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./index.html] 209 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [./node_modules/_webpack@4.33.0@webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [./node_modules/_webpack@4.33.0@webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 1 hidden module</span><br></pre></td></tr></table></figure><br><br>去查看dist文件夹下，你会发现多出了两个文件，js和index.html文件，这就是插件的功劳<br>html-webpack-plugin这个插件需要指定是那个html模板，然后最后打包的时候就是以这个模板为主，把打包好的js文件放到这个index.html里面，你可以查看html文件里的内容：<br><br>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.1b0b2001b0579faec32d.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><font color=\"red\">这个时候你会发现，我靠，我dist文件怎么这么多啊，怎么办啊？别急，我们再来用一个插件解决这个问题</font>\n\n<p>安装插件clean-webpack-plugin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p>\n<p>然后配置文件去添加插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后你再去看看dist文件夹里的文件，是不是只有两个文件了？这个插件的作用是，先把dist文件夹里的文件先清空然后再把打包好的文件放入dist。</p>\n<font color=\"red\">那么你还会有问题，这还是麻烦啊，我不能只运行命令行，让重新自己打开浏览器运行我打包的项目吗？</font>当然可以啊<br><br>首先安装 webpack-dev-server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><br><br>然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; webpack-dev-server --open --config webpack.config.js</span><br></pre></td></tr></table></figure><br><br>你会发现重新自动打开了浏览器，页面显示 hello webpack，this is development。是不是很简单？<br>你现在可以去修改index.js然后保存文件，去浏览器看看是不是自动刷新了你刚刚更改的内容呢？<br><br><font color=\"red\">现在你可能还会有问题，我去，这太简单了吧，我要用css和图片怎么办？js不能导入css文件啊！我怎么跟vue一样在自己的ip访问项目啊？现在肯定是问题一大堆</font>\n\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。比如可以把typescript转换成JavaScript，less转成css<br>现在我们就来解决你上一章节末的问题，教你配置简单的loader，来加载css或者图片<br>首先我们先安装css-loader/style-loader，来加载解析css文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i css-loader style-loader -D</span><br></pre></td></tr></table></figure></p>\n<p>下一步在src文件夹下新建test.css文件，再在index.js导入<br>test.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./test.css'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">`hello webpack，this is <span class=\"subst\">$&#123;process.env.NODE_ENV&#125;</span>，test`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>如果你直接运行会发现控制台报错了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in ./src/test.css 1:5</span><br><span class=\"line\">Module parse failed: Unexpected token (1:5)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">&gt; body &#123;</span><br><span class=\"line\">|   background: #ccc;</span><br><span class=\"line\">| &#125;</span><br><span class=\"line\"> @ ./src/index.js 1:0-20</span><br></pre></td></tr></table></figure></p>\n<p>这个时候loader登场了，我们修改配置文件<br>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>然后运行命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; webpack-dev-server --open --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>你会发现页面背景颜色变了</p>\n<p>现在我们来说说配置：<br>module.rules 允许你在 webpack 配置中指定多个 loader，上面我们规定正则匹配css文件，然后如果匹配到了，则使用style-laoder和css-loader去处理css文件，css-laoder负责解析css文件，style-loader负责把css文件放到页面中去，你打开调试可以看到head里被插入了style样式标签，当前如果你想解析例如xx.ts文件，则可以在数组里面新增：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">  use: <span class=\"string\">'ts-loader'</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>下面来看看怎么加载图片资源，还是跟上述原一样，图片也是有类型的，我们首先得匹配文件后缀，然后去用loader去解析他们，这里我们需要用到 url-loader file-loader<br>按照惯例先安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i url-loader file-loader -D</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">6000</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'img/[name].[hash:7].[ext]'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>下一步就是往项目里增加图片了<br>我们修改test.css文件<br>test.css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: url(img.jpg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>浏览器就显示的全是刚刚设置的重复图片了</p>\n<p><strong> 这里你又会问了，不对，你这里只用到了url-loader，file-loader不是多余的吗？</strong> 不是的，你可以看看options，有一个limit参数，规定如果超过了6000bytes大小的文件会交给file-loader处理，因为如果图片小于这个数值，url-loader会把图片转成base64格式的图片加载，如果超过就自己不处理了，所以他们两者是有相依性的</p>\n<h2 id=\"使用npm脚本\"><a href=\"#使用npm脚本\" class=\"headerlink\" title=\"使用npm脚本\"></a>使用npm脚本</h2><p>上面基本上都是使用一大段的命令行来执行项目，现在我们来简化一下<br>修改package.json<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>命令行运行项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run dev</span><br><span class=\"line\">&gt; npm run build</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"devServer\"><a href=\"#devServer\" class=\"headerlink\" title=\"devServer\"></a>devServer</h2><p>在开发中你可能有很多需求，比如怎么通过ip访问项目，怎么把控制台信息输出的精简点，怎么修改端口等等？这个时候就需要用到devServer的配置了<br>我们修改webpack.config.js,增加以下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span>, <span class=\"comment\">// 告诉服务器从哪里提供内容</span></span><br><span class=\"line\">    host: <span class=\"string\">'0.0.0.0'</span>, <span class=\"comment\">// 指定使用一个 host。默认是 localhost</span></span><br><span class=\"line\">    useLocalIp: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否使用本地ip</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否自动打开浏览器</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span>, <span class=\"comment\">// 显示的 webpack 包(bundle)信息」的消息将被隐藏</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是的，你现在可以不用在命令行里增加–open这个参数，在这里配置也是一样的</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>累了累了，写到这已经是凌晨了。不多BB了，现在基本的webpack操作应该都已经学会了吧，后面就是稍微深入的玩一玩webpack了，成为一个webpack配置工程师？</p>\n<font size=\"10\">to be continued…</font>\n\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/\">webpack系列之初探</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>相信<code>webpack</code>这个名称对于前端的同学来说并不陌生，只要你在用<code>vue</code>、<code>react</code>等等之类的框架，就得天天和它打交道。但是大部分人都只是直接怼一个<code>vue-cli</code>脚手架生成一个项目，运行起来就开始一顿写，完全不会去看这个项目的其他相关的东西，今天开始，咱们就来说说这个又爱又恨的<code>webpack</code></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用wepack的时候经常会出现下面这些疑问</p>\n<ol>\n<li><font color=\"red\">你webpack只能打包单页面的文件吗？</font></li>\n<li><font color=\"red\">WTF，我包怎么这么大，加载太慢了</font></li>\n<li><font color=\"red\">我打包速度怎么这么慢，什么破玩意？</font><br>…</li>\n</ol>\n<h2 id=\"为什么要使用webpack\"><a href=\"#为什么要使用webpack\" class=\"headerlink\" title=\"为什么要使用webpack\"></a>为什么要使用webpack</h2><p>哈，你问我为什么要用？因为大家都在用啊😃😃。开个玩笑，前端发展到今天，新技术新思想新框架爆发式增长，当前的浏览器环境跑不赢啊，你说你写个ES6/7在浏览器环境都能跑起来？扯淡的。这个时候<code>babel</code>就出现了，你跑不起来是吧，那我转成<code>ES5</code>你总该跑起来吧~，那<code>babel</code>我还是不能直接用啊，肯定得借助工具编译呀，所以我们需要webpack去做这件事情了。<font color=\"red\">这个时候有人就要站出来说了，我gulp不服，我也能做，我就不用<code>webpack</code></font>。你这么说我就要跟你唠唠了，现在我们先来比较一下<code>webpack</code>和<code>gulp</code>。</p>\n<p><code>gulp</code> 是 <code>task runner</code>，<code>Webpack</code> 是 <code>module bundler</code></p>\n<p>webpack的优势在模块化，<code>gulp</code>除了模块化方面都很不错。但是前端发展至今，模块化真的很重要，<code>CMD</code>、<code>AMD</code>就是模块化的产物。<br>简单来说，如果你当前项目需要模块化编程，那就选<code>webpack</code>，如果是处理其他事情，比如把图片拼接成雪碧图或者压缩，那么<code>gulp</code>是最擅长的</p>\n<p>感兴趣的可以看看这个回答 <a href=\"https://www.zhihu.com/question/45536395/answer/164361274\" target=\"_blank\" rel=\"noopener\">gulp 有哪些功能是 webpack 不能替代的？</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>这里可以参考<a href=\"https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">webpack官网</a><br>开发环境 <code>webpack: 4.34.0</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir webpack &amp;&amp; cd webpack</span><br><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"入口（entry）\"><a href=\"#入口（entry）\" class=\"headerlink\" title=\"入口（entry）\"></a>入口（entry）</h2><p>每个<code>webpack</code>都会有一个<code>entry</code>，就是入口的意思，指示 <code>webpack</code> 应该使用哪个模块，来作为构建其内部依赖图的开始。</p>\n<p>注意点：</p>\n<ol>\n<li>入口可以有多个，如果是单页面只需要一个入口，多页面可以设置多个入口</li>\n<li>入口的文件必须是<code>.js</code>文件，因为<code>webpack</code>只认识<code>js</code>（不完全对，其实任意文件都可以，只是<code>webpack</code>会把它当做<code>js</code>来处理）</li>\n</ol>\n<p>举个🌰<br>","more":"<br>我们新建<code>webpack.config.js</code>和新建<code>src</code>文件夹，并且文件夹下新建<code>index.js</code>文件<br>目录如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- webpack/</span><br><span class=\"line\">-   src/</span><br><span class=\"line\">-     index.js</span><br><span class=\"line\">-   webpack.config.js</span><br></pre></td></tr></table></figure>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>我们上面指定<code>webpack</code>的入口文件为<code>index.js</code>文件，这是总入口</p>\n<h2 id=\"出口（output）\"><a href=\"#出口（output）\" class=\"headerlink\" title=\"出口（output）\"></a>出口（output）</h2><p>有入口当然就会有出口了，就是你导出的文件</p>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上述<code>entry</code>已经介绍过了，我们来看看<code>output</code>，他有文件导出的路径（path）和导出的文件名（filename）</p>\n<p>关于<code>filename</code>这里需要注意的地方有：</p>\n<ol>\n<li>出口的文件名可以定制化，当前如果你是单页面的话，简单的可以写死一个filename，就如上面的<code>bundle.js</code>一样</li>\n<li>你也可以这么写，使用入口名称的名称：<code>filename: &#39;[name].bundle.js&#39;</code>,当然还需要改一下entry，把它改成以下形式，name就会变成 -&gt; app</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们来试一下webapck打包</p>\n<h2 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h2><p>第一步，新建一个文件夹webpack-demo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir webpack-demo &amp;&amp; cd webpack-demo</span><br><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p>\n<p>第二步，新建src/index.js文件和webpack.config.js文件</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'hello webpack'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>第三步，打包<br>命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>然后控制台就会输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 348dca17387cd3f29cef</span><br><span class=\"line\">Version: webpack 4.33.0</span><br><span class=\"line\">Time: 227ms</span><br><span class=\"line\">Built at: 2019-06-08 15:24:07</span><br><span class=\"line\">    Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  961 bytes       0  [emitted]  main</span><br><span class=\"line\">Entrypoint main = bundle.js</span><br><span class=\"line\">[0] ./src/index.js 33 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure></p>\n<p>看到这个信息证明你已经大功告成了，去看看dist/文件夹下是不是有打包好的js文件<br>最后面你会看到有黄色的警告，说mode没有设置，待会再讲</p>\n<font color=\"red\">这个时候你就会想，我每次生成的文件都叫bundle.js，我都区分不开，也不好做缓存，这个时候你就需要配置一下filename了</font>\n\n<p>我们把webpack.config.js改成以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>这个时候dist/文件夹下就会多出个类似<code>app.32434c7cc602e3049dac.js</code>的文件，而且如果你反复执行打包命令，你发现app.32434c7cc602e3049dac.js文件名都没有改变，这是为什么呢？<br>因为webpack会判断你的文件是否有更改而来觉得文件夹hash的变更，现在你可以尝试修改一下index.js文件之后打包的效果就知道了。</p>\n<h2 id=\"模式（mode-）\"><a href=\"#模式（mode-）\" class=\"headerlink\" title=\"模式（mode ）\"></a>模式（mode ）</h2><p>上面说到每次打包的时候都会报警告，告诉我们没有设置mode，现在我们来说说mode<br>首先mode有两个值，分别是development和production，意思就是，当前项目打包的开发环境还是生成环境的代码<br>如果你设置了mode: ‘development’，在项目里你可以使用 process.env.NODE_ENV 来获取当前的环境的值<br>你可以尝试把webpack.config.js改成以下，然后在index.js里把这个值打印出来，运行一下效果</p>\n<p>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">`hello webpack，this is <span class=\"subst\">$&#123;process.env.NODE_ENV&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>现在我们只有js文件，你可以先在根目录新建一个index.html文件，把js引入在浏览器环境执行(或者直接在浏览器控制台执行js)，你会看到浏览器显示 -&gt; hello webpack，this is development<br>你分别运行之后会发现他们的效果是不一样的，一个是被压缩的，一个没有被压缩</p>\n<font color=\"red\">这个时候你就会想了，怎么这么麻烦，我打包还得自己去新建html文件引入js然后运行或者去执行js文件，能不能让他自动运行跑起来？</font><br>当然是可以的，下面我们来说说plugins<br><br>## 插件（plugins）<br><br>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！（官网的解释）<br>插件怎么说呢？不好解释它，你可以理解为处理工具，插件目的在于解决 <code>loader</code>(这个等会再讲，现在用不上) 无法实现的其他事<br><br>插件怎么配置？就像下面这样，当然不是随便找的插件，我们会用到下面配置的插件<br><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br><br>我们先在根目录新建一个index.html文件，之前不是说运行项目很麻烦嘛？现在教你简单的方法<br>然后我们用到了html-webpack-plugin，需要先安装他才能使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><br><br>下一步打包运行项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><br><br>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: bea857ae13cad8af6e66</span><br><span class=\"line\">Version: webpack 4.33.0</span><br><span class=\"line\">Time: 274ms</span><br><span class=\"line\">Built at: 2019-06-08 16:00:33</span><br><span class=\"line\">                      Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">app.bea857ae13cad8af6e66.js  3.83 KiB     app  [emitted]  app</span><br><span class=\"line\">                 index.html  74 bytes          [emitted]  </span><br><span class=\"line\">Entrypoint app = app.bea857ae13cad8af6e66.js</span><br><span class=\"line\">[./src/index.js] 65 bytes &#123;app&#125; [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [./node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./index.html] 209 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [./node_modules/_webpack@4.33.0@webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    [./node_modules/_webpack@4.33.0@webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 1 hidden module</span><br></pre></td></tr></table></figure><br><br>去查看dist文件夹下，你会发现多出了两个文件，js和index.html文件，这就是插件的功劳<br>html-webpack-plugin这个插件需要指定是那个html模板，然后最后打包的时候就是以这个模板为主，把打包好的js文件放到这个index.html里面，你可以查看html文件里的内容：<br><br>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.1b0b2001b0579faec32d.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><font color=\"red\">这个时候你会发现，我靠，我dist文件怎么这么多啊，怎么办啊？别急，我们再来用一个插件解决这个问题</font>\n\n<p>安装插件clean-webpack-plugin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p>\n<p>然后配置文件去添加插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后你再去看看dist文件夹里的文件，是不是只有两个文件了？这个插件的作用是，先把dist文件夹里的文件先清空然后再把打包好的文件放入dist。</p>\n<font color=\"red\">那么你还会有问题，这还是麻烦啊，我不能只运行命令行，让重新自己打开浏览器运行我打包的项目吗？</font>当然可以啊<br><br>首先安装 webpack-dev-server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><br><br>然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; webpack-dev-server --open --config webpack.config.js</span><br></pre></td></tr></table></figure><br><br>你会发现重新自动打开了浏览器，页面显示 hello webpack，this is development。是不是很简单？<br>你现在可以去修改index.js然后保存文件，去浏览器看看是不是自动刷新了你刚刚更改的内容呢？<br><br><font color=\"red\">现在你可能还会有问题，我去，这太简单了吧，我要用css和图片怎么办？js不能导入css文件啊！我怎么跟vue一样在自己的ip访问项目啊？现在肯定是问题一大堆</font>\n\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。比如可以把typescript转换成JavaScript，less转成css<br>现在我们就来解决你上一章节末的问题，教你配置简单的loader，来加载css或者图片<br>首先我们先安装css-loader/style-loader，来加载解析css文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i css-loader style-loader -D</span><br></pre></td></tr></table></figure></p>\n<p>下一步在src文件夹下新建test.css文件，再在index.js导入<br>test.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./test.css'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">`hello webpack，this is <span class=\"subst\">$&#123;process.env.NODE_ENV&#125;</span>，test`</span>);</span><br></pre></td></tr></table></figure></p>\n<p>如果你直接运行会发现控制台报错了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR in ./src/test.css 1:5</span><br><span class=\"line\">Module parse failed: Unexpected token (1:5)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">&gt; body &#123;</span><br><span class=\"line\">|   background: #ccc;</span><br><span class=\"line\">| &#125;</span><br><span class=\"line\"> @ ./src/index.js 1:0-20</span><br></pre></td></tr></table></figure></p>\n<p>这个时候loader登场了，我们修改配置文件<br>webpack.config.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>然后运行命令行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; webpack-dev-server --open --config webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p>你会发现页面背景颜色变了</p>\n<p>现在我们来说说配置：<br>module.rules 允许你在 webpack 配置中指定多个 loader，上面我们规定正则匹配css文件，然后如果匹配到了，则使用style-laoder和css-loader去处理css文件，css-laoder负责解析css文件，style-loader负责把css文件放到页面中去，你打开调试可以看到head里被插入了style样式标签，当前如果你想解析例如xx.ts文件，则可以在数组里面新增：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">  use: <span class=\"string\">'ts-loader'</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>下面来看看怎么加载图片资源，还是跟上述原一样，图片也是有类型的，我们首先得匹配文件后缀，然后去用loader去解析他们，这里我们需要用到 url-loader file-loader<br>按照惯例先安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cnpm i url-loader file-loader -D</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">6000</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'img/[name].[hash:7].[ext]'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>下一步就是往项目里增加图片了<br>我们修改test.css文件<br>test.css<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">  background: url(img.jpg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>浏览器就显示的全是刚刚设置的重复图片了</p>\n<p><strong> 这里你又会问了，不对，你这里只用到了url-loader，file-loader不是多余的吗？</strong> 不是的，你可以看看options，有一个limit参数，规定如果超过了6000bytes大小的文件会交给file-loader处理，因为如果图片小于这个数值，url-loader会把图片转成base64格式的图片加载，如果超过就自己不处理了，所以他们两者是有相依性的</p>\n<h2 id=\"使用npm脚本\"><a href=\"#使用npm脚本\" class=\"headerlink\" title=\"使用npm脚本\"></a>使用npm脚本</h2><p>上面基本上都是使用一大段的命令行来执行项目，现在我们来简化一下<br>修改package.json<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.config.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>命令行运行项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm run dev</span><br><span class=\"line\">&gt; npm run build</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"devServer\"><a href=\"#devServer\" class=\"headerlink\" title=\"devServer\"></a>devServer</h2><p>在开发中你可能有很多需求，比如怎么通过ip访问项目，怎么把控制台信息输出的精简点，怎么修改端口等等？这个时候就需要用到devServer的配置了<br>我们修改webpack.config.js,增加以下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span>, <span class=\"comment\">// 告诉服务器从哪里提供内容</span></span><br><span class=\"line\">    host: <span class=\"string\">'0.0.0.0'</span>, <span class=\"comment\">// 指定使用一个 host。默认是 localhost</span></span><br><span class=\"line\">    useLocalIp: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否使用本地ip</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否自动打开浏览器</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span>, <span class=\"comment\">// 显示的 webpack 包(bundle)信息」的消息将被隐藏</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是的，你现在可以不用在命令行里增加–open这个参数，在这里配置也是一样的</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>累了累了，写到这已经是凌晨了。不多BB了，现在基本的webpack操作应该都已经学会了吧，后面就是稍微深入的玩一玩webpack了，成为一个webpack配置工程师？</p>\n<font size=\"10\">to be continued…</font>\n\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/\">webpack系列之初探</a></p>"},{"title":"使用 Vue2.js + Node.js 搭建一个小型的全栈项目","date":"2017-09-08T01:29:14.000Z","_content":"\n# 写在前面\n\n由于最近公司业务不是很忙，空闲时间比较多，于是就在纠结Vue.js（之前就学习过）和Node.js先专研哪个比较好，最终选择了先玩玩Node.js。经过一段时间的学习，就有了教程 [Node+Koa2+Mysql 搭建简易博客](http://www.wclimb.site/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/)  [GitHub地址](https://github.com/wclimb/Koa2-blog)，想要了解的可以先看看，个人水平有限，希望可以帮到你。\n大概过来一个多月，我决定两路开工。使用Node.js给前端写接口，配备后台管理功能，先把后台搭建好。大概几天过后，后台一些简单的功能实现后，就开始用Vue.js开始搭建前台，也一直在想做点什么比较好，于是就做了个豆瓣评分类似的项目。\n\n> 前端项目地址 https://github.com/wclimb/vue-video  \n> 前端预览 http://video.wclimb.site\n\n> 后端项目地址 https://github.com/wclimb/video-admin  \n> 后台管理 http://vue.wclimb.site\n\n> API接口地址 https://github.com/wclimb/video-admin/blob/master/API.md\n\n## 技术栈(Vue2.js + Node.js 全栈项目)\n\n> 由于页面不是很多，vuex用的不多，关键掌握怎么实现就好了\n\n`vue2` + `vuex` + `vue-router` + `webpack` + `fetch` + `sass` + `flex` + `svg` + `阿里字体图标`\n\n## 运行\n\n```\ngit clone https://github.com/wclimb/vue-video.git\n\ncd vue-video\n\nnpm install  建议使用淘宝镜像(https://npm.taobao.org/) =>  cnpm i\n\nnpm run dev (运行项目)\n\nnpm run build (打包项目)\n\nps: 如果打包之后文件运行不了，请打包之前把路由的 mode:'history'注释掉，该功能去掉了url中丑陋的 # 号\n\n```\n<!-- more -->\n## 功能\n\n* 1. 注册登录登出 + 验证码 密码检测，如果用户不存在则自动创建\n* 2. 检测是否登录，如果没有登录则不允许评论和评价\n* 3. 可以上传影片到后台，进行前台展示\n* 4. 评分功能，初始化评分可以自由设置，如果没有人like则默认显示原始评分，如果有则计算当前vide的评分\n* 5. 修改用户名，检测用户名是否跟其他人重复\n* 6. 上传头像，默认没有头像\n* 7. 评论功能，评论之后可以在个人中心展示，并且可以删除\n* 8. 搜索功能，可以搜索存在的影片，如果没有则显示无结果\n* 9. 自己喜欢的video和评论的内容会在个人中心显示\n\n综上：\n\n- [x] 注册\n- [x] 登录\n- [x] 登出\n- [x] 验证码\n- [x] 详情页\n- [x] 分类\n- [x] 分类影视列表\n- [x] 修改用户名\n- [x] 上传头像\n- [x] 评论\n- [x] 删除评论\n- [x] 搜索\n- [x] 个人中心数据\n\n如果觉得对你有帮助还望关注一下，有问题可以即使提哟，觉得不错的话`star`一下也是可以的哟\n\n## 前端线上地址\n\n项目是手机端的，请使用谷歌浏览器手机预览模式\n\n> 首页默认一种类别只显示10个，可以查看更多显示全部 \n\n预览：[vue-video](http://video.wclimb.site)\n\n手机扫描图下二维码预览\n\n![](http://www.wclimb.site/cdn/1504574571.png)\n\n## 后端线上地址\n\n技术栈：`Node` + `Koa2` + `Mysql` \n预览：[video-admin](http://vue.wclimb.site)\nGitHub: [管理后台](https://github.com/wclimb/video-admin)\n\n## 前端演示\n\n![](http://www.wclimb.site/cdn/vue1.gif)\n\n### 主页\n\n![](http://www.wclimb.site/cdn/home.png) ![](http://www.wclimb.site/cdn/search.png)\n\n### 登录页\n\n![](http://www.wclimb.site/cdn/login.png)\n\n### 个人中心页\n\n![](http://www.wclimb.site/cdn/personal.png) ![](http://www.wclimb.site/cdn/personal1.png)\n\n\n### 详情页\n\n![](http://www.wclimb.site/cdn/detail.png)\n\n\n## 后台演示\n\n![](http://www.wclimb.site/cdn/admin.gif)\n\n## 有问题欢迎反馈\n\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(875246904#qq.com, 把#换成@)\n* QQ: 875246904\n* weibo: [@wclimb](http://weibo.com/u/3966368179)\n\n\n## 目录结构\n\n```\n|-- build                            // webpack配置文件\n|-- config                           // 项目打包路径\n|-- src                              // 源码目录\n|   |-- assets                       // 图片文件\n|   |-- base                   \t\t // 移动端适配\n|   |-- components                   // 组件\n|   |-- data                         // 接口\n|   |-- router\t\t\t\t\t\t // 路由配置\n|   |-- store                        // 状态管理\n|   |-- style                        // 样式\n|    \tApp.vue                      // 页面入口文件\n|    \tmain.js                      // 程序入口文件\n|-- static                           // 静态资源\n|-- .babelrc                         // ES6语法编译配置\n|-- .editorconfig                    // 代码编写规格\n|-- .gitignore                       // git忽略的文件\n|-- .postcssrc.js                    // post-loader的插件配置文件\n|-- index.html                       // 入口html文件\n|-- package.json                     // 项目及工具的依赖配置文件\n\n```\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","source":"_posts/使用-Vue2-js-Node-js-搭建一个小型的全栈项目.md","raw":"---\ntitle: 使用 Vue2.js + Node.js 搭建一个小型的全栈项目\ndate: 2017-09-08 09:29:14\ntags:\n- Vue\n- Node\n- Koa\n- Mysql\n- javascript\n- 原创\n\ncategories: [javascript,node,vue]\n---\n\n# 写在前面\n\n由于最近公司业务不是很忙，空闲时间比较多，于是就在纠结Vue.js（之前就学习过）和Node.js先专研哪个比较好，最终选择了先玩玩Node.js。经过一段时间的学习，就有了教程 [Node+Koa2+Mysql 搭建简易博客](http://www.wclimb.site/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/)  [GitHub地址](https://github.com/wclimb/Koa2-blog)，想要了解的可以先看看，个人水平有限，希望可以帮到你。\n大概过来一个多月，我决定两路开工。使用Node.js给前端写接口，配备后台管理功能，先把后台搭建好。大概几天过后，后台一些简单的功能实现后，就开始用Vue.js开始搭建前台，也一直在想做点什么比较好，于是就做了个豆瓣评分类似的项目。\n\n> 前端项目地址 https://github.com/wclimb/vue-video  \n> 前端预览 http://video.wclimb.site\n\n> 后端项目地址 https://github.com/wclimb/video-admin  \n> 后台管理 http://vue.wclimb.site\n\n> API接口地址 https://github.com/wclimb/video-admin/blob/master/API.md\n\n## 技术栈(Vue2.js + Node.js 全栈项目)\n\n> 由于页面不是很多，vuex用的不多，关键掌握怎么实现就好了\n\n`vue2` + `vuex` + `vue-router` + `webpack` + `fetch` + `sass` + `flex` + `svg` + `阿里字体图标`\n\n## 运行\n\n```\ngit clone https://github.com/wclimb/vue-video.git\n\ncd vue-video\n\nnpm install  建议使用淘宝镜像(https://npm.taobao.org/) =>  cnpm i\n\nnpm run dev (运行项目)\n\nnpm run build (打包项目)\n\nps: 如果打包之后文件运行不了，请打包之前把路由的 mode:'history'注释掉，该功能去掉了url中丑陋的 # 号\n\n```\n<!-- more -->\n## 功能\n\n* 1. 注册登录登出 + 验证码 密码检测，如果用户不存在则自动创建\n* 2. 检测是否登录，如果没有登录则不允许评论和评价\n* 3. 可以上传影片到后台，进行前台展示\n* 4. 评分功能，初始化评分可以自由设置，如果没有人like则默认显示原始评分，如果有则计算当前vide的评分\n* 5. 修改用户名，检测用户名是否跟其他人重复\n* 6. 上传头像，默认没有头像\n* 7. 评论功能，评论之后可以在个人中心展示，并且可以删除\n* 8. 搜索功能，可以搜索存在的影片，如果没有则显示无结果\n* 9. 自己喜欢的video和评论的内容会在个人中心显示\n\n综上：\n\n- [x] 注册\n- [x] 登录\n- [x] 登出\n- [x] 验证码\n- [x] 详情页\n- [x] 分类\n- [x] 分类影视列表\n- [x] 修改用户名\n- [x] 上传头像\n- [x] 评论\n- [x] 删除评论\n- [x] 搜索\n- [x] 个人中心数据\n\n如果觉得对你有帮助还望关注一下，有问题可以即使提哟，觉得不错的话`star`一下也是可以的哟\n\n## 前端线上地址\n\n项目是手机端的，请使用谷歌浏览器手机预览模式\n\n> 首页默认一种类别只显示10个，可以查看更多显示全部 \n\n预览：[vue-video](http://video.wclimb.site)\n\n手机扫描图下二维码预览\n\n![](http://www.wclimb.site/cdn/1504574571.png)\n\n## 后端线上地址\n\n技术栈：`Node` + `Koa2` + `Mysql` \n预览：[video-admin](http://vue.wclimb.site)\nGitHub: [管理后台](https://github.com/wclimb/video-admin)\n\n## 前端演示\n\n![](http://www.wclimb.site/cdn/vue1.gif)\n\n### 主页\n\n![](http://www.wclimb.site/cdn/home.png) ![](http://www.wclimb.site/cdn/search.png)\n\n### 登录页\n\n![](http://www.wclimb.site/cdn/login.png)\n\n### 个人中心页\n\n![](http://www.wclimb.site/cdn/personal.png) ![](http://www.wclimb.site/cdn/personal1.png)\n\n\n### 详情页\n\n![](http://www.wclimb.site/cdn/detail.png)\n\n\n## 后台演示\n\n![](http://www.wclimb.site/cdn/admin.gif)\n\n## 有问题欢迎反馈\n\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\n\n* 邮件(875246904#qq.com, 把#换成@)\n* QQ: 875246904\n* weibo: [@wclimb](http://weibo.com/u/3966368179)\n\n\n## 目录结构\n\n```\n|-- build                            // webpack配置文件\n|-- config                           // 项目打包路径\n|-- src                              // 源码目录\n|   |-- assets                       // 图片文件\n|   |-- base                   \t\t // 移动端适配\n|   |-- components                   // 组件\n|   |-- data                         // 接口\n|   |-- router\t\t\t\t\t\t // 路由配置\n|   |-- store                        // 状态管理\n|   |-- style                        // 样式\n|    \tApp.vue                      // 页面入口文件\n|    \tmain.js                      // 程序入口文件\n|-- static                           // 静态资源\n|-- .babelrc                         // ES6语法编译配置\n|-- .editorconfig                    // 代码编写规格\n|-- .gitignore                       // git忽略的文件\n|-- .postcssrc.js                    // post-loader的插件配置文件\n|-- index.html                       // 入口html文件\n|-- package.json                     // 项目及工具的依赖配置文件\n\n```\n\n## 个人小程序\n\n![img](http://www.wclimb.site/cdn/xcx.jpeg)","slug":"使用-Vue2-js-Node-js-搭建一个小型的全栈项目","published":1,"updated":"2019-06-06T01:06:26.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9j001f59x3xapspihs","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>由于最近公司业务不是很忙，空闲时间比较多，于是就在纠结Vue.js（之前就学习过）和Node.js先专研哪个比较好，最终选择了先玩玩Node.js。经过一段时间的学习，就有了教程 <a href=\"http://www.wclimb.site/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/\">Node+Koa2+Mysql 搭建简易博客</a>  <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">GitHub地址</a>，想要了解的可以先看看，个人水平有限，希望可以帮到你。<br>大概过来一个多月，我决定两路开工。使用Node.js给前端写接口，配备后台管理功能，先把后台搭建好。大概几天过后，后台一些简单的功能实现后，就开始用Vue.js开始搭建前台，也一直在想做点什么比较好，于是就做了个豆瓣评分类似的项目。</p>\n<blockquote>\n<p>前端项目地址 <a href=\"https://github.com/wclimb/vue-video\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/vue-video</a><br>前端预览 <a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://video.wclimb.site</a></p>\n</blockquote>\n<blockquote>\n<p>后端项目地址 <a href=\"https://github.com/wclimb/video-admin\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/video-admin</a><br>后台管理 <a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://vue.wclimb.site</a></p>\n</blockquote>\n<blockquote>\n<p>API接口地址 <a href=\"https://github.com/wclimb/video-admin/blob/master/API.md\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/video-admin/blob/master/API.md</a></p>\n</blockquote>\n<h2 id=\"技术栈-Vue2-js-Node-js-全栈项目\"><a href=\"#技术栈-Vue2-js-Node-js-全栈项目\" class=\"headerlink\" title=\"技术栈(Vue2.js + Node.js 全栈项目)\"></a>技术栈(Vue2.js + Node.js 全栈项目)</h2><blockquote>\n<p>由于页面不是很多，vuex用的不多，关键掌握怎么实现就好了</p>\n</blockquote>\n<p><code>vue2</code> + <code>vuex</code> + <code>vue-router</code> + <code>webpack</code> + <code>fetch</code> + <code>sass</code> + <code>flex</code> + <code>svg</code> + <code>阿里字体图标</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wclimb/vue-video.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd vue-video</span><br><span class=\"line\"></span><br><span class=\"line\">npm install  建议使用淘宝镜像(https://npm.taobao.org/) =&gt;  cnpm i</span><br><span class=\"line\"></span><br><span class=\"line\">npm run dev (运行项目)</span><br><span class=\"line\"></span><br><span class=\"line\">npm run build (打包项目)</span><br><span class=\"line\"></span><br><span class=\"line\">ps: 如果打包之后文件运行不了，请打包之前把路由的 mode:&apos;history&apos;注释掉，该功能去掉了url中丑陋的 # 号</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li><ol>\n<li>注册登录登出 + 验证码 密码检测，如果用户不存在则自动创建</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>检测是否登录，如果没有登录则不允许评论和评价</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>可以上传影片到后台，进行前台展示</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>评分功能，初始化评分可以自由设置，如果没有人like则默认显示原始评分，如果有则计算当前vide的评分</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>修改用户名，检测用户名是否跟其他人重复</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>上传头像，默认没有头像</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>评论功能，评论之后可以在个人中心展示，并且可以删除</li>\n</ol>\n</li>\n<li><ol start=\"8\">\n<li>搜索功能，可以搜索存在的影片，如果没有则显示无结果</li>\n</ol>\n</li>\n<li><ol start=\"9\">\n<li>自己喜欢的video和评论的内容会在个人中心显示</li>\n</ol>\n</li>\n</ul>\n<p>综上：</p>\n<ul>\n<li>[x] 注册</li>\n<li>[x] 登录</li>\n<li>[x] 登出</li>\n<li>[x] 验证码</li>\n<li>[x] 详情页</li>\n<li>[x] 分类</li>\n<li>[x] 分类影视列表</li>\n<li>[x] 修改用户名</li>\n<li>[x] 上传头像</li>\n<li>[x] 评论</li>\n<li>[x] 删除评论</li>\n<li>[x] 搜索</li>\n<li>[x] 个人中心数据</li>\n</ul>\n<p>如果觉得对你有帮助还望关注一下，有问题可以即使提哟，觉得不错的话<code>star</code>一下也是可以的哟</p>\n<h2 id=\"前端线上地址\"><a href=\"#前端线上地址\" class=\"headerlink\" title=\"前端线上地址\"></a>前端线上地址</h2><p>项目是手机端的，请使用谷歌浏览器手机预览模式</p>\n<blockquote>\n<p>首页默认一种类别只显示10个，可以查看更多显示全部 </p>\n</blockquote>\n<p>预览：<a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">vue-video</a></p>\n<p>手机扫描图下二维码预览</p>\n<p><img src=\"http://www.wclimb.site/cdn/1504574571.png\" alt></p>\n<h2 id=\"后端线上地址\"><a href=\"#后端线上地址\" class=\"headerlink\" title=\"后端线上地址\"></a>后端线上地址</h2><p>技术栈：<code>Node</code> + <code>Koa2</code> + <code>Mysql</code><br>预览：<a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">video-admin</a><br>GitHub: <a href=\"https://github.com/wclimb/video-admin\" target=\"_blank\" rel=\"noopener\">管理后台</a></p>\n<h2 id=\"前端演示\"><a href=\"#前端演示\" class=\"headerlink\" title=\"前端演示\"></a>前端演示</h2><p><img src=\"http://www.wclimb.site/cdn/vue1.gif\" alt></p>\n<h3 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h3><p><img src=\"http://www.wclimb.site/cdn/home.png\" alt> <img src=\"http://www.wclimb.site/cdn/search.png\" alt></p>\n<h3 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h3><p><img src=\"http://www.wclimb.site/cdn/login.png\" alt></p>\n<h3 id=\"个人中心页\"><a href=\"#个人中心页\" class=\"headerlink\" title=\"个人中心页\"></a>个人中心页</h3><p><img src=\"http://www.wclimb.site/cdn/personal.png\" alt> <img src=\"http://www.wclimb.site/cdn/personal1.png\" alt></p>\n<h3 id=\"详情页\"><a href=\"#详情页\" class=\"headerlink\" title=\"详情页\"></a>详情页</h3><p><img src=\"http://www.wclimb.site/cdn/detail.png\" alt></p>\n<h2 id=\"后台演示\"><a href=\"#后台演示\" class=\"headerlink\" title=\"后台演示\"></a>后台演示</h2><p><img src=\"http://www.wclimb.site/cdn/admin.gif\" alt></p>\n<h2 id=\"有问题欢迎反馈\"><a href=\"#有问题欢迎反馈\" class=\"headerlink\" title=\"有问题欢迎反馈\"></a>有问题欢迎反馈</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(875246904#qq.com, 把#换成@)</li>\n<li>QQ: 875246904</li>\n<li>weibo: <a href=\"http://weibo.com/u/3966368179\" target=\"_blank\" rel=\"noopener\">@wclimb</a></li>\n</ul>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- build                            // webpack配置文件</span><br><span class=\"line\">|-- config                           // 项目打包路径</span><br><span class=\"line\">|-- src                              // 源码目录</span><br><span class=\"line\">|   |-- assets                       // 图片文件</span><br><span class=\"line\">|   |-- base                   \t\t // 移动端适配</span><br><span class=\"line\">|   |-- components                   // 组件</span><br><span class=\"line\">|   |-- data                         // 接口</span><br><span class=\"line\">|   |-- router\t\t\t\t\t\t // 路由配置</span><br><span class=\"line\">|   |-- store                        // 状态管理</span><br><span class=\"line\">|   |-- style                        // 样式</span><br><span class=\"line\">|    \tApp.vue                      // 页面入口文件</span><br><span class=\"line\">|    \tmain.js                      // 程序入口文件</span><br><span class=\"line\">|-- static                           // 静态资源</span><br><span class=\"line\">|-- .babelrc                         // ES6语法编译配置</span><br><span class=\"line\">|-- .editorconfig                    // 代码编写规格</span><br><span class=\"line\">|-- .gitignore                       // git忽略的文件</span><br><span class=\"line\">|-- .postcssrc.js                    // post-loader的插件配置文件</span><br><span class=\"line\">|-- index.html                       // 入口html文件</span><br><span class=\"line\">|-- package.json                     // 项目及工具的依赖配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>由于最近公司业务不是很忙，空闲时间比较多，于是就在纠结Vue.js（之前就学习过）和Node.js先专研哪个比较好，最终选择了先玩玩Node.js。经过一段时间的学习，就有了教程 <a href=\"http://www.wclimb.site/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/\">Node+Koa2+Mysql 搭建简易博客</a>  <a href=\"https://github.com/wclimb/Koa2-blog\" target=\"_blank\" rel=\"noopener\">GitHub地址</a>，想要了解的可以先看看，个人水平有限，希望可以帮到你。<br>大概过来一个多月，我决定两路开工。使用Node.js给前端写接口，配备后台管理功能，先把后台搭建好。大概几天过后，后台一些简单的功能实现后，就开始用Vue.js开始搭建前台，也一直在想做点什么比较好，于是就做了个豆瓣评分类似的项目。</p>\n<blockquote>\n<p>前端项目地址 <a href=\"https://github.com/wclimb/vue-video\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/vue-video</a><br>前端预览 <a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://video.wclimb.site</a></p>\n</blockquote>\n<blockquote>\n<p>后端项目地址 <a href=\"https://github.com/wclimb/video-admin\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/video-admin</a><br>后台管理 <a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">http://vue.wclimb.site</a></p>\n</blockquote>\n<blockquote>\n<p>API接口地址 <a href=\"https://github.com/wclimb/video-admin/blob/master/API.md\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/video-admin/blob/master/API.md</a></p>\n</blockquote>\n<h2 id=\"技术栈-Vue2-js-Node-js-全栈项目\"><a href=\"#技术栈-Vue2-js-Node-js-全栈项目\" class=\"headerlink\" title=\"技术栈(Vue2.js + Node.js 全栈项目)\"></a>技术栈(Vue2.js + Node.js 全栈项目)</h2><blockquote>\n<p>由于页面不是很多，vuex用的不多，关键掌握怎么实现就好了</p>\n</blockquote>\n<p><code>vue2</code> + <code>vuex</code> + <code>vue-router</code> + <code>webpack</code> + <code>fetch</code> + <code>sass</code> + <code>flex</code> + <code>svg</code> + <code>阿里字体图标</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/wclimb/vue-video.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd vue-video</span><br><span class=\"line\"></span><br><span class=\"line\">npm install  建议使用淘宝镜像(https://npm.taobao.org/) =&gt;  cnpm i</span><br><span class=\"line\"></span><br><span class=\"line\">npm run dev (运行项目)</span><br><span class=\"line\"></span><br><span class=\"line\">npm run build (打包项目)</span><br><span class=\"line\"></span><br><span class=\"line\">ps: 如果打包之后文件运行不了，请打包之前把路由的 mode:&apos;history&apos;注释掉，该功能去掉了url中丑陋的 # 号</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li><ol>\n<li>注册登录登出 + 验证码 密码检测，如果用户不存在则自动创建</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>检测是否登录，如果没有登录则不允许评论和评价</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>可以上传影片到后台，进行前台展示</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>评分功能，初始化评分可以自由设置，如果没有人like则默认显示原始评分，如果有则计算当前vide的评分</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>修改用户名，检测用户名是否跟其他人重复</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>上传头像，默认没有头像</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>评论功能，评论之后可以在个人中心展示，并且可以删除</li>\n</ol>\n</li>\n<li><ol start=\"8\">\n<li>搜索功能，可以搜索存在的影片，如果没有则显示无结果</li>\n</ol>\n</li>\n<li><ol start=\"9\">\n<li>自己喜欢的video和评论的内容会在个人中心显示</li>\n</ol>\n</li>\n</ul>\n<p>综上：</p>\n<ul>\n<li>[x] 注册</li>\n<li>[x] 登录</li>\n<li>[x] 登出</li>\n<li>[x] 验证码</li>\n<li>[x] 详情页</li>\n<li>[x] 分类</li>\n<li>[x] 分类影视列表</li>\n<li>[x] 修改用户名</li>\n<li>[x] 上传头像</li>\n<li>[x] 评论</li>\n<li>[x] 删除评论</li>\n<li>[x] 搜索</li>\n<li>[x] 个人中心数据</li>\n</ul>\n<p>如果觉得对你有帮助还望关注一下，有问题可以即使提哟，觉得不错的话<code>star</code>一下也是可以的哟</p>\n<h2 id=\"前端线上地址\"><a href=\"#前端线上地址\" class=\"headerlink\" title=\"前端线上地址\"></a>前端线上地址</h2><p>项目是手机端的，请使用谷歌浏览器手机预览模式</p>\n<blockquote>\n<p>首页默认一种类别只显示10个，可以查看更多显示全部 </p>\n</blockquote>\n<p>预览：<a href=\"http://video.wclimb.site\" target=\"_blank\" rel=\"noopener\">vue-video</a></p>\n<p>手机扫描图下二维码预览</p>\n<p><img src=\"http://www.wclimb.site/cdn/1504574571.png\" alt></p>\n<h2 id=\"后端线上地址\"><a href=\"#后端线上地址\" class=\"headerlink\" title=\"后端线上地址\"></a>后端线上地址</h2><p>技术栈：<code>Node</code> + <code>Koa2</code> + <code>Mysql</code><br>预览：<a href=\"http://vue.wclimb.site\" target=\"_blank\" rel=\"noopener\">video-admin</a><br>GitHub: <a href=\"https://github.com/wclimb/video-admin\" target=\"_blank\" rel=\"noopener\">管理后台</a></p>\n<h2 id=\"前端演示\"><a href=\"#前端演示\" class=\"headerlink\" title=\"前端演示\"></a>前端演示</h2><p><img src=\"http://www.wclimb.site/cdn/vue1.gif\" alt></p>\n<h3 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h3><p><img src=\"http://www.wclimb.site/cdn/home.png\" alt> <img src=\"http://www.wclimb.site/cdn/search.png\" alt></p>\n<h3 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h3><p><img src=\"http://www.wclimb.site/cdn/login.png\" alt></p>\n<h3 id=\"个人中心页\"><a href=\"#个人中心页\" class=\"headerlink\" title=\"个人中心页\"></a>个人中心页</h3><p><img src=\"http://www.wclimb.site/cdn/personal.png\" alt> <img src=\"http://www.wclimb.site/cdn/personal1.png\" alt></p>\n<h3 id=\"详情页\"><a href=\"#详情页\" class=\"headerlink\" title=\"详情页\"></a>详情页</h3><p><img src=\"http://www.wclimb.site/cdn/detail.png\" alt></p>\n<h2 id=\"后台演示\"><a href=\"#后台演示\" class=\"headerlink\" title=\"后台演示\"></a>后台演示</h2><p><img src=\"http://www.wclimb.site/cdn/admin.gif\" alt></p>\n<h2 id=\"有问题欢迎反馈\"><a href=\"#有问题欢迎反馈\" class=\"headerlink\" title=\"有问题欢迎反馈\"></a>有问题欢迎反馈</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>\n<ul>\n<li>邮件(875246904#qq.com, 把#换成@)</li>\n<li>QQ: 875246904</li>\n<li>weibo: <a href=\"http://weibo.com/u/3966368179\" target=\"_blank\" rel=\"noopener\">@wclimb</a></li>\n</ul>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- build                            // webpack配置文件</span><br><span class=\"line\">|-- config                           // 项目打包路径</span><br><span class=\"line\">|-- src                              // 源码目录</span><br><span class=\"line\">|   |-- assets                       // 图片文件</span><br><span class=\"line\">|   |-- base                   \t\t // 移动端适配</span><br><span class=\"line\">|   |-- components                   // 组件</span><br><span class=\"line\">|   |-- data                         // 接口</span><br><span class=\"line\">|   |-- router\t\t\t\t\t\t // 路由配置</span><br><span class=\"line\">|   |-- store                        // 状态管理</span><br><span class=\"line\">|   |-- style                        // 样式</span><br><span class=\"line\">|    \tApp.vue                      // 页面入口文件</span><br><span class=\"line\">|    \tmain.js                      // 程序入口文件</span><br><span class=\"line\">|-- static                           // 静态资源</span><br><span class=\"line\">|-- .babelrc                         // ES6语法编译配置</span><br><span class=\"line\">|-- .editorconfig                    // 代码编写规格</span><br><span class=\"line\">|-- .gitignore                       // git忽略的文件</span><br><span class=\"line\">|-- .postcssrc.js                    // post-loader的插件配置文件</span><br><span class=\"line\">|-- index.html                       // 入口html文件</span><br><span class=\"line\">|-- package.json                     // 项目及工具的依赖配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人小程序\"><a href=\"#个人小程序\" class=\"headerlink\" title=\"个人小程序\"></a>个人小程序</h2><p><img src=\"http://www.wclimb.site/cdn/xcx.jpeg\" alt=\"img\"></p>"},{"title":"读zepto源码，封装自己的zepto库 （三）","date":"2017-07-18T01:55:40.000Z","_content":"\n本篇着重讲选择器$()选择器\n本例我们主要修改`wclimb.init=function(selector){}`里面的代码\n将wclimb.init代码修改为：\n```js\nvar dom\nif (!selector) return wclimb.Z()\nelse if (typeof selector == 'string') {\n\tdom = wclimb.qsa(document, selector)\n}\nelse if (typeof selector == 'function'){\n\treturn wclimb.ready(selector)\n}\nelse{\n\tif (isArray(selector)) {\n\t\tdom = compact(selector) \n\t}\n\telse if (wclimb.isZ(selector)) return selector\t\t\n\telse{\n\t\tif (isObject(selector)) dom = [selector], selector = null ;\n\t\telse dom=wclimb.qsa(document,selector)\n\t}\n\n}\nreturn wclimb.Z(dom, selector)\n\n```\n<!-- more -->\n* 首先判断是否存在selector，如果不存在则直接return\n* 然后判断是否是字符串类型，如`$('a b')`，将选择的元素保存起来\n* 如果是函数则`return wclimb.ready(selector)`就是我们经常用的`$(function(){})`\n* 后面判断是否是当前对象的实例（用了isZ方法）还有判断是否是数组或对象\n\n我们先在函数顶部添加如下\n```js\nemptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter\nslice = emptyArray.slice\nfunction compact(array) { return filter.call(array, function(item){ return item != null }) }\n```\nemptyArray = []，避免出现每次都重复创建的一个数组[]\n然后拿到数组里面的方法\ncompact就是一个数组筛选，如果某个元素不存在$([1,2,,,4]);只会创建一个[1,2,4]的数组\n\n## wclimb.qsa方法\n```js\nwclimb.qsa=function(element, selector){\n\tvar found,\n    maybeID = selector[0] == '#',\n    maybeClass = !maybeID && selector[0] == '.',\n    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n    isSimple = /^[\\w-]*$/.test(nameOnly)\n\n\treturn (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\n\t  (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n\t  slice.call(\n\t    isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n\t    maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n\t    element.getElementsByTagName(selector) : // Or a tag\n\t    element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n\t)\n}\n```\n这里我直接用了zepto的代码\n`wclimb.init=function(selector){}`里的代码还使用了判断数据类型的代码`isArray``isObject`\n\n## 判断数据类型\n\n在函数外面添加如下代码来进行数据类型判断\n\n```js\n// 判断类型\nvar obj_i={};\n['Boolean', 'Number','String', 'Function', 'Array' ,'Date', 'RegExp', 'Object' ,'Error'].forEach(function(el,idx){\n\tobj_i[\"[object \" + el + \"]\"] = el.toLowerCase()\n})\nfunction type(obj) {\n    return obj == null ? String(obj) :\n    obj_i[Object.prototype.toString.call(obj)] || \"object\"\n}\nfunction isObject(obj) { return type(obj) == \"object\" }\t\nfunction isArray(obj) { return type(obj) == \"array\" }\nfunction isString(obj) { return type(obj) == \"string\" }\n\n```\n\n## wclimb.ready函数\n在外面设置如下函数\n```js\nwclimb.ready = function(fn) {\n    document.addEventListener('DOMContentLoaded',function() {\n        fn && fn();\n    },false);\n    document.removeEventListener('DOMContentLoaded',fn,true);\n};\n```\n## wclimb.isZ函数\n\n下面代码判断`object`是不是`wclimb.Z`的实例\n```js\nwclimb.isZ = function(object) {\n    return object instanceof wclimb.Z\n}\n```\n现在试试代码吧，我们顺便把addClass里判断hasClass代码注释去掉了\n\n```js\n<script>\n\t// ready\n\t$(function(){\n\t\talert(1)\n\t})\n\t// addClass\n\t$('p').addClass('a b')\n\t// 实例\n\tconsole.log($(this))\n\t// 数组\n\t$([1,23,3,,4])\n</script>\n```\n\n## 全部代码\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\temptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter\n\tslice = emptyArray.slice\n\tfunction compact(array) { return filter.call(array, function(item){ return item != null }) }\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\t\n\twclimb.init = function(selector){\n\t\tvar dom\n\t\tif (!selector) return wclimb.Z()\n\t\telse if (typeof selector == 'string') {\n\t\t\tdom = wclimb.qsa(document, selector)\n\t\t}\n\t\telse if (typeof selector == 'function'){\n\t\t\treturn wclimb.ready(selector)\n\t\t}\n\t\telse{\n\t\t\tif (isArray(selector)) {\n\t\t\t\tdom = compact(selector) \n\t\t\t}\n\t\t\telse if (wclimb.isZ(selector)) return selector\t\t\n\t\t\telse{\n\t\t\t\tif (isObject(selector)) dom = [selector], selector = null ;\n\t\t\t\telse dom=wclimb.qsa(document,selector)\n\t\t\t}\n\n\t\t}\n\t\treturn wclimb.Z(dom, selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\n\tfunction className(node, value){\n\t   var klass = node.className || ''\t\n\t       \n\t   if (value === undefined) return klass\n\t   node.className = value  \n\t}\n\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\teach:function(callback){\n\t\t\t[].every.call(this, function(el, idx){\n\t        return callback.call(el, idx, el) !== false\n\t      })\n\t      return this;\n\t\t},\n\t\taddClass:function(name){\n\t\t\tif (!name) return this\n\t\t      return this.each(function(el,idx){\n\t\t        if (!('className' in this)) return\n\t\t        classList = [];\n\n\t\t        var cls = className(this) \n\t\t        \n\t\t        name.split(/\\s+/g).forEach(function(klass){\n\n\t\t          if (!$(this).hasClass(klass))\n\t\t           classList.push(klass)\n  \n\t\t        }, this)\n\n\t\t        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n\n\t\t      })\n\t\t\t},\n\t\t\thasClass : function(cls) {\n\t\t\t    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\t\t\t    for (var i = 0; i < this.length; i++) {\n\t\t\t        if (this[i].className.match(reg)) return true;\n\t\t\t            return false;\n\t\t\t    }\n\t\t\t    return this;\n\t\t\t}\n\t}\n\twclimb.ready = function(fn) {\n\t    document.addEventListener('DOMContentLoaded',function() {\n\t        fn && fn();\n\t    },false);\n\t    document.removeEventListener('DOMContentLoaded',fn,true);\n\t};\n\n\twclimb.qsa=function(element, selector){\n\t\tvar found,\n\t    maybeID = selector[0] == '#',\n\t    maybeClass = !maybeID && selector[0] == '.',\n\t    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n\t    isSimple = /^[\\w-]*$/.test(nameOnly)\n\n\t\treturn (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n\t\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\n\t\t  (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n\t\t  slice.call(\n\t\t    isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n\t\t    maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n\t\t    element.getElementsByTagName(selector) : // Or a tag\n\t\t    element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n\t\t)\n\t}\n\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\twclimb.isZ = function(object) {\n\t    return object instanceof wclimb.Z\n\t}\n\t// 判断类型\n\tvar obj_i={};\n\t['Boolean', 'Number','String', 'Function', 'Array' ,'Date', 'RegExp', 'Object' ,'Error'].forEach(function(el,idx){\n\t\tobj_i[\"[object \" + el + \"]\"] = el.toLowerCase()\n\t})\n\tfunction type(obj) {\n\t    return obj == null ? String(obj) :\n\t    obj_i[Object.prototype.toString.call(obj)] || \"object\"\n\t}\n\tfunction isObject(obj) { return type(obj) == \"object\" }\t\n\tfunction isArray(obj) { return type(obj) == \"array\" }\n\tfunction isString(obj) { return type(obj) == \"string\" }\n\n\twindow.$ = window.wclimb = $\n\n})()\n```\n\n\n\n\n","source":"_posts/读zepto源码，封装自己的zepto库-（三）.md","raw":"---\ntitle: 读zepto源码，封装自己的zepto库 （三）\ndate: 2017-07-18 09:55:40\ntags:\n- zepto\n- javascript\n- 原创\n---\n\n本篇着重讲选择器$()选择器\n本例我们主要修改`wclimb.init=function(selector){}`里面的代码\n将wclimb.init代码修改为：\n```js\nvar dom\nif (!selector) return wclimb.Z()\nelse if (typeof selector == 'string') {\n\tdom = wclimb.qsa(document, selector)\n}\nelse if (typeof selector == 'function'){\n\treturn wclimb.ready(selector)\n}\nelse{\n\tif (isArray(selector)) {\n\t\tdom = compact(selector) \n\t}\n\telse if (wclimb.isZ(selector)) return selector\t\t\n\telse{\n\t\tif (isObject(selector)) dom = [selector], selector = null ;\n\t\telse dom=wclimb.qsa(document,selector)\n\t}\n\n}\nreturn wclimb.Z(dom, selector)\n\n```\n<!-- more -->\n* 首先判断是否存在selector，如果不存在则直接return\n* 然后判断是否是字符串类型，如`$('a b')`，将选择的元素保存起来\n* 如果是函数则`return wclimb.ready(selector)`就是我们经常用的`$(function(){})`\n* 后面判断是否是当前对象的实例（用了isZ方法）还有判断是否是数组或对象\n\n我们先在函数顶部添加如下\n```js\nemptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter\nslice = emptyArray.slice\nfunction compact(array) { return filter.call(array, function(item){ return item != null }) }\n```\nemptyArray = []，避免出现每次都重复创建的一个数组[]\n然后拿到数组里面的方法\ncompact就是一个数组筛选，如果某个元素不存在$([1,2,,,4]);只会创建一个[1,2,4]的数组\n\n## wclimb.qsa方法\n```js\nwclimb.qsa=function(element, selector){\n\tvar found,\n    maybeID = selector[0] == '#',\n    maybeClass = !maybeID && selector[0] == '.',\n    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n    isSimple = /^[\\w-]*$/.test(nameOnly)\n\n\treturn (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\n\t  (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n\t  slice.call(\n\t    isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n\t    maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n\t    element.getElementsByTagName(selector) : // Or a tag\n\t    element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n\t)\n}\n```\n这里我直接用了zepto的代码\n`wclimb.init=function(selector){}`里的代码还使用了判断数据类型的代码`isArray``isObject`\n\n## 判断数据类型\n\n在函数外面添加如下代码来进行数据类型判断\n\n```js\n// 判断类型\nvar obj_i={};\n['Boolean', 'Number','String', 'Function', 'Array' ,'Date', 'RegExp', 'Object' ,'Error'].forEach(function(el,idx){\n\tobj_i[\"[object \" + el + \"]\"] = el.toLowerCase()\n})\nfunction type(obj) {\n    return obj == null ? String(obj) :\n    obj_i[Object.prototype.toString.call(obj)] || \"object\"\n}\nfunction isObject(obj) { return type(obj) == \"object\" }\t\nfunction isArray(obj) { return type(obj) == \"array\" }\nfunction isString(obj) { return type(obj) == \"string\" }\n\n```\n\n## wclimb.ready函数\n在外面设置如下函数\n```js\nwclimb.ready = function(fn) {\n    document.addEventListener('DOMContentLoaded',function() {\n        fn && fn();\n    },false);\n    document.removeEventListener('DOMContentLoaded',fn,true);\n};\n```\n## wclimb.isZ函数\n\n下面代码判断`object`是不是`wclimb.Z`的实例\n```js\nwclimb.isZ = function(object) {\n    return object instanceof wclimb.Z\n}\n```\n现在试试代码吧，我们顺便把addClass里判断hasClass代码注释去掉了\n\n```js\n<script>\n\t// ready\n\t$(function(){\n\t\talert(1)\n\t})\n\t// addClass\n\t$('p').addClass('a b')\n\t// 实例\n\tconsole.log($(this))\n\t// 数组\n\t$([1,23,3,,4])\n</script>\n```\n\n## 全部代码\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\temptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter\n\tslice = emptyArray.slice\n\tfunction compact(array) { return filter.call(array, function(item){ return item != null }) }\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\t\n\twclimb.init = function(selector){\n\t\tvar dom\n\t\tif (!selector) return wclimb.Z()\n\t\telse if (typeof selector == 'string') {\n\t\t\tdom = wclimb.qsa(document, selector)\n\t\t}\n\t\telse if (typeof selector == 'function'){\n\t\t\treturn wclimb.ready(selector)\n\t\t}\n\t\telse{\n\t\t\tif (isArray(selector)) {\n\t\t\t\tdom = compact(selector) \n\t\t\t}\n\t\t\telse if (wclimb.isZ(selector)) return selector\t\t\n\t\t\telse{\n\t\t\t\tif (isObject(selector)) dom = [selector], selector = null ;\n\t\t\t\telse dom=wclimb.qsa(document,selector)\n\t\t\t}\n\n\t\t}\n\t\treturn wclimb.Z(dom, selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\n\tfunction className(node, value){\n\t   var klass = node.className || ''\t\n\t       \n\t   if (value === undefined) return klass\n\t   node.className = value  \n\t}\n\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\teach:function(callback){\n\t\t\t[].every.call(this, function(el, idx){\n\t        return callback.call(el, idx, el) !== false\n\t      })\n\t      return this;\n\t\t},\n\t\taddClass:function(name){\n\t\t\tif (!name) return this\n\t\t      return this.each(function(el,idx){\n\t\t        if (!('className' in this)) return\n\t\t        classList = [];\n\n\t\t        var cls = className(this) \n\t\t        \n\t\t        name.split(/\\s+/g).forEach(function(klass){\n\n\t\t          if (!$(this).hasClass(klass))\n\t\t           classList.push(klass)\n  \n\t\t        }, this)\n\n\t\t        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n\n\t\t      })\n\t\t\t},\n\t\t\thasClass : function(cls) {\n\t\t\t    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\t\t\t    for (var i = 0; i < this.length; i++) {\n\t\t\t        if (this[i].className.match(reg)) return true;\n\t\t\t            return false;\n\t\t\t    }\n\t\t\t    return this;\n\t\t\t}\n\t}\n\twclimb.ready = function(fn) {\n\t    document.addEventListener('DOMContentLoaded',function() {\n\t        fn && fn();\n\t    },false);\n\t    document.removeEventListener('DOMContentLoaded',fn,true);\n\t};\n\n\twclimb.qsa=function(element, selector){\n\t\tvar found,\n\t    maybeID = selector[0] == '#',\n\t    maybeClass = !maybeID && selector[0] == '.',\n\t    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n\t    isSimple = /^[\\w-]*$/.test(nameOnly)\n\n\t\treturn (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n\t\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\n\t\t  (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n\t\t  slice.call(\n\t\t    isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n\t\t    maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n\t\t    element.getElementsByTagName(selector) : // Or a tag\n\t\t    element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n\t\t)\n\t}\n\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\twclimb.isZ = function(object) {\n\t    return object instanceof wclimb.Z\n\t}\n\t// 判断类型\n\tvar obj_i={};\n\t['Boolean', 'Number','String', 'Function', 'Array' ,'Date', 'RegExp', 'Object' ,'Error'].forEach(function(el,idx){\n\t\tobj_i[\"[object \" + el + \"]\"] = el.toLowerCase()\n\t})\n\tfunction type(obj) {\n\t    return obj == null ? String(obj) :\n\t    obj_i[Object.prototype.toString.call(obj)] || \"object\"\n\t}\n\tfunction isObject(obj) { return type(obj) == \"object\" }\t\n\tfunction isArray(obj) { return type(obj) == \"array\" }\n\tfunction isString(obj) { return type(obj) == \"string\" }\n\n\twindow.$ = window.wclimb = $\n\n})()\n```\n\n\n\n\n","slug":"读zepto源码，封装自己的zepto库-（三）","published":1,"updated":"2019-06-06T01:06:26.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9l001i59x319pdid0t","content":"<p>本篇着重讲选择器$()选择器<br>本例我们主要修改<code>wclimb.init=function(selector){}</code>里面的代码<br>将wclimb.init代码修改为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dom</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!selector) <span class=\"keyword\">return</span> wclimb.Z()</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">\tdom = wclimb.qsa(<span class=\"built_in\">document</span>, selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.ready(selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isArray(selector)) &#123;</span><br><span class=\"line\">\t\tdom = compact(selector) </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wclimb.isZ(selector)) <span class=\"keyword\">return</span> selector\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isObject(selector)) dom = [selector], selector = <span class=\"literal\">null</span> ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> dom=wclimb.qsa(<span class=\"built_in\">document</span>,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> wclimb.Z(dom, selector)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ul>\n<li>首先判断是否存在selector，如果不存在则直接return</li>\n<li>然后判断是否是字符串类型，如<code>$(&#39;a b&#39;)</code>，将选择的元素保存起来</li>\n<li>如果是函数则<code>return wclimb.ready(selector)</code>就是我们经常用的<code>$(function(){})</code></li>\n<li>后面判断是否是当前对象的实例（用了isZ方法）还有判断是否是数组或对象</li>\n</ul>\n<p>我们先在函数顶部添加如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</span><br><span class=\"line\">slice = emptyArray.slice</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compact</span>(<span class=\"params\">array</span>) </span>&#123; <span class=\"keyword\">return</span> filter.call(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123; <span class=\"keyword\">return</span> item != <span class=\"literal\">null</span> &#125;) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>emptyArray = []，避免出现每次都重复创建的一个数组[]<br>然后拿到数组里面的方法<br>compact就是一个数组筛选，如果某个元素不存在$([1,2,,,4]);只会创建一个[1,2,4]的数组</p>\n<h2 id=\"wclimb-qsa方法\"><a href=\"#wclimb-qsa方法\" class=\"headerlink\" title=\"wclimb.qsa方法\"></a>wclimb.qsa方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.qsa=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> found,</span><br><span class=\"line\">    maybeID = selector[<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>,</span><br><span class=\"line\">    maybeClass = !maybeID &amp;&amp; selector[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>,</span><br><span class=\"line\">    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"number\">1</span>) : selector, <span class=\"comment\">// Ensure that a 1 char tag name still gets checked</span></span><br><span class=\"line\">    isSimple = <span class=\"regexp\">/^[\\w-]*$/</span>.test(nameOnly)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"comment\">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class=\"line\">\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class=\"line\">\t  (element.nodeType !== <span class=\"number\">1</span> &amp;&amp; element.nodeType !== <span class=\"number\">9</span> &amp;&amp; element.nodeType !== <span class=\"number\">11</span>) ? [] :</span><br><span class=\"line\">\t  slice.call(</span><br><span class=\"line\">\t    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class=\"line\">\t    maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"comment\">// If it's simple, it could be a class</span></span><br><span class=\"line\">\t    element.getElementsByTagName(selector) : <span class=\"comment\">// Or a tag</span></span><br><span class=\"line\">\t    element.querySelectorAll(selector) <span class=\"comment\">// Or it's not simple, and we need to query all</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我直接用了zepto的代码<br><code>wclimb.init=function(selector){}</code>里的代码还使用了判断数据类型的代码<code>isArray`</code>isObject`</p>\n<h2 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h2><p>在函数外面添加如下代码来进行数据类型判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj_i=&#123;&#125;;</span><br><span class=\"line\">[<span class=\"string\">'Boolean'</span>, <span class=\"string\">'Number'</span>,<span class=\"string\">'String'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'Array'</span> ,<span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Object'</span> ,<span class=\"string\">'Error'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\tobj_i[<span class=\"string\">\"[object \"</span> + el + <span class=\"string\">\"]\"</span>] = el.toLowerCase()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"built_in\">String</span>(obj) :</span><br><span class=\"line\">    obj_i[<span class=\"built_in\">Object</span>.prototype.toString.call(obj)] || <span class=\"string\">\"object\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"object\"</span> &#125;\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"array\"</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"string\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"wclimb-ready函数\"><a href=\"#wclimb-ready函数\" class=\"headerlink\" title=\"wclimb.ready函数\"></a>wclimb.ready函数</h2><p>在外面设置如下函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn &amp;&amp; fn();</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"wclimb-isZ函数\"><a href=\"#wclimb-isZ函数\" class=\"headerlink\" title=\"wclimb.isZ函数\"></a>wclimb.isZ函数</h2><p>下面代码判断<code>object</code>是不是<code>wclimb.Z</code>的实例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.isZ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object <span class=\"keyword\">instanceof</span> wclimb.Z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在试试代码吧，我们顺便把addClass里判断hasClass代码注释去掉了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"comment\">// ready</span></span><br><span class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// addClass</span></span><br><span class=\"line\">\t$(<span class=\"string\">'p'</span>).addClass(<span class=\"string\">'a b'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 实例</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log($(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 数组</span></span><br><span class=\"line\">\t$([<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">3</span>,,<span class=\"number\">4</span>])</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\">\temptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</span><br><span class=\"line\">\tslice = emptyArray.slice</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compact</span>(<span class=\"params\">array</span>) </span>&#123; <span class=\"keyword\">return</span> filter.call(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123; <span class=\"keyword\">return</span> item != <span class=\"literal\">null</span> &#125;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!selector) <span class=\"keyword\">return</span> wclimb.Z()</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">\t\t\tdom = wclimb.qsa(<span class=\"built_in\">document</span>, selector)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> wclimb.ready(selector)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isArray(selector)) &#123;</span><br><span class=\"line\">\t\t\t\tdom = compact(selector) </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wclimb.isZ(selector)) <span class=\"keyword\">return</span> selector\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isObject(selector)) dom = [selector], selector = <span class=\"literal\">null</span> ;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> dom=wclimb.qsa(<span class=\"built_in\">document</span>,selector)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom, selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\t   node.className = value  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">\t      &#125;)</span><br><span class=\"line\">\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\taddClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">\t\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t\t        </span><br><span class=\"line\">\t\t        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t          <span class=\"keyword\">if</span> (!$(<span class=\"keyword\">this</span>).hasClass(klass))</span><br><span class=\"line\">\t\t           classList.push(klass)</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t      &#125;)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\thasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t\t        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t        fn &amp;&amp; fn();</span><br><span class=\"line\">\t    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.qsa=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> found,</span><br><span class=\"line\">\t    maybeID = selector[<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>,</span><br><span class=\"line\">\t    maybeClass = !maybeID &amp;&amp; selector[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>,</span><br><span class=\"line\">\t    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"number\">1</span>) : selector, <span class=\"comment\">// Ensure that a 1 char tag name still gets checked</span></span><br><span class=\"line\">\t    isSimple = <span class=\"regexp\">/^[\\w-]*$/</span>.test(nameOnly)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"comment\">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class=\"line\">\t\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class=\"line\">\t\t  (element.nodeType !== <span class=\"number\">1</span> &amp;&amp; element.nodeType !== <span class=\"number\">9</span> &amp;&amp; element.nodeType !== <span class=\"number\">11</span>) ? [] :</span><br><span class=\"line\">\t\t  slice.call(</span><br><span class=\"line\">\t\t    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class=\"line\">\t\t    maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"comment\">// If it's simple, it could be a class</span></span><br><span class=\"line\">\t\t    element.getElementsByTagName(selector) : <span class=\"comment\">// Or a tag</span></span><br><span class=\"line\">\t\t    element.querySelectorAll(selector) <span class=\"comment\">// Or it's not simple, and we need to query all</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.isZ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> object <span class=\"keyword\">instanceof</span> wclimb.Z</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj_i=&#123;&#125;;</span><br><span class=\"line\">\t[<span class=\"string\">'Boolean'</span>, <span class=\"string\">'Number'</span>,<span class=\"string\">'String'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'Array'</span> ,<span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Object'</span> ,<span class=\"string\">'Error'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\tobj_i[<span class=\"string\">\"[object \"</span> + el + <span class=\"string\">\"]\"</span>] = el.toLowerCase()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"built_in\">String</span>(obj) :</span><br><span class=\"line\">\t    obj_i[<span class=\"built_in\">Object</span>.prototype.toString.call(obj)] || <span class=\"string\">\"object\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"object\"</span> &#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"array\"</span> &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"string\"</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>本篇着重讲选择器$()选择器<br>本例我们主要修改<code>wclimb.init=function(selector){}</code>里面的代码<br>将wclimb.init代码修改为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dom</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!selector) <span class=\"keyword\">return</span> wclimb.Z()</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">\tdom = wclimb.qsa(<span class=\"built_in\">document</span>, selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.ready(selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isArray(selector)) &#123;</span><br><span class=\"line\">\t\tdom = compact(selector) </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wclimb.isZ(selector)) <span class=\"keyword\">return</span> selector\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isObject(selector)) dom = [selector], selector = <span class=\"literal\">null</span> ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> dom=wclimb.qsa(<span class=\"built_in\">document</span>,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> wclimb.Z(dom, selector)</span><br></pre></td></tr></table></figure></p>","more":"<ul>\n<li>首先判断是否存在selector，如果不存在则直接return</li>\n<li>然后判断是否是字符串类型，如<code>$(&#39;a b&#39;)</code>，将选择的元素保存起来</li>\n<li>如果是函数则<code>return wclimb.ready(selector)</code>就是我们经常用的<code>$(function(){})</code></li>\n<li>后面判断是否是当前对象的实例（用了isZ方法）还有判断是否是数组或对象</li>\n</ul>\n<p>我们先在函数顶部添加如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</span><br><span class=\"line\">slice = emptyArray.slice</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compact</span>(<span class=\"params\">array</span>) </span>&#123; <span class=\"keyword\">return</span> filter.call(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123; <span class=\"keyword\">return</span> item != <span class=\"literal\">null</span> &#125;) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>emptyArray = []，避免出现每次都重复创建的一个数组[]<br>然后拿到数组里面的方法<br>compact就是一个数组筛选，如果某个元素不存在$([1,2,,,4]);只会创建一个[1,2,4]的数组</p>\n<h2 id=\"wclimb-qsa方法\"><a href=\"#wclimb-qsa方法\" class=\"headerlink\" title=\"wclimb.qsa方法\"></a>wclimb.qsa方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.qsa=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> found,</span><br><span class=\"line\">    maybeID = selector[<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>,</span><br><span class=\"line\">    maybeClass = !maybeID &amp;&amp; selector[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>,</span><br><span class=\"line\">    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"number\">1</span>) : selector, <span class=\"comment\">// Ensure that a 1 char tag name still gets checked</span></span><br><span class=\"line\">    isSimple = <span class=\"regexp\">/^[\\w-]*$/</span>.test(nameOnly)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"comment\">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class=\"line\">\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class=\"line\">\t  (element.nodeType !== <span class=\"number\">1</span> &amp;&amp; element.nodeType !== <span class=\"number\">9</span> &amp;&amp; element.nodeType !== <span class=\"number\">11</span>) ? [] :</span><br><span class=\"line\">\t  slice.call(</span><br><span class=\"line\">\t    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class=\"line\">\t    maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"comment\">// If it's simple, it could be a class</span></span><br><span class=\"line\">\t    element.getElementsByTagName(selector) : <span class=\"comment\">// Or a tag</span></span><br><span class=\"line\">\t    element.querySelectorAll(selector) <span class=\"comment\">// Or it's not simple, and we need to query all</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我直接用了zepto的代码<br><code>wclimb.init=function(selector){}</code>里的代码还使用了判断数据类型的代码<code>isArray`</code>isObject`</p>\n<h2 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h2><p>在函数外面添加如下代码来进行数据类型判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj_i=&#123;&#125;;</span><br><span class=\"line\">[<span class=\"string\">'Boolean'</span>, <span class=\"string\">'Number'</span>,<span class=\"string\">'String'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'Array'</span> ,<span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Object'</span> ,<span class=\"string\">'Error'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\tobj_i[<span class=\"string\">\"[object \"</span> + el + <span class=\"string\">\"]\"</span>] = el.toLowerCase()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"built_in\">String</span>(obj) :</span><br><span class=\"line\">    obj_i[<span class=\"built_in\">Object</span>.prototype.toString.call(obj)] || <span class=\"string\">\"object\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"object\"</span> &#125;\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"array\"</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"string\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"wclimb-ready函数\"><a href=\"#wclimb-ready函数\" class=\"headerlink\" title=\"wclimb.ready函数\"></a>wclimb.ready函数</h2><p>在外面设置如下函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        fn &amp;&amp; fn();</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"wclimb-isZ函数\"><a href=\"#wclimb-isZ函数\" class=\"headerlink\" title=\"wclimb.isZ函数\"></a>wclimb.isZ函数</h2><p>下面代码判断<code>object</code>是不是<code>wclimb.Z</code>的实例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.isZ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object <span class=\"keyword\">instanceof</span> wclimb.Z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在试试代码吧，我们顺便把addClass里判断hasClass代码注释去掉了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"comment\">// ready</span></span><br><span class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// addClass</span></span><br><span class=\"line\">\t$(<span class=\"string\">'p'</span>).addClass(<span class=\"string\">'a b'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 实例</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log($(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 数组</span></span><br><span class=\"line\">\t$([<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">3</span>,,<span class=\"number\">4</span>])</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\">\temptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</span><br><span class=\"line\">\tslice = emptyArray.slice</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compact</span>(<span class=\"params\">array</span>) </span>&#123; <span class=\"keyword\">return</span> filter.call(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123; <span class=\"keyword\">return</span> item != <span class=\"literal\">null</span> &#125;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!selector) <span class=\"keyword\">return</span> wclimb.Z()</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">\t\t\tdom = wclimb.qsa(<span class=\"built_in\">document</span>, selector)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> wclimb.ready(selector)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isArray(selector)) &#123;</span><br><span class=\"line\">\t\t\t\tdom = compact(selector) </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wclimb.isZ(selector)) <span class=\"keyword\">return</span> selector\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isObject(selector)) dom = [selector], selector = <span class=\"literal\">null</span> ;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> dom=wclimb.qsa(<span class=\"built_in\">document</span>,selector)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom, selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\t   node.className = value  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">\t      &#125;)</span><br><span class=\"line\">\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\taddClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">\t\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t\t        </span><br><span class=\"line\">\t\t        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t          <span class=\"keyword\">if</span> (!$(<span class=\"keyword\">this</span>).hasClass(klass))</span><br><span class=\"line\">\t\t           classList.push(klass)</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t      &#125;)</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\thasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t\t        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t        fn &amp;&amp; fn();</span><br><span class=\"line\">\t    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'DOMContentLoaded'</span>,fn,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.qsa=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> found,</span><br><span class=\"line\">\t    maybeID = selector[<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>,</span><br><span class=\"line\">\t    maybeClass = !maybeID &amp;&amp; selector[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>,</span><br><span class=\"line\">\t    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"number\">1</span>) : selector, <span class=\"comment\">// Ensure that a 1 char tag name still gets checked</span></span><br><span class=\"line\">\t    isSimple = <span class=\"regexp\">/^[\\w-]*$/</span>.test(nameOnly)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"comment\">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class=\"line\">\t\t  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class=\"line\">\t\t  (element.nodeType !== <span class=\"number\">1</span> &amp;&amp; element.nodeType !== <span class=\"number\">9</span> &amp;&amp; element.nodeType !== <span class=\"number\">11</span>) ? [] :</span><br><span class=\"line\">\t\t  slice.call(</span><br><span class=\"line\">\t\t    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class=\"line\">\t\t    maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"comment\">// If it's simple, it could be a class</span></span><br><span class=\"line\">\t\t    element.getElementsByTagName(selector) : <span class=\"comment\">// Or a tag</span></span><br><span class=\"line\">\t\t    element.querySelectorAll(selector) <span class=\"comment\">// Or it's not simple, and we need to query all</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.isZ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> object <span class=\"keyword\">instanceof</span> wclimb.Z</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj_i=&#123;&#125;;</span><br><span class=\"line\">\t[<span class=\"string\">'Boolean'</span>, <span class=\"string\">'Number'</span>,<span class=\"string\">'String'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'Array'</span> ,<span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Object'</span> ,<span class=\"string\">'Error'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\tobj_i[<span class=\"string\">\"[object \"</span> + el + <span class=\"string\">\"]\"</span>] = el.toLowerCase()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"built_in\">String</span>(obj) :</span><br><span class=\"line\">\t    obj_i[<span class=\"built_in\">Object</span>.prototype.toString.call(obj)] || <span class=\"string\">\"object\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"object\"</span> &#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"array\"</span> &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">obj</span>) </span>&#123; <span class=\"keyword\">return</span> type(obj) == <span class=\"string\">\"string\"</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>"},{"title":"Vue之vuex源码分析","date":"2019-10-14T01:27:53.000Z","_content":"\n## vuex使用\n\n当前vuex版本：3.1.0\n\n```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\nconst state = {\n  test: 1\n}\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\nexport default new Vuex.Store({\n  state,\n  actions,\n  mutations,\n})\n```\n\n```js\nimport Vue from 'vue';\nimport store from './store';\n\nnew Vue({\n  el: '#app',\n  store,\n  template: '<App/>',\n  components: { App }\n});\n```\n首先我们先注册`vuex`，然后设置一些`state/mutation/actions` 实例化出来，最后交给 `Vue` 处理\n<!-- more -->\n\n\n对 `API` 不熟悉的同学可以移步 [vuex](https://vuex.vuejs.org/zh/)\n\n\n## 注册\n\n用法我们知道了，那么问题来了，`Vuex`是怎样把store注入到Vue实例中去的呢？\n\n我们知道使用插件一般都需要`vue.use()`，传入的参数内部必须要提供一个`install`的方法，上面我们使用`vue.use(vuex)`去安装，那么vuex内部肯定是暴露了应该`install`的方法得\n\nvuex install的实现\n\nvuex/index.js  [源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/index.js)\n```js\nimport { Store, install } from './store'\nimport { mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers } from './helpers'\n\nexport default {\n  Store,\n  install,\n  version: '__VERSION__',\n  mapState,\n  mapMutations,\n  mapGetters,\n  mapActions,\n  createNamespacedHelpers\n}\n```\ninstall方法\n```js\nexport function install (_Vue) {\n  // 首先判断vuex是否已经注册过了\n  if (Vue && _Vue === Vue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  Vue = _Vue\n  // 调用全局混入方法\n  applyMixin(Vue)\n}\n```\n首先判断`vuex`是否被重复安装，安装完成之后调用`applyMixin`方法，内部方法见下文\n\n`applyMixin` [源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/mixin.js)\n```js\nexport default function (Vue) {\n  const version = Number(Vue.version.split('.')[0])\n  // 如果vue版本大于2 则调用全局混淆方法，混淆进beforeCreate钩子\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit })\n  } else {\n    // 如果vue小于2版本，把vuexInit放入Vue的_init方法中执行\n    const _init = Vue.prototype._init\n    Vue.prototype._init = function (options = {}) {\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit\n      _init.call(this, options)\n    }\n  }\n\n  // Vuex的init钩子，会存入每一个Vue实例等钩子列表\n  function vuexInit () {\n    const options = this.$options\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store\n    }\n  }\n}\n```\n首先判断当前`Vue`的版本选择执行，大于`2.0`的版本直接把`vuexInit`混淆进`beforeCreate`，否则把`vuexInit`放入`Vue`的`_init`方法中执行。\n`vuexInit`会先从`options`中取`store`，如果当前组件为跟组件，那么`options.store`肯定会存在，把`store`挂载在`vue`的`$store`内，如果是非根组件，则获取`options`的`parent`，也就是父组件的`$store`，这样就实现了，所有的组件都获取到同一份地址的`Store`，那么现在我们来看看`Store`的实现\n\n## Store构造函数\n\n```js\nexport class Store {\n  constructor (options = {}) {\n    // 首先先安装Vue\n    if (!Vue && typeof window !== 'undefined' && window.Vue) {\n      install(window.Vue)\n    }\n    \n    if (process.env.NODE_ENV !== 'production') {\n      // 判断vue是否安装\n      assert(Vue, `must call Vue.use(Vuex) before creating a store instance.`)\n      // promise是否支持\n      assert(typeof Promise !== 'undefined', `vuex requires a Promise polyfill in this browser.`)\n      // 判断this是否是Store的实例\n      assert(this instanceof Store, `store must be called with the new operator.`)\n    }\n\n    // 一般options传入的是\n    /**\n     * {\n     *  state,\n     *  mutations,\n     *  actions,\n     *  modules\n     * }\n     **/\n    const {\n      // store 上的插件方法\n      plugins = [],\n      // 标记是否是严格模式，如果是严格模式，不允许直接修改state，一定要通过mutations\n      strict = false\n    } = options\n\n    // store internal state\n    // 用来判断是否是mutations来修改的state\n    this._committing = false\n    // 存放action\n    this._actions = Object.create(null)\n    this._actionSubscribers = []\n    // 存放mutations\n    this._mutations = Object.create(null)\n    // 存放getter\n    this._wrappedGetters = Object.create(null)\n    // 存放module\n    this._modules = new ModuleCollection(options)\n    // 跟进命名空间存放module\n    this._modulesNamespaceMap = Object.create(null)\n    // 存放订阅者\n    this._subscribers = []\n    // 实现Vue的watch\n    this._watcherVM = new Vue()\n\n    // bind commit and dispatch to self\n    const store = this\n    const { dispatch, commit } = this\n    // 把dispatch的this绑定到Store\n    this.dispatch = function boundDispatch (type, payload) {\n      return dispatch.call(store, type, payload)\n    }\n    // 把commit的this绑定到Store\n    this.commit = function boundCommit (type, payload, options) {\n      return commit.call(store, type, payload, options)\n    }\n\n    // strict mode\n    // 是否为严格模式\n    this.strict = strict\n\n    // 获取根模块的state\n    const state = this._modules.root.state\n\n    // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n    // 递归地注册传入的module\n    installModule(this, state, [], this._modules.root)\n\n    // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n    // 通过vm重新设置store，等会看它的内部实现，原理是借助Vue的响应式来注册state和getter\n    resetStoreVM(this, state)\n\n    // apply plugins\n    // 调用插件\n    plugins.forEach(plugin => plugin(this))\n\n    // devtool插件调用\n    const useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools\n    if (useDevtools) {\n      devtoolPlugin(this)\n    }\n  }\n}\n```\n\n## dispatch（action）\n\n我们知道如果我们需要改变`state`，需要先调用`this.$store.dispatch()`，来触发`action`，然后再调用`commit`来触发`mutation`，最终更改`state`，那么`dispatch`是怎么实现的呢？\n\n```js\ndispatch (_type, _payload) {\n  // check object-style dispatch\n  // 校验参数\n  const {\n    type,\n    payload\n  } = unifyObjectStyle(_type, _payload)\n\n  const action = { type, payload }\n  // 获取当前需要触发action的函数集合，注意，这里entry是一个数组集合，一般来说是只会存在一个方法，type: function，至于为什么后面讲到\n  const entry = this._actions[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown action type: ${type}`)\n    }\n    return\n  }\n\n  try {\n    // action 执行前，先调用订阅 action 变化的回调函数\n    this._actionSubscribers\n      .filter(sub => sub.before)\n      .forEach(sub => sub.before(action, this.state))\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`[vuex] error in before action subscribers: `)\n      console.error(e)\n    }\n  }\n  // 如果集合大于1则调用Promise.all，全部resolve之后得到result，也是个promise对象，最后直接执行.then()方法返回执行的结果res\n  const result = entry.length > 1\n    ? Promise.all(entry.map(handler => handler(payload)))\n    : entry[0](payload)\n\n  return result.then(res => {\n    try {\n      // action 执行后，先调用订阅 action 变化的回调函数\n      this._actionSubscribers\n        .filter(sub => sub.after)\n        .forEach(sub => sub.after(action, this.state))\n    } catch (e) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(`[vuex] error in after action subscribers: `)\n        console.error(e)\n      }\n    }\n    return res\n  })\n}\n```\n上面代码可以看到我们使用`Promise.all`来执行`entry`，执行每个`handle`函数，全部执行完成后再`.then()`返回结果。那么这个`handle`是什么呢？\n\n### installModule\n\n`installModule`内安装`action`\n```js\nfunction installModule (store, rootState, path, module, hot) {\n\n  ...\n\n  module.forEachAction((action, key) => {\n    const type = action.root ? key : namespace + key\n    const handler = action.handler || action\n    registerAction(store, type, handler, local)\n  })\n\n  ...\n\n}\n\n```\n### registerAction\n\n在`Store`构造函数内执行安装模块，内部会循环注册传入的`action`，调用`registerAction`方法\n\n```js\nfunction registerAction (store, type, handler, local) {\n  // 首先获取当前需要传入的action名字，如果没有则赋值为一个空对象，如果找到赋值给entry\n  const entry = store._actions[type] || (store._actions[type] = [])\n  // 往entry增加一个方法，也就是上面dispatch执行的handle\n  // handle的this指向store，传入三个参数，{dispatch,commit...} (触发mutation需要使用，大部分只需要用到commit)，payload(外部传递进来的参数) cb（回调函数）\n  entry.push(function wrappedActionHandler (payload, cb) {\n    let res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    // 如果不是个promise，用promise包装一下返回\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    // devtool插件相关\n    if (store._devtoolHook) {\n      return res.catch(err => {\n        store._devtoolHook.emit('vuex:error', err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  })\n}\n```\n\n我们一般是这么使用`dispath`的，👇\n```js\nthis.$store.dispatch('actionName',{\n  test: 123\n}).then((res=>{\n  ...\n}))\n```\n再来想想`dispatch`的执行机制，是不是变得很清晰了？首先调用`dispatch`方法，获取需要调用的`action`，也是就`actionName`，然后把`payload`传入，也就是`{test:1}`，然后完成之后调用`.then()`异步执行所需操作\n\n\n## commit （mutation）\n\n先来看看实际应用是这么触发`commit`的\n```js\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\n```\n在触发`action`的时候，调用`commit`，至于为什么会有`commit`方法，是因为上面`registerAction` push的方法第一个传输传入了一个对象`{dispatch,commit...}`，然后把`dispatch`传入的`payload`再代入`commit`方法捏\n\n```js\ncommit (_type, _payload, _options) {\n  // check object-style commit\n  // 校验参数\n  const {\n    type,\n    payload,\n    options\n  } = unifyObjectStyle(_type, _payload, _options)\n\n  const mutation = { type, payload }\n  // 获取当前对应的mutation方法集合\n  const entry = this._mutations[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown mutation type: ${type}`)\n    }\n    return\n  }\n  // 遍历调用集合内的方法，最后把payload参数传入集合的方法，等会介绍handle函数\n  // _withCommit方法是判断当前操作是否是通过commit提交来修改state的\n  this._withCommit(() => {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload)\n    })\n  })\n  // 通知所有订阅者\n  this._subscribers.forEach(sub => sub(mutation, this.state))\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    options && options.silent\n  ) {\n    console.warn(\n      `[vuex] mutation type: ${type}. Silent option has been removed. ` +\n      'Use the filter functionality in the vue-devtools'\n    )\n  }\n}\n``` \n### installModule\n\n```js\nfunction installModule (store, rootState, path, module, hot) {\n\n  ...\n\n  module.forEachMutation((mutation, key) => {\n    const namespacedType = namespace + key\n    registerMutation(store, namespacedType, mutation, local)\n  })\n\n  ...\n}\n\n```\n和`action`同理，注册所有的`mutation`，调用`registerMutation`方法\n\n### registerMutation\n\n```js\nfunction registerMutation (store, type, handler, local) {\n  const entry = store._mutations[type] || (store._mutations[type] = [])\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload)\n  })\n}\n```\n`registerMutation`方法比较简单，直接把`state`、`payload`传入`handler`函数\n\n\n再来看看实际使用\n```js\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\n```\n`commit`调用之后，获取到对应需要触发的`mutation`，也就是`setTestValue`，然后实际执行的是`registerMutation`处理赋值给 `store._mutations['setTestValue]`的方法集合，也就是`entry`，内部会传入两个参数，`state`、`payload`,这就是我们可以直接使用 `state.test = payload` 的原因\n\n## mapState/mapAction/mapGetter等工具函数\n\n开发中我们经常会使用到`mapState`来获取数据\n[工具函数源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js)\n\n### mapState\n\n先来看看我们在实际项目怎么使用\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n  // 或者带命名空间的使用，这就是下面normalizeNamespace得作用\n  computed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a, // 如果不使用则需要通过 state.some.nested.module.a\n    b: state => state.b\n  })\n},\n}\n```\n [mapState 源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js#L7)\n```js\n// 首先是判断是否使用了命名空间，如果没有的话namespace会被赋值为空，normalizeNamespace实现见代码底部\nexport const mapState = normalizeNamespace((namespace, states) => {\n  const res = {}\n  // 先把传入的states转换一下，转换例子如下，转换成数组对象的形式，都有key和val\n  normalizeMap(states).forEach(({ key, val }) => {\n    res[key] = function mappedState () {\n      // 获取state\n      let state = this.$store.state\n      let getters = this.$store.getters\n      // 如果有命名则解析完成之后重新赋值state和getter\n      if (namespace) {\n        // 通过模块来解析访问路径 some/nested/module =>  store._modulesNamespaceMap['some/nested/module/] = { // 当前模块 }\n        // 关于如何实现的，源码地址 https://github.com/vuejs/vuex/blob/665455f8da/src/store.js#L301\n        const module = getModuleByNamespace(this.$store, 'mapState', namespace)\n        if (!module) {\n          return\n        }\n        state = module.context.state\n        getters = module.context.getters\n      }\n      // 如果传入的函数，则把state和getter传入到函数内\n      // 否则如果传入的是字符串，则直接取出返回数据，也就是上面使用 countAlias: 'count',\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    }\n    // mark vuex getter for devtools\n    res[key].vuex = true\n  })\n  // 最终把处理好的对象返回处理，所以可知mapState返回的是一个对象\n  return res\n})\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(key => ({ key, val: key }))\n    : Object.keys(map).map(key => ({ key, val: map[key] }))\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return (namespace, map) => {\n    // 首先判断第一个参数是否为字符串，因为我们大部分情况都是传递的是对象，只有使用命名空间的时候第一个参数会是字符串\n    // 如果不是字符串的话，把第一个参数也就是namespace赋值为map，自己置为空，这样就达到了第一个参数传入对象也是可以的\n    if (typeof namespace !== 'string') {\n      map = namespace\n      namespace = ''\n    // 如果传入的是对象，如果最后一个字符不是/，则自动拼接，因为 store._modulesNamespaceMap 下都是这样的key 'some/nested/module'\n    // 具体怎么实现这种路径的见源码 getNamespace 方法 https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/'\n    }\n    return fn(namespace, map)\n  }\n}\n\n```\n这里只讲`mapState`，其他的实现大同小异，都差不太多\n\n## vuex响应式原理\n\n为什么我们通过修改`state`，模板里的视图也一起更新了呢？\n\n```js\nfunction resetStoreVM (store, state, hot) {\n  const oldVm = store._vm\n\n  // bind store public getters\n  // 初始化store的getter\n  store.getters = {}\n  // 获取registerGetter方法注册的getter\n  const wrappedGetters = store._wrappedGetters\n  const computed = {}\n  forEachValue(wrappedGetters, (fn, key) => {\n    // use computed to leverage its lazy-caching mechanism\n    // 因为getter的value都是函数，相当于vue的computed，这里直接执行获取结果\n    computed[key] = () => fn(store)\n    // 通过Object.defineProperty为给个getter设置get方法，改变getter获取值方式，如this.$store.getter.a会直接获取store._vm.a\n    Object.defineProperty(store.getters, key, {\n      get: () => store._vm[key],\n      enumerable: true // for local getters\n    })\n  })\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  // 先获取当前警告的配置\n  const silent = Vue.config.silent\n  // 将他置为true，意思是new Vue的时候不会抛出警告\n  Vue.config.silent = true\n  // 这里是关键，借助Vue的响应式来实现，这样state和getter的修改都会有响应式\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed\n  })\n  // new完之后恢复之前的配置\n  Vue.config.silent = silent\n\n  // enable strict mode for new vm\n  // 保证修改值一定是通过mutation的\n  if (store.strict) {\n    enableStrictMode(store)\n  }\n  // 注销旧的state的引用，销毁旧的Vue对象\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(() => {\n        oldVm._data.$$state = null\n      })\n    }\n    Vue.nextTick(() => oldVm.$destroy())\n  }\n}\n```\n从上面我们可以看到，`vuex`实现响应式，借助的是`Vue`的响应式，通过把`store.state`赋值给`store._vm.$$state`，这样修改`state`，同样`store._vm.$$state也`会被修改\n`getter`通过`Object.defineProperty`定义的`get`方法，访问的是`store._vm.computed`，让`getter`成为`vue`的计算实现，因此`getter`既拥有监听`store._vm.$$state`改变（并重新计算出自身的新值）的能力，又拥有在自身值改变之后通知外部`watcher`的能力\n\n## 命名空间的副作用\n\n我们之前提到`action`和`mutation`对应的名称的值是一个数组，而不是直接的一个方法，正常应该下面这样👇\n```js\nconst actionCollect = {\n  changeValue: ({ commit }, payload))=>{\n    ...\n  }\n}\n```\n但是看源码我们知道，他是一个数组\n```js\nconst actionCollect = {\n    changeValue: [\n      ({ commit }, payload)=>{\n          ...\n        }\n      }\n      ,function(){}\n      ...\n    ]\n  } \n```\n难道`action`还有`mutaion`会有同名的吗？答案肯定是的，这就要讲到命名空间了`namespace`\n\n```js\nnew Vuex.Store({\n  state: {\n    a: 1\n  },\n  modules: {\n    test1: {\n      namespaced: true,\n      state: {\n        a: '2'\n      },\n      mutations: {\n        changeValue: (state, payload) => {\n          console.log('1')\n          state.a = payload\n        }\n      }\n    },\n    test2: {\n      namespaced: false,\n      state: {\n        a: '2'\n      },\n      modules: {\n        test1: {\n          namespaced: true,\n          state: {\n            a: 3\n          },\n          mutations: {\n            changeValue: (state, payload) => {\n              console.log('2')\n              state.a = payload\n            }\n          }\n        }\n      }\n    }\n  }\n})\n```\n```js\nexport default {\n  name: 'App',\n  mounted () {\n    this.$store.commit('test1/changeValue', 'the same value')\n}\n// 输出：1\n// 输出：2\n```\n你会发现你`commit`了一次缺触发了两个不同模块的`mutation`，这就是命名空间的副作用，具体内部是如何处理`namespace`之前也讲到了，[源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16)\n\n```js\ngetNamespace (path) {\n  let module = this.root\n  return path.reduce((namespace, key) => {\n    module = module.getChild(key)\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n}\n```\n通过模块的`key`来拼接，如之前代码设置的`namespace`，`namespace`就是`test1/changeValue`\n\n所以使用`namespace`一定要注意路径名问题，还是就是避免名称相同，除非你就想这么干\n\n## 总结\n\n`vuex`源码就先讲这么多，其实还有好几个点没讲，例如各种工具方法和`vue-devtools`的实现，总体多读几遍还是可以看明白的，这就是`debugger`的过程了\n\n原文地址 http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/","source":"_posts/Vue之vuex源码分析.md","raw":"---\ntitle: Vue之vuex源码分析\ndate: 2019-10-14 09:27:53\ntags:\n- javascript\n- vue\n- 源码\n- 原创\ncategories: [javascript,vue]\n---\n\n## vuex使用\n\n当前vuex版本：3.1.0\n\n```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\nconst state = {\n  test: 1\n}\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\nexport default new Vuex.Store({\n  state,\n  actions,\n  mutations,\n})\n```\n\n```js\nimport Vue from 'vue';\nimport store from './store';\n\nnew Vue({\n  el: '#app',\n  store,\n  template: '<App/>',\n  components: { App }\n});\n```\n首先我们先注册`vuex`，然后设置一些`state/mutation/actions` 实例化出来，最后交给 `Vue` 处理\n<!-- more -->\n\n\n对 `API` 不熟悉的同学可以移步 [vuex](https://vuex.vuejs.org/zh/)\n\n\n## 注册\n\n用法我们知道了，那么问题来了，`Vuex`是怎样把store注入到Vue实例中去的呢？\n\n我们知道使用插件一般都需要`vue.use()`，传入的参数内部必须要提供一个`install`的方法，上面我们使用`vue.use(vuex)`去安装，那么vuex内部肯定是暴露了应该`install`的方法得\n\nvuex install的实现\n\nvuex/index.js  [源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/index.js)\n```js\nimport { Store, install } from './store'\nimport { mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers } from './helpers'\n\nexport default {\n  Store,\n  install,\n  version: '__VERSION__',\n  mapState,\n  mapMutations,\n  mapGetters,\n  mapActions,\n  createNamespacedHelpers\n}\n```\ninstall方法\n```js\nexport function install (_Vue) {\n  // 首先判断vuex是否已经注册过了\n  if (Vue && _Vue === Vue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  Vue = _Vue\n  // 调用全局混入方法\n  applyMixin(Vue)\n}\n```\n首先判断`vuex`是否被重复安装，安装完成之后调用`applyMixin`方法，内部方法见下文\n\n`applyMixin` [源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/mixin.js)\n```js\nexport default function (Vue) {\n  const version = Number(Vue.version.split('.')[0])\n  // 如果vue版本大于2 则调用全局混淆方法，混淆进beforeCreate钩子\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit })\n  } else {\n    // 如果vue小于2版本，把vuexInit放入Vue的_init方法中执行\n    const _init = Vue.prototype._init\n    Vue.prototype._init = function (options = {}) {\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit\n      _init.call(this, options)\n    }\n  }\n\n  // Vuex的init钩子，会存入每一个Vue实例等钩子列表\n  function vuexInit () {\n    const options = this.$options\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store\n    }\n  }\n}\n```\n首先判断当前`Vue`的版本选择执行，大于`2.0`的版本直接把`vuexInit`混淆进`beforeCreate`，否则把`vuexInit`放入`Vue`的`_init`方法中执行。\n`vuexInit`会先从`options`中取`store`，如果当前组件为跟组件，那么`options.store`肯定会存在，把`store`挂载在`vue`的`$store`内，如果是非根组件，则获取`options`的`parent`，也就是父组件的`$store`，这样就实现了，所有的组件都获取到同一份地址的`Store`，那么现在我们来看看`Store`的实现\n\n## Store构造函数\n\n```js\nexport class Store {\n  constructor (options = {}) {\n    // 首先先安装Vue\n    if (!Vue && typeof window !== 'undefined' && window.Vue) {\n      install(window.Vue)\n    }\n    \n    if (process.env.NODE_ENV !== 'production') {\n      // 判断vue是否安装\n      assert(Vue, `must call Vue.use(Vuex) before creating a store instance.`)\n      // promise是否支持\n      assert(typeof Promise !== 'undefined', `vuex requires a Promise polyfill in this browser.`)\n      // 判断this是否是Store的实例\n      assert(this instanceof Store, `store must be called with the new operator.`)\n    }\n\n    // 一般options传入的是\n    /**\n     * {\n     *  state,\n     *  mutations,\n     *  actions,\n     *  modules\n     * }\n     **/\n    const {\n      // store 上的插件方法\n      plugins = [],\n      // 标记是否是严格模式，如果是严格模式，不允许直接修改state，一定要通过mutations\n      strict = false\n    } = options\n\n    // store internal state\n    // 用来判断是否是mutations来修改的state\n    this._committing = false\n    // 存放action\n    this._actions = Object.create(null)\n    this._actionSubscribers = []\n    // 存放mutations\n    this._mutations = Object.create(null)\n    // 存放getter\n    this._wrappedGetters = Object.create(null)\n    // 存放module\n    this._modules = new ModuleCollection(options)\n    // 跟进命名空间存放module\n    this._modulesNamespaceMap = Object.create(null)\n    // 存放订阅者\n    this._subscribers = []\n    // 实现Vue的watch\n    this._watcherVM = new Vue()\n\n    // bind commit and dispatch to self\n    const store = this\n    const { dispatch, commit } = this\n    // 把dispatch的this绑定到Store\n    this.dispatch = function boundDispatch (type, payload) {\n      return dispatch.call(store, type, payload)\n    }\n    // 把commit的this绑定到Store\n    this.commit = function boundCommit (type, payload, options) {\n      return commit.call(store, type, payload, options)\n    }\n\n    // strict mode\n    // 是否为严格模式\n    this.strict = strict\n\n    // 获取根模块的state\n    const state = this._modules.root.state\n\n    // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n    // 递归地注册传入的module\n    installModule(this, state, [], this._modules.root)\n\n    // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n    // 通过vm重新设置store，等会看它的内部实现，原理是借助Vue的响应式来注册state和getter\n    resetStoreVM(this, state)\n\n    // apply plugins\n    // 调用插件\n    plugins.forEach(plugin => plugin(this))\n\n    // devtool插件调用\n    const useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools\n    if (useDevtools) {\n      devtoolPlugin(this)\n    }\n  }\n}\n```\n\n## dispatch（action）\n\n我们知道如果我们需要改变`state`，需要先调用`this.$store.dispatch()`，来触发`action`，然后再调用`commit`来触发`mutation`，最终更改`state`，那么`dispatch`是怎么实现的呢？\n\n```js\ndispatch (_type, _payload) {\n  // check object-style dispatch\n  // 校验参数\n  const {\n    type,\n    payload\n  } = unifyObjectStyle(_type, _payload)\n\n  const action = { type, payload }\n  // 获取当前需要触发action的函数集合，注意，这里entry是一个数组集合，一般来说是只会存在一个方法，type: function，至于为什么后面讲到\n  const entry = this._actions[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown action type: ${type}`)\n    }\n    return\n  }\n\n  try {\n    // action 执行前，先调用订阅 action 变化的回调函数\n    this._actionSubscribers\n      .filter(sub => sub.before)\n      .forEach(sub => sub.before(action, this.state))\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`[vuex] error in before action subscribers: `)\n      console.error(e)\n    }\n  }\n  // 如果集合大于1则调用Promise.all，全部resolve之后得到result，也是个promise对象，最后直接执行.then()方法返回执行的结果res\n  const result = entry.length > 1\n    ? Promise.all(entry.map(handler => handler(payload)))\n    : entry[0](payload)\n\n  return result.then(res => {\n    try {\n      // action 执行后，先调用订阅 action 变化的回调函数\n      this._actionSubscribers\n        .filter(sub => sub.after)\n        .forEach(sub => sub.after(action, this.state))\n    } catch (e) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(`[vuex] error in after action subscribers: `)\n        console.error(e)\n      }\n    }\n    return res\n  })\n}\n```\n上面代码可以看到我们使用`Promise.all`来执行`entry`，执行每个`handle`函数，全部执行完成后再`.then()`返回结果。那么这个`handle`是什么呢？\n\n### installModule\n\n`installModule`内安装`action`\n```js\nfunction installModule (store, rootState, path, module, hot) {\n\n  ...\n\n  module.forEachAction((action, key) => {\n    const type = action.root ? key : namespace + key\n    const handler = action.handler || action\n    registerAction(store, type, handler, local)\n  })\n\n  ...\n\n}\n\n```\n### registerAction\n\n在`Store`构造函数内执行安装模块，内部会循环注册传入的`action`，调用`registerAction`方法\n\n```js\nfunction registerAction (store, type, handler, local) {\n  // 首先获取当前需要传入的action名字，如果没有则赋值为一个空对象，如果找到赋值给entry\n  const entry = store._actions[type] || (store._actions[type] = [])\n  // 往entry增加一个方法，也就是上面dispatch执行的handle\n  // handle的this指向store，传入三个参数，{dispatch,commit...} (触发mutation需要使用，大部分只需要用到commit)，payload(外部传递进来的参数) cb（回调函数）\n  entry.push(function wrappedActionHandler (payload, cb) {\n    let res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    // 如果不是个promise，用promise包装一下返回\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    // devtool插件相关\n    if (store._devtoolHook) {\n      return res.catch(err => {\n        store._devtoolHook.emit('vuex:error', err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  })\n}\n```\n\n我们一般是这么使用`dispath`的，👇\n```js\nthis.$store.dispatch('actionName',{\n  test: 123\n}).then((res=>{\n  ...\n}))\n```\n再来想想`dispatch`的执行机制，是不是变得很清晰了？首先调用`dispatch`方法，获取需要调用的`action`，也是就`actionName`，然后把`payload`传入，也就是`{test:1}`，然后完成之后调用`.then()`异步执行所需操作\n\n\n## commit （mutation）\n\n先来看看实际应用是这么触发`commit`的\n```js\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\n```\n在触发`action`的时候，调用`commit`，至于为什么会有`commit`方法，是因为上面`registerAction` push的方法第一个传输传入了一个对象`{dispatch,commit...}`，然后把`dispatch`传入的`payload`再代入`commit`方法捏\n\n```js\ncommit (_type, _payload, _options) {\n  // check object-style commit\n  // 校验参数\n  const {\n    type,\n    payload,\n    options\n  } = unifyObjectStyle(_type, _payload, _options)\n\n  const mutation = { type, payload }\n  // 获取当前对应的mutation方法集合\n  const entry = this._mutations[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown mutation type: ${type}`)\n    }\n    return\n  }\n  // 遍历调用集合内的方法，最后把payload参数传入集合的方法，等会介绍handle函数\n  // _withCommit方法是判断当前操作是否是通过commit提交来修改state的\n  this._withCommit(() => {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload)\n    })\n  })\n  // 通知所有订阅者\n  this._subscribers.forEach(sub => sub(mutation, this.state))\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    options && options.silent\n  ) {\n    console.warn(\n      `[vuex] mutation type: ${type}. Silent option has been removed. ` +\n      'Use the filter functionality in the vue-devtools'\n    )\n  }\n}\n``` \n### installModule\n\n```js\nfunction installModule (store, rootState, path, module, hot) {\n\n  ...\n\n  module.forEachMutation((mutation, key) => {\n    const namespacedType = namespace + key\n    registerMutation(store, namespacedType, mutation, local)\n  })\n\n  ...\n}\n\n```\n和`action`同理，注册所有的`mutation`，调用`registerMutation`方法\n\n### registerMutation\n\n```js\nfunction registerMutation (store, type, handler, local) {\n  const entry = store._mutations[type] || (store._mutations[type] = [])\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload)\n  })\n}\n```\n`registerMutation`方法比较简单，直接把`state`、`payload`传入`handler`函数\n\n\n再来看看实际使用\n```js\nconst actions = {\n  changeTest({ commit }, payload){\n    commit('setTestValue', payload)\n  }\n}\nconst mutations = {\n  setTestValue(state, payload){\n    state.test = payload\n  }\n}\n```\n`commit`调用之后，获取到对应需要触发的`mutation`，也就是`setTestValue`，然后实际执行的是`registerMutation`处理赋值给 `store._mutations['setTestValue]`的方法集合，也就是`entry`，内部会传入两个参数，`state`、`payload`,这就是我们可以直接使用 `state.test = payload` 的原因\n\n## mapState/mapAction/mapGetter等工具函数\n\n开发中我们经常会使用到`mapState`来获取数据\n[工具函数源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js)\n\n### mapState\n\n先来看看我们在实际项目怎么使用\n```js\n// 在单独构建的版本中辅助函数为 Vuex.mapState\nimport { mapState } from 'vuex'\n\nexport default {\n  // ...\n  computed: mapState({\n    // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 'count' 等同于 `state => state.count`\n    countAlias: 'count',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n  // 或者带命名空间的使用，这就是下面normalizeNamespace得作用\n  computed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a, // 如果不使用则需要通过 state.some.nested.module.a\n    b: state => state.b\n  })\n},\n}\n```\n [mapState 源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js#L7)\n```js\n// 首先是判断是否使用了命名空间，如果没有的话namespace会被赋值为空，normalizeNamespace实现见代码底部\nexport const mapState = normalizeNamespace((namespace, states) => {\n  const res = {}\n  // 先把传入的states转换一下，转换例子如下，转换成数组对象的形式，都有key和val\n  normalizeMap(states).forEach(({ key, val }) => {\n    res[key] = function mappedState () {\n      // 获取state\n      let state = this.$store.state\n      let getters = this.$store.getters\n      // 如果有命名则解析完成之后重新赋值state和getter\n      if (namespace) {\n        // 通过模块来解析访问路径 some/nested/module =>  store._modulesNamespaceMap['some/nested/module/] = { // 当前模块 }\n        // 关于如何实现的，源码地址 https://github.com/vuejs/vuex/blob/665455f8da/src/store.js#L301\n        const module = getModuleByNamespace(this.$store, 'mapState', namespace)\n        if (!module) {\n          return\n        }\n        state = module.context.state\n        getters = module.context.getters\n      }\n      // 如果传入的函数，则把state和getter传入到函数内\n      // 否则如果传入的是字符串，则直接取出返回数据，也就是上面使用 countAlias: 'count',\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    }\n    // mark vuex getter for devtools\n    res[key].vuex = true\n  })\n  // 最终把处理好的对象返回处理，所以可知mapState返回的是一个对象\n  return res\n})\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(key => ({ key, val: key }))\n    : Object.keys(map).map(key => ({ key, val: map[key] }))\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return (namespace, map) => {\n    // 首先判断第一个参数是否为字符串，因为我们大部分情况都是传递的是对象，只有使用命名空间的时候第一个参数会是字符串\n    // 如果不是字符串的话，把第一个参数也就是namespace赋值为map，自己置为空，这样就达到了第一个参数传入对象也是可以的\n    if (typeof namespace !== 'string') {\n      map = namespace\n      namespace = ''\n    // 如果传入的是对象，如果最后一个字符不是/，则自动拼接，因为 store._modulesNamespaceMap 下都是这样的key 'some/nested/module'\n    // 具体怎么实现这种路径的见源码 getNamespace 方法 https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/'\n    }\n    return fn(namespace, map)\n  }\n}\n\n```\n这里只讲`mapState`，其他的实现大同小异，都差不太多\n\n## vuex响应式原理\n\n为什么我们通过修改`state`，模板里的视图也一起更新了呢？\n\n```js\nfunction resetStoreVM (store, state, hot) {\n  const oldVm = store._vm\n\n  // bind store public getters\n  // 初始化store的getter\n  store.getters = {}\n  // 获取registerGetter方法注册的getter\n  const wrappedGetters = store._wrappedGetters\n  const computed = {}\n  forEachValue(wrappedGetters, (fn, key) => {\n    // use computed to leverage its lazy-caching mechanism\n    // 因为getter的value都是函数，相当于vue的computed，这里直接执行获取结果\n    computed[key] = () => fn(store)\n    // 通过Object.defineProperty为给个getter设置get方法，改变getter获取值方式，如this.$store.getter.a会直接获取store._vm.a\n    Object.defineProperty(store.getters, key, {\n      get: () => store._vm[key],\n      enumerable: true // for local getters\n    })\n  })\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  // 先获取当前警告的配置\n  const silent = Vue.config.silent\n  // 将他置为true，意思是new Vue的时候不会抛出警告\n  Vue.config.silent = true\n  // 这里是关键，借助Vue的响应式来实现，这样state和getter的修改都会有响应式\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed\n  })\n  // new完之后恢复之前的配置\n  Vue.config.silent = silent\n\n  // enable strict mode for new vm\n  // 保证修改值一定是通过mutation的\n  if (store.strict) {\n    enableStrictMode(store)\n  }\n  // 注销旧的state的引用，销毁旧的Vue对象\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(() => {\n        oldVm._data.$$state = null\n      })\n    }\n    Vue.nextTick(() => oldVm.$destroy())\n  }\n}\n```\n从上面我们可以看到，`vuex`实现响应式，借助的是`Vue`的响应式，通过把`store.state`赋值给`store._vm.$$state`，这样修改`state`，同样`store._vm.$$state也`会被修改\n`getter`通过`Object.defineProperty`定义的`get`方法，访问的是`store._vm.computed`，让`getter`成为`vue`的计算实现，因此`getter`既拥有监听`store._vm.$$state`改变（并重新计算出自身的新值）的能力，又拥有在自身值改变之后通知外部`watcher`的能力\n\n## 命名空间的副作用\n\n我们之前提到`action`和`mutation`对应的名称的值是一个数组，而不是直接的一个方法，正常应该下面这样👇\n```js\nconst actionCollect = {\n  changeValue: ({ commit }, payload))=>{\n    ...\n  }\n}\n```\n但是看源码我们知道，他是一个数组\n```js\nconst actionCollect = {\n    changeValue: [\n      ({ commit }, payload)=>{\n          ...\n        }\n      }\n      ,function(){}\n      ...\n    ]\n  } \n```\n难道`action`还有`mutaion`会有同名的吗？答案肯定是的，这就要讲到命名空间了`namespace`\n\n```js\nnew Vuex.Store({\n  state: {\n    a: 1\n  },\n  modules: {\n    test1: {\n      namespaced: true,\n      state: {\n        a: '2'\n      },\n      mutations: {\n        changeValue: (state, payload) => {\n          console.log('1')\n          state.a = payload\n        }\n      }\n    },\n    test2: {\n      namespaced: false,\n      state: {\n        a: '2'\n      },\n      modules: {\n        test1: {\n          namespaced: true,\n          state: {\n            a: 3\n          },\n          mutations: {\n            changeValue: (state, payload) => {\n              console.log('2')\n              state.a = payload\n            }\n          }\n        }\n      }\n    }\n  }\n})\n```\n```js\nexport default {\n  name: 'App',\n  mounted () {\n    this.$store.commit('test1/changeValue', 'the same value')\n}\n// 输出：1\n// 输出：2\n```\n你会发现你`commit`了一次缺触发了两个不同模块的`mutation`，这就是命名空间的副作用，具体内部是如何处理`namespace`之前也讲到了，[源码地址](https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16)\n\n```js\ngetNamespace (path) {\n  let module = this.root\n  return path.reduce((namespace, key) => {\n    module = module.getChild(key)\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n}\n```\n通过模块的`key`来拼接，如之前代码设置的`namespace`，`namespace`就是`test1/changeValue`\n\n所以使用`namespace`一定要注意路径名问题，还是就是避免名称相同，除非你就想这么干\n\n## 总结\n\n`vuex`源码就先讲这么多，其实还有好几个点没讲，例如各种工具方法和`vue-devtools`的实现，总体多读几遍还是可以看明白的，这就是`debugger`的过程了\n\n原文地址 http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/","slug":"Vue之vuex源码分析","published":1,"updated":"2019-10-16T08:07:04.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9m001j59x3n8xno6mn","content":"<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>当前vuex版本：3.1.0</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  test: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先我们先注册<code>vuex</code>，然后设置一些<code>state/mutation/actions</code> 实例化出来，最后交给 <code>Vue</code> 处理<br><a id=\"more\"></a></p>\n<p>对 <code>API</code> 不熟悉的同学可以移步 <a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuex</a></p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>用法我们知道了，那么问题来了，<code>Vuex</code>是怎样把store注入到Vue实例中去的呢？</p>\n<p>我们知道使用插件一般都需要<code>vue.use()</code>，传入的参数内部必须要提供一个<code>install</code>的方法，上面我们使用<code>vue.use(vuex)</code>去安装，那么vuex内部肯定是暴露了应该<code>install</code>的方法得</p>\n<p>vuex install的实现</p>\n<p>vuex/index.js  <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/index.js\" target=\"_blank\" rel=\"noopener\">源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Store, install &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Store,</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  version: <span class=\"string\">'__VERSION__'</span>,</span><br><span class=\"line\">  mapState,</span><br><span class=\"line\">  mapMutations,</span><br><span class=\"line\">  mapGetters,</span><br><span class=\"line\">  mapActions,</span><br><span class=\"line\">  createNamespacedHelpers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>install方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先判断vuex是否已经注册过了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">        <span class=\"string\">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue = _Vue</span><br><span class=\"line\">  <span class=\"comment\">// 调用全局混入方法</span></span><br><span class=\"line\">  applyMixin(Vue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先判断<code>vuex</code>是否被重复安装，安装完成之后调用<code>applyMixin</code>方法，内部方法见下文</p>\n<p><code>applyMixin</code> <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/mixin.js\" target=\"_blank\" rel=\"noopener\">源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"comment\">// 如果vue版本大于2 则调用全局混淆方法，混淆进beforeCreate钩子</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    Vue.mixin(&#123; <span class=\"attr\">beforeCreate</span>: vuexInit &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果vue小于2版本，把vuexInit放入Vue的_init方法中执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _init = Vue.prototype._init</span><br><span class=\"line\">    Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">      options.init = options.init</span><br><span class=\"line\">        ? [vuexInit].concat(options.init)</span><br><span class=\"line\">        : vuexInit</span><br><span class=\"line\">      _init.call(<span class=\"keyword\">this</span>, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Vuex的init钩子，会存入每一个Vue实例等钩子列表</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vuexInit</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.$options</span><br><span class=\"line\">    <span class=\"comment\">// store injection</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = <span class=\"keyword\">typeof</span> options.store === <span class=\"string\">'function'</span></span><br><span class=\"line\">        ? options.store()</span><br><span class=\"line\">        : options.store</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = options.parent.$store</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先判断当前<code>Vue</code>的版本选择执行，大于<code>2.0</code>的版本直接把<code>vuexInit</code>混淆进<code>beforeCreate</code>，否则把<code>vuexInit</code>放入<code>Vue</code>的<code>_init</code>方法中执行。<br><code>vuexInit</code>会先从<code>options</code>中取<code>store</code>，如果当前组件为跟组件，那么<code>options.store</code>肯定会存在，把<code>store</code>挂载在<code>vue</code>的<code>$store</code>内，如果是非根组件，则获取<code>options</code>的<code>parent</code>，也就是父组件的<code>$store</code>，这样就实现了，所有的组件都获取到同一份地址的<code>Store</code>，那么现在我们来看看<code>Store</code>的实现</p>\n<h2 id=\"Store构造函数\"><a href=\"#Store构造函数\" class=\"headerlink\" title=\"Store构造函数\"></a>Store构造函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先先安装Vue</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Vue &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">      install(<span class=\"built_in\">window</span>.Vue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断vue是否安装</span></span><br><span class=\"line\">      assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</span><br><span class=\"line\">      <span class=\"comment\">// promise是否支持</span></span><br><span class=\"line\">      assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 判断this是否是Store的实例</span></span><br><span class=\"line\">      assert(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Store, <span class=\"string\">`store must be called with the new operator.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一般options传入的是</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *  state,</span></span><br><span class=\"line\"><span class=\"comment\">     *  mutations,</span></span><br><span class=\"line\"><span class=\"comment\">     *  actions,</span></span><br><span class=\"line\"><span class=\"comment\">     *  modules</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// store 上的插件方法</span></span><br><span class=\"line\">      plugins = [],</span><br><span class=\"line\">      <span class=\"comment\">// 标记是否是严格模式，如果是严格模式，不允许直接修改state，一定要通过mutations</span></span><br><span class=\"line\">      strict = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; = options</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// store internal state</span></span><br><span class=\"line\">    <span class=\"comment\">// 用来判断是否是mutations来修改的state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放action</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actionSubscribers = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放mutations</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放getter</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放module</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modules = <span class=\"keyword\">new</span> ModuleCollection(options)</span><br><span class=\"line\">    <span class=\"comment\">// 跟进命名空间存放module</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modulesNamespaceMap = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribers = []</span><br><span class=\"line\">    <span class=\"comment\">// 实现Vue的watch</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind commit and dispatch to self</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 把dispatch的this绑定到Store</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把commit的this绑定到Store</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// strict mode</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否为严格模式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.strict = strict</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取根模块的state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"keyword\">this</span>._modules.root.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init root module.</span></span><br><span class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">    <span class=\"comment\">// 递归地注册传入的module</span></span><br><span class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], <span class=\"keyword\">this</span>._modules.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过vm重新设置store，等会看它的内部实现，原理是借助Vue的响应式来注册state和getter</span></span><br><span class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply plugins</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用插件</span></span><br><span class=\"line\">    plugins.forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// devtool插件调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> useDevtools = options.devtools !== <span class=\"literal\">undefined</span> ? options.devtools : Vue.config.devtools</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useDevtools) &#123;</span><br><span class=\"line\">      devtoolPlugin(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dispatch（action）\"><a href=\"#dispatch（action）\" class=\"headerlink\" title=\"dispatch（action）\"></a>dispatch（action）</h2><p>我们知道如果我们需要改变<code>state</code>，需要先调用<code>this.$store.dispatch()</code>，来触发<code>action</code>，然后再调用<code>commit</code>来触发<code>mutation</code>，最终更改<code>state</code>，那么<code>dispatch</code>是怎么实现的呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch (_type, _payload) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style dispatch</span></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前需要触发action的函数集合，注意，这里entry是一个数组集合，一般来说是只会存在一个方法，type: function，至于为什么后面讲到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown action type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// action 执行前，先调用订阅 action 变化的回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actionSubscribers</span><br><span class=\"line\">      .filter(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.before)</span><br><span class=\"line\">      .forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.before(action, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[vuex] error in before action subscribers: `</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果集合大于1则调用Promise.all，全部resolve之后得到result，也是个promise对象，最后直接执行.then()方法返回执行的结果res</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = entry.length &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Promise</span>.all(entry.map(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> handler(payload)))</span><br><span class=\"line\">    : entry[<span class=\"number\">0</span>](payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// action 执行后，先调用订阅 action 变化的回调函数</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._actionSubscribers</span><br><span class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.after)</span><br><span class=\"line\">        .forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.after(action, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[vuex] error in after action subscribers: `</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码可以看到我们使用<code>Promise.all</code>来执行<code>entry</code>，执行每个<code>handle</code>函数，全部执行完成后再<code>.then()</code>返回结果。那么这个<code>handle</code>是什么呢？</p>\n<h3 id=\"installModule\"><a href=\"#installModule\" class=\"headerlink\" title=\"installModule\"></a>installModule</h3><p><code>installModule</code>内安装<code>action</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachAction(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = action.root ? key : namespace + key</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = action.handler || action</span><br><span class=\"line\">    registerAction(store, type, handler, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"registerAction\"><a href=\"#registerAction\" class=\"headerlink\" title=\"registerAction\"></a>registerAction</h3><p>在<code>Store</code>构造函数内执行安装模块，内部会循环注册传入的<code>action</code>，调用<code>registerAction</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerAction</span> (<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先获取当前需要传入的action名字，如果没有则赋值为一个空对象，如果找到赋值给entry</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._actions[type] || (store._actions[type] = [])</span><br><span class=\"line\">  <span class=\"comment\">// 往entry增加一个方法，也就是上面dispatch执行的handle</span></span><br><span class=\"line\">  <span class=\"comment\">// handle的this指向store，传入三个参数，&#123;dispatch,commit...&#125; (触发mutation需要使用，大部分只需要用到commit)，payload(外部传递进来的参数) cb（回调函数）</span></span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedActionHandler</span> (<span class=\"params\">payload, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = handler.call(store, &#123;</span><br><span class=\"line\">      dispatch: local.dispatch,</span><br><span class=\"line\">      commit: local.commit,</span><br><span class=\"line\">      getters: local.getters,</span><br><span class=\"line\">      state: local.state,</span><br><span class=\"line\">      rootGetters: store.getters,</span><br><span class=\"line\">      rootState: store.state</span><br><span class=\"line\">    &#125;, payload, cb)</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是个promise，用promise包装一下返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPromise(res)) &#123;</span><br><span class=\"line\">      res = <span class=\"built_in\">Promise</span>.resolve(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// devtool插件相关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store._devtoolHook) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store._devtoolHook.emit(<span class=\"string\">'vuex:error'</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们一般是这么使用<code>dispath</code>的，👇<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'actionName'</span>,&#123;</span><br><span class=\"line\">  test: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;).then((<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>再来想想<code>dispatch</code>的执行机制，是不是变得很清晰了？首先调用<code>dispatch</code>方法，获取需要调用的<code>action</code>，也是就<code>actionName</code>，然后把<code>payload</code>传入，也就是<code>{test:1}</code>，然后完成之后调用<code>.then()</code>异步执行所需操作</p>\n<h2 id=\"commit-（mutation）\"><a href=\"#commit-（mutation）\" class=\"headerlink\" title=\"commit （mutation）\"></a>commit （mutation）</h2><p>先来看看实际应用是这么触发<code>commit</code>的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在触发<code>action</code>的时候，调用<code>commit</code>，至于为什么会有<code>commit</code>方法，是因为上面<code>registerAction</code> push的方法第一个传输传入了一个对象<code>{dispatch,commit...}</code>，然后把<code>dispatch</code>传入的<code>payload</code>再代入<code>commit</code>方法捏</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit (_type, _payload, _options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style commit</span></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload,</span><br><span class=\"line\">    options</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload, _options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mutation = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前对应的mutation方法集合</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown mutation type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历调用集合内的方法，最后把payload参数传入集合的方法，等会介绍handle函数</span></span><br><span class=\"line\">  <span class=\"comment\">// _withCommit方法是判断当前操作是否是通过commit提交来修改state的</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entry.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commitIterator</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      handler(payload)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 通知所有订阅者</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._subscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(mutation, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp;</span><br><span class=\"line\">    options &amp;&amp; options.silent</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(</span><br><span class=\"line\">      <span class=\"string\">`[vuex] mutation type: <span class=\"subst\">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</span><br><span class=\"line\">      <span class=\"string\">'Use the filter functionality in the vue-devtools'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">### installModule</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachMutation(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerMutation(store, namespacedType, mutation, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和<code>action</code>同理，注册所有的<code>mutation</code>，调用<code>registerMutation</code>方法</p>\n<h3 id=\"registerMutation\"><a href=\"#registerMutation\" class=\"headerlink\" title=\"registerMutation\"></a>registerMutation</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMutation</span> (<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedMutationHandler</span> (<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">    handler.call(store, local.state, payload)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>registerMutation</code>方法比较简单，直接把<code>state</code>、<code>payload</code>传入<code>handler</code>函数</p>\n<p>再来看看实际使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>commit</code>调用之后，获取到对应需要触发的<code>mutation</code>，也就是<code>setTestValue</code>，然后实际执行的是<code>registerMutation</code>处理赋值给 <code>store._mutations[&#39;setTestValue]</code>的方法集合，也就是<code>entry</code>，内部会传入两个参数，<code>state</code>、<code>payload</code>,这就是我们可以直接使用 <code>state.test = payload</code> 的原因</p>\n<h2 id=\"mapState-mapAction-mapGetter等工具函数\"><a href=\"#mapState-mapAction-mapGetter等工具函数\" class=\"headerlink\" title=\"mapState/mapAction/mapGetter等工具函数\"></a>mapState/mapAction/mapGetter等工具函数</h2><p>开发中我们经常会使用到<code>mapState</code>来获取数据<br><a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js\" target=\"_blank\" rel=\"noopener\">工具函数源码地址</a></p>\n<h3 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h3><p>先来看看我们在实际项目怎么使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 或者带命名空间的使用，这就是下面normalizeNamespace得作用</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a, <span class=\"comment\">// 如果不使用则需要通过 state.some.nested.module.a</span></span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js#L7\" target=\"_blank\" rel=\"noopener\">mapState 源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是判断是否使用了命名空间，如果没有的话namespace会被赋值为空，normalizeNamespace实现见代码底部</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapState = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, states</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传入的states转换一下，转换例子如下，转换成数组对象的形式，都有key和val</span></span><br><span class=\"line\">  normalizeMap(states).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedState</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取state</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> state = <span class=\"keyword\">this</span>.$store.state</span><br><span class=\"line\">      <span class=\"keyword\">let</span> getters = <span class=\"keyword\">this</span>.$store.getters</span><br><span class=\"line\">      <span class=\"comment\">// 如果有命名则解析完成之后重新赋值state和getter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过模块来解析访问路径 some/nested/module =&gt;  store._modulesNamespaceMap['some/nested/module/] = &#123; // 当前模块 &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// 关于如何实现的，源码地址 https://github.com/vuejs/vuex/blob/665455f8da/src/store.js#L301</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = getModuleByNamespace(<span class=\"keyword\">this</span>.$store, <span class=\"string\">'mapState'</span>, namespace)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        state = <span class=\"built_in\">module</span>.context.state</span><br><span class=\"line\">        getters = <span class=\"built_in\">module</span>.context.getters</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的函数，则把state和getter传入到函数内</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则如果传入的是字符串，则直接取出返回数据，也就是上面使用 countAlias: 'count',</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'function'</span></span><br><span class=\"line\">        ? val.call(<span class=\"keyword\">this</span>, state, getters)</span><br><span class=\"line\">        : state[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark vuex getter for devtools</span></span><br><span class=\"line\">    res[key].vuex = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 最终把处理好的对象返回处理，所以可知mapState返回的是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Normalize the map</span></span><br><span class=\"line\"><span class=\"comment\"> * normalizeMap([1, 2, 3]) =&gt; [ &#123; key: 1, val: 1 &#125;, &#123; key: 2, val: 2 &#125;, &#123; key: 3, val: 3 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"> * normalizeMap(&#123;a: 1, b: 2, c: 3&#125;) =&gt; [ &#123; key: 'a', val: 1 &#125;, &#123; key: 'b', val: 2 &#125;, &#123; key: 'c', val: 3 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array|Object&#125; map</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeMap</span> (<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(map)</span><br><span class=\"line\">    ? map.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: key &#125;))</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.keys(map).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: map[key] &#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; fn</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeNamespace</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">namespace, map</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先判断第一个参数是否为字符串，因为我们大部分情况都是传递的是对象，只有使用命名空间的时候第一个参数会是字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不是字符串的话，把第一个参数也就是namespace赋值为map，自己置为空，这样就达到了第一个参数传入对象也是可以的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> namespace !== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      map = namespace</span><br><span class=\"line\">      namespace = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是对象，如果最后一个字符不是/，则自动拼接，因为 store._modulesNamespaceMap 下都是这样的key 'some/nested/module'</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体怎么实现这种路径的见源码 getNamespace 方法 https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (namespace.charAt(namespace.length - <span class=\"number\">1</span>) !== <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      namespace += <span class=\"string\">'/'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(namespace, map)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只讲<code>mapState</code>，其他的实现大同小异，都差不太多</p>\n<h2 id=\"vuex响应式原理\"><a href=\"#vuex响应式原理\" class=\"headerlink\" title=\"vuex响应式原理\"></a>vuex响应式原理</h2><p>为什么我们通过修改<code>state</code>，模板里的视图也一起更新了呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span> (<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldVm = store._vm</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化store的getter</span></span><br><span class=\"line\">  store.getters = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取registerGetter方法注册的getter</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  forEachValue(wrappedGetters, (fn, key) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为getter的value都是函数，相当于vue的computed，这里直接执行获取结果</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(store)</span><br><span class=\"line\">    <span class=\"comment\">// 通过Object.defineProperty为给个getter设置get方法，改变getter获取值方式，如this.$store.getter.a会直接获取store._vm.a</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>: () =&gt; store._vm[key],</span><br><span class=\"line\">      enumerable: true // for local getters</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // use a Vue instance to store the state tree</span><br><span class=\"line\">  // suppress warnings just in case the user has added</span><br><span class=\"line\">  // some funky global mixins</span><br><span class=\"line\">  // 先获取当前警告的配置</span><br><span class=\"line\">  const silent = Vue.config.silent</span><br><span class=\"line\">  // 将他置为true，意思是new Vue的时候不会抛出警告</span><br><span class=\"line\">  Vue.config.silent = true</span><br><span class=\"line\">  // 这里是关键，借助Vue的响应式来实现，这样state和getter的修改都会有响应式</span><br><span class=\"line\">  store._vm = new Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// new完之后恢复之前的配置</span></span><br><span class=\"line\">  Vue.config.silent = silent</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\">  <span class=\"comment\">// 保证修改值一定是通过mutation的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.strict) &#123;</span><br><span class=\"line\">    enableStrictMode(store)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注销旧的state的引用，销毁旧的Vue对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hot) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">      <span class=\"comment\">// to force getter re-evaluation for hot reloading.</span></span><br><span class=\"line\">      store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        oldVm._data.$$state = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以看到，<code>vuex</code>实现响应式，借助的是<code>Vue</code>的响应式，通过把<code>store.state</code>赋值给<code>store._vm.$$state</code>，这样修改<code>state</code>，同样<code>store._vm.$$state也</code>会被修改<br><code>getter</code>通过<code>Object.defineProperty</code>定义的<code>get</code>方法，访问的是<code>store._vm.computed</code>，让<code>getter</code>成为<code>vue</code>的计算实现，因此<code>getter</code>既拥有监听<code>store._vm.$$state</code>改变（并重新计算出自身的新值）的能力，又拥有在自身值改变之后通知外部<code>watcher</code>的能力</p>\n<h2 id=\"命名空间的副作用\"><a href=\"#命名空间的副作用\" class=\"headerlink\" title=\"命名空间的副作用\"></a>命名空间的副作用</h2><p>我们之前提到<code>action</code>和<code>mutation</code>对应的名称的值是一个数组，而不是直接的一个方法，正常应该下面这样👇<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actionCollect = &#123;</span><br><span class=\"line\">  changeValue: <span class=\"function\">(<span class=\"params\">&#123; commit &#125;, payload</span>))=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是看源码我们知道，他是一个数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actionCollect = &#123;</span><br><span class=\"line\">    changeValue: [</span><br><span class=\"line\">      (&#123; commit &#125;, payload)=&gt;&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>难道<code>action</code>还有<code>mutaion</code>会有同名的吗？答案肯定是的，这就要讲到命名空间了<code>namespace</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    test1: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      state: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        changeValue: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">          state.a = payload</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    test2: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      state: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        test1: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          state: &#123;</span><br><span class=\"line\">            a: <span class=\"number\">3</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          mutations: &#123;</span><br><span class=\"line\">            changeValue: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">              state.a = payload</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'App'</span>,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'test1/changeValue'</span>, <span class=\"string\">'the same value'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"><span class=\"comment\">// 输出：2</span></span><br></pre></td></tr></table></figure>\n<p>你会发现你<code>commit</code>了一次缺触发了两个不同模块的<code>mutation</code>，这就是命名空间的副作用，具体内部是如何处理<code>namespace</code>之前也讲到了，<a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getNamespace (path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"keyword\">this</span>.root</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.reduce(<span class=\"function\">(<span class=\"params\">namespace, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span> = <span class=\"built_in\">module</span>.getChild(key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> namespace + (<span class=\"built_in\">module</span>.namespaced ? key + <span class=\"string\">'/'</span> : <span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;, <span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过模块的<code>key</code>来拼接，如之前代码设置的<code>namespace</code>，<code>namespace</code>就是<code>test1/changeValue</code></p>\n<p>所以使用<code>namespace</code>一定要注意路径名问题，还是就是避免名称相同，除非你就想这么干</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>vuex</code>源码就先讲这么多，其实还有好几个点没讲，例如各种工具方法和<code>vue-devtools</code>的实现，总体多读几遍还是可以看明白的，这就是<code>debugger</code>的过程了</p>\n<p>原文地址 <a href=\"http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/\">http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>当前vuex版本：3.1.0</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  test: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>首先我们先注册<code>vuex</code>，然后设置一些<code>state/mutation/actions</code> 实例化出来，最后交给 <code>Vue</code> 处理<br>","more":"</p>\n<p>对 <code>API</code> 不熟悉的同学可以移步 <a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuex</a></p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p>用法我们知道了，那么问题来了，<code>Vuex</code>是怎样把store注入到Vue实例中去的呢？</p>\n<p>我们知道使用插件一般都需要<code>vue.use()</code>，传入的参数内部必须要提供一个<code>install</code>的方法，上面我们使用<code>vue.use(vuex)</code>去安装，那么vuex内部肯定是暴露了应该<code>install</code>的方法得</p>\n<p>vuex install的实现</p>\n<p>vuex/index.js  <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/index.js\" target=\"_blank\" rel=\"noopener\">源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Store, install &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Store,</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  version: <span class=\"string\">'__VERSION__'</span>,</span><br><span class=\"line\">  mapState,</span><br><span class=\"line\">  mapMutations,</span><br><span class=\"line\">  mapGetters,</span><br><span class=\"line\">  mapActions,</span><br><span class=\"line\">  createNamespacedHelpers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>install方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先判断vuex是否已经注册过了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">        <span class=\"string\">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue = _Vue</span><br><span class=\"line\">  <span class=\"comment\">// 调用全局混入方法</span></span><br><span class=\"line\">  applyMixin(Vue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先判断<code>vuex</code>是否被重复安装，安装完成之后调用<code>applyMixin</code>方法，内部方法见下文</p>\n<p><code>applyMixin</code> <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/mixin.js\" target=\"_blank\" rel=\"noopener\">源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  <span class=\"comment\">// 如果vue版本大于2 则调用全局混淆方法，混淆进beforeCreate钩子</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    Vue.mixin(&#123; <span class=\"attr\">beforeCreate</span>: vuexInit &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果vue小于2版本，把vuexInit放入Vue的_init方法中执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _init = Vue.prototype._init</span><br><span class=\"line\">    Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">      options.init = options.init</span><br><span class=\"line\">        ? [vuexInit].concat(options.init)</span><br><span class=\"line\">        : vuexInit</span><br><span class=\"line\">      _init.call(<span class=\"keyword\">this</span>, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Vuex的init钩子，会存入每一个Vue实例等钩子列表</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vuexInit</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.$options</span><br><span class=\"line\">    <span class=\"comment\">// store injection</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = <span class=\"keyword\">typeof</span> options.store === <span class=\"string\">'function'</span></span><br><span class=\"line\">        ? options.store()</span><br><span class=\"line\">        : options.store</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = options.parent.$store</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先判断当前<code>Vue</code>的版本选择执行，大于<code>2.0</code>的版本直接把<code>vuexInit</code>混淆进<code>beforeCreate</code>，否则把<code>vuexInit</code>放入<code>Vue</code>的<code>_init</code>方法中执行。<br><code>vuexInit</code>会先从<code>options</code>中取<code>store</code>，如果当前组件为跟组件，那么<code>options.store</code>肯定会存在，把<code>store</code>挂载在<code>vue</code>的<code>$store</code>内，如果是非根组件，则获取<code>options</code>的<code>parent</code>，也就是父组件的<code>$store</code>，这样就实现了，所有的组件都获取到同一份地址的<code>Store</code>，那么现在我们来看看<code>Store</code>的实现</p>\n<h2 id=\"Store构造函数\"><a href=\"#Store构造函数\" class=\"headerlink\" title=\"Store构造函数\"></a>Store构造函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先先安装Vue</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Vue &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">      install(<span class=\"built_in\">window</span>.Vue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断vue是否安装</span></span><br><span class=\"line\">      assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</span><br><span class=\"line\">      <span class=\"comment\">// promise是否支持</span></span><br><span class=\"line\">      assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 判断this是否是Store的实例</span></span><br><span class=\"line\">      assert(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Store, <span class=\"string\">`store must be called with the new operator.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一般options传入的是</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *  state,</span></span><br><span class=\"line\"><span class=\"comment\">     *  mutations,</span></span><br><span class=\"line\"><span class=\"comment\">     *  actions,</span></span><br><span class=\"line\"><span class=\"comment\">     *  modules</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// store 上的插件方法</span></span><br><span class=\"line\">      plugins = [],</span><br><span class=\"line\">      <span class=\"comment\">// 标记是否是严格模式，如果是严格模式，不允许直接修改state，一定要通过mutations</span></span><br><span class=\"line\">      strict = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; = options</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// store internal state</span></span><br><span class=\"line\">    <span class=\"comment\">// 用来判断是否是mutations来修改的state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 存放action</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actionSubscribers = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放mutations</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放getter</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放module</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modules = <span class=\"keyword\">new</span> ModuleCollection(options)</span><br><span class=\"line\">    <span class=\"comment\">// 跟进命名空间存放module</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modulesNamespaceMap = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 存放订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribers = []</span><br><span class=\"line\">    <span class=\"comment\">// 实现Vue的watch</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind commit and dispatch to self</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 把dispatch的this绑定到Store</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把commit的this绑定到Store</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// strict mode</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否为严格模式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.strict = strict</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取根模块的state</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"keyword\">this</span>._modules.root.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init root module.</span></span><br><span class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">    <span class=\"comment\">// 递归地注册传入的module</span></span><br><span class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], <span class=\"keyword\">this</span>._modules.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过vm重新设置store，等会看它的内部实现，原理是借助Vue的响应式来注册state和getter</span></span><br><span class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply plugins</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用插件</span></span><br><span class=\"line\">    plugins.forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// devtool插件调用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> useDevtools = options.devtools !== <span class=\"literal\">undefined</span> ? options.devtools : Vue.config.devtools</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useDevtools) &#123;</span><br><span class=\"line\">      devtoolPlugin(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dispatch（action）\"><a href=\"#dispatch（action）\" class=\"headerlink\" title=\"dispatch（action）\"></a>dispatch（action）</h2><p>我们知道如果我们需要改变<code>state</code>，需要先调用<code>this.$store.dispatch()</code>，来触发<code>action</code>，然后再调用<code>commit</code>来触发<code>mutation</code>，最终更改<code>state</code>，那么<code>dispatch</code>是怎么实现的呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch (_type, _payload) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style dispatch</span></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前需要触发action的函数集合，注意，这里entry是一个数组集合，一般来说是只会存在一个方法，type: function，至于为什么后面讲到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown action type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// action 执行前，先调用订阅 action 变化的回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actionSubscribers</span><br><span class=\"line\">      .filter(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.before)</span><br><span class=\"line\">      .forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.before(action, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[vuex] error in before action subscribers: `</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果集合大于1则调用Promise.all，全部resolve之后得到result，也是个promise对象，最后直接执行.then()方法返回执行的结果res</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = entry.length &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Promise</span>.all(entry.map(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> handler(payload)))</span><br><span class=\"line\">    : entry[<span class=\"number\">0</span>](payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// action 执行后，先调用订阅 action 变化的回调函数</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._actionSubscribers</span><br><span class=\"line\">        .filter(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.after)</span><br><span class=\"line\">        .forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.after(action, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[vuex] error in after action subscribers: `</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码可以看到我们使用<code>Promise.all</code>来执行<code>entry</code>，执行每个<code>handle</code>函数，全部执行完成后再<code>.then()</code>返回结果。那么这个<code>handle</code>是什么呢？</p>\n<h3 id=\"installModule\"><a href=\"#installModule\" class=\"headerlink\" title=\"installModule\"></a>installModule</h3><p><code>installModule</code>内安装<code>action</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachAction(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = action.root ? key : namespace + key</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = action.handler || action</span><br><span class=\"line\">    registerAction(store, type, handler, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"registerAction\"><a href=\"#registerAction\" class=\"headerlink\" title=\"registerAction\"></a>registerAction</h3><p>在<code>Store</code>构造函数内执行安装模块，内部会循环注册传入的<code>action</code>，调用<code>registerAction</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerAction</span> (<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先获取当前需要传入的action名字，如果没有则赋值为一个空对象，如果找到赋值给entry</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._actions[type] || (store._actions[type] = [])</span><br><span class=\"line\">  <span class=\"comment\">// 往entry增加一个方法，也就是上面dispatch执行的handle</span></span><br><span class=\"line\">  <span class=\"comment\">// handle的this指向store，传入三个参数，&#123;dispatch,commit...&#125; (触发mutation需要使用，大部分只需要用到commit)，payload(外部传递进来的参数) cb（回调函数）</span></span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedActionHandler</span> (<span class=\"params\">payload, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = handler.call(store, &#123;</span><br><span class=\"line\">      dispatch: local.dispatch,</span><br><span class=\"line\">      commit: local.commit,</span><br><span class=\"line\">      getters: local.getters,</span><br><span class=\"line\">      state: local.state,</span><br><span class=\"line\">      rootGetters: store.getters,</span><br><span class=\"line\">      rootState: store.state</span><br><span class=\"line\">    &#125;, payload, cb)</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是个promise，用promise包装一下返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPromise(res)) &#123;</span><br><span class=\"line\">      res = <span class=\"built_in\">Promise</span>.resolve(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// devtool插件相关</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store._devtoolHook) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store._devtoolHook.emit(<span class=\"string\">'vuex:error'</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们一般是这么使用<code>dispath</code>的，👇<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'actionName'</span>,&#123;</span><br><span class=\"line\">  test: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;).then((<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>再来想想<code>dispatch</code>的执行机制，是不是变得很清晰了？首先调用<code>dispatch</code>方法，获取需要调用的<code>action</code>，也是就<code>actionName</code>，然后把<code>payload</code>传入，也就是<code>{test:1}</code>，然后完成之后调用<code>.then()</code>异步执行所需操作</p>\n<h2 id=\"commit-（mutation）\"><a href=\"#commit-（mutation）\" class=\"headerlink\" title=\"commit （mutation）\"></a>commit （mutation）</h2><p>先来看看实际应用是这么触发<code>commit</code>的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在触发<code>action</code>的时候，调用<code>commit</code>，至于为什么会有<code>commit</code>方法，是因为上面<code>registerAction</code> push的方法第一个传输传入了一个对象<code>{dispatch,commit...}</code>，然后把<code>dispatch</code>传入的<code>payload</code>再代入<code>commit</code>方法捏</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit (_type, _payload, _options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style commit</span></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload,</span><br><span class=\"line\">    options</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload, _options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mutation = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前对应的mutation方法集合</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown mutation type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历调用集合内的方法，最后把payload参数传入集合的方法，等会介绍handle函数</span></span><br><span class=\"line\">  <span class=\"comment\">// _withCommit方法是判断当前操作是否是通过commit提交来修改state的</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entry.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commitIterator</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      handler(payload)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 通知所有订阅者</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._subscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(mutation, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp;</span><br><span class=\"line\">    options &amp;&amp; options.silent</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(</span><br><span class=\"line\">      <span class=\"string\">`[vuex] mutation type: <span class=\"subst\">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</span><br><span class=\"line\">      <span class=\"string\">'Use the filter functionality in the vue-devtools'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">### installModule</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachMutation(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerMutation(store, namespacedType, mutation, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和<code>action</code>同理，注册所有的<code>mutation</code>，调用<code>registerMutation</code>方法</p>\n<h3 id=\"registerMutation\"><a href=\"#registerMutation\" class=\"headerlink\" title=\"registerMutation\"></a>registerMutation</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMutation</span> (<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedMutationHandler</span> (<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">    handler.call(store, local.state, payload)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>registerMutation</code>方法比较简单，直接把<code>state</code>、<code>payload</code>传入<code>handler</code>函数</p>\n<p>再来看看实际使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  changeTest(&#123; commit &#125;, payload)&#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'setTestValue'</span>, payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  setTestValue(state, payload)&#123;</span><br><span class=\"line\">    state.test = payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>commit</code>调用之后，获取到对应需要触发的<code>mutation</code>，也就是<code>setTestValue</code>，然后实际执行的是<code>registerMutation</code>处理赋值给 <code>store._mutations[&#39;setTestValue]</code>的方法集合，也就是<code>entry</code>，内部会传入两个参数，<code>state</code>、<code>payload</code>,这就是我们可以直接使用 <code>state.test = payload</code> 的原因</p>\n<h2 id=\"mapState-mapAction-mapGetter等工具函数\"><a href=\"#mapState-mapAction-mapGetter等工具函数\" class=\"headerlink\" title=\"mapState/mapAction/mapGetter等工具函数\"></a>mapState/mapAction/mapGetter等工具函数</h2><p>开发中我们经常会使用到<code>mapState</code>来获取数据<br><a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js\" target=\"_blank\" rel=\"noopener\">工具函数源码地址</a></p>\n<h3 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h3><p>先来看看我们在实际项目怎么使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 或者带命名空间的使用，这就是下面normalizeNamespace得作用</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a, <span class=\"comment\">// 如果不使用则需要通过 state.some.nested.module.a</span></span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js#L7\" target=\"_blank\" rel=\"noopener\">mapState 源码地址</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是判断是否使用了命名空间，如果没有的话namespace会被赋值为空，normalizeNamespace实现见代码底部</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapState = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, states</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 先把传入的states转换一下，转换例子如下，转换成数组对象的形式，都有key和val</span></span><br><span class=\"line\">  normalizeMap(states).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedState</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取state</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> state = <span class=\"keyword\">this</span>.$store.state</span><br><span class=\"line\">      <span class=\"keyword\">let</span> getters = <span class=\"keyword\">this</span>.$store.getters</span><br><span class=\"line\">      <span class=\"comment\">// 如果有命名则解析完成之后重新赋值state和getter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过模块来解析访问路径 some/nested/module =&gt;  store._modulesNamespaceMap['some/nested/module/] = &#123; // 当前模块 &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// 关于如何实现的，源码地址 https://github.com/vuejs/vuex/blob/665455f8da/src/store.js#L301</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = getModuleByNamespace(<span class=\"keyword\">this</span>.$store, <span class=\"string\">'mapState'</span>, namespace)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        state = <span class=\"built_in\">module</span>.context.state</span><br><span class=\"line\">        getters = <span class=\"built_in\">module</span>.context.getters</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的函数，则把state和getter传入到函数内</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则如果传入的是字符串，则直接取出返回数据，也就是上面使用 countAlias: 'count',</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'function'</span></span><br><span class=\"line\">        ? val.call(<span class=\"keyword\">this</span>, state, getters)</span><br><span class=\"line\">        : state[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark vuex getter for devtools</span></span><br><span class=\"line\">    res[key].vuex = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 最终把处理好的对象返回处理，所以可知mapState返回的是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Normalize the map</span></span><br><span class=\"line\"><span class=\"comment\"> * normalizeMap([1, 2, 3]) =&gt; [ &#123; key: 1, val: 1 &#125;, &#123; key: 2, val: 2 &#125;, &#123; key: 3, val: 3 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"> * normalizeMap(&#123;a: 1, b: 2, c: 3&#125;) =&gt; [ &#123; key: 'a', val: 1 &#125;, &#123; key: 'b', val: 2 &#125;, &#123; key: 'c', val: 3 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array|Object&#125; map</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeMap</span> (<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(map)</span><br><span class=\"line\">    ? map.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: key &#125;))</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.keys(map).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: map[key] &#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; fn</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Function&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeNamespace</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">namespace, map</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先判断第一个参数是否为字符串，因为我们大部分情况都是传递的是对象，只有使用命名空间的时候第一个参数会是字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不是字符串的话，把第一个参数也就是namespace赋值为map，自己置为空，这样就达到了第一个参数传入对象也是可以的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> namespace !== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      map = namespace</span><br><span class=\"line\">      namespace = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是对象，如果最后一个字符不是/，则自动拼接，因为 store._modulesNamespaceMap 下都是这样的key 'some/nested/module'</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体怎么实现这种路径的见源码 getNamespace 方法 https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (namespace.charAt(namespace.length - <span class=\"number\">1</span>) !== <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      namespace += <span class=\"string\">'/'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(namespace, map)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只讲<code>mapState</code>，其他的实现大同小异，都差不太多</p>\n<h2 id=\"vuex响应式原理\"><a href=\"#vuex响应式原理\" class=\"headerlink\" title=\"vuex响应式原理\"></a>vuex响应式原理</h2><p>为什么我们通过修改<code>state</code>，模板里的视图也一起更新了呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span> (<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldVm = store._vm</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化store的getter</span></span><br><span class=\"line\">  store.getters = &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取registerGetter方法注册的getter</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  forEachValue(wrappedGetters, (fn, key) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为getter的value都是函数，相当于vue的computed，这里直接执行获取结果</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(store)</span><br><span class=\"line\">    <span class=\"comment\">// 通过Object.defineProperty为给个getter设置get方法，改变getter获取值方式，如this.$store.getter.a会直接获取store._vm.a</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>: () =&gt; store._vm[key],</span><br><span class=\"line\">      enumerable: true // for local getters</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  // use a Vue instance to store the state tree</span><br><span class=\"line\">  // suppress warnings just in case the user has added</span><br><span class=\"line\">  // some funky global mixins</span><br><span class=\"line\">  // 先获取当前警告的配置</span><br><span class=\"line\">  const silent = Vue.config.silent</span><br><span class=\"line\">  // 将他置为true，意思是new Vue的时候不会抛出警告</span><br><span class=\"line\">  Vue.config.silent = true</span><br><span class=\"line\">  // 这里是关键，借助Vue的响应式来实现，这样state和getter的修改都会有响应式</span><br><span class=\"line\">  store._vm = new Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// new完之后恢复之前的配置</span></span><br><span class=\"line\">  Vue.config.silent = silent</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\">  <span class=\"comment\">// 保证修改值一定是通过mutation的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.strict) &#123;</span><br><span class=\"line\">    enableStrictMode(store)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注销旧的state的引用，销毁旧的Vue对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hot) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">      <span class=\"comment\">// to force getter re-evaluation for hot reloading.</span></span><br><span class=\"line\">      store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        oldVm._data.$$state = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面我们可以看到，<code>vuex</code>实现响应式，借助的是<code>Vue</code>的响应式，通过把<code>store.state</code>赋值给<code>store._vm.$$state</code>，这样修改<code>state</code>，同样<code>store._vm.$$state也</code>会被修改<br><code>getter</code>通过<code>Object.defineProperty</code>定义的<code>get</code>方法，访问的是<code>store._vm.computed</code>，让<code>getter</code>成为<code>vue</code>的计算实现，因此<code>getter</code>既拥有监听<code>store._vm.$$state</code>改变（并重新计算出自身的新值）的能力，又拥有在自身值改变之后通知外部<code>watcher</code>的能力</p>\n<h2 id=\"命名空间的副作用\"><a href=\"#命名空间的副作用\" class=\"headerlink\" title=\"命名空间的副作用\"></a>命名空间的副作用</h2><p>我们之前提到<code>action</code>和<code>mutation</code>对应的名称的值是一个数组，而不是直接的一个方法，正常应该下面这样👇<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actionCollect = &#123;</span><br><span class=\"line\">  changeValue: <span class=\"function\">(<span class=\"params\">&#123; commit &#125;, payload</span>))=&gt;</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是看源码我们知道，他是一个数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actionCollect = &#123;</span><br><span class=\"line\">    changeValue: [</span><br><span class=\"line\">      (&#123; commit &#125;, payload)=&gt;&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>难道<code>action</code>还有<code>mutaion</code>会有同名的吗？答案肯定是的，这就要讲到命名空间了<code>namespace</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    test1: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      state: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        changeValue: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">          state.a = payload</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    test2: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      state: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        test1: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          state: &#123;</span><br><span class=\"line\">            a: <span class=\"number\">3</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          mutations: &#123;</span><br><span class=\"line\">            changeValue: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">              state.a = payload</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'App'</span>,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'test1/changeValue'</span>, <span class=\"string\">'the same value'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1</span></span><br><span class=\"line\"><span class=\"comment\">// 输出：2</span></span><br></pre></td></tr></table></figure>\n<p>你会发现你<code>commit</code>了一次缺触发了两个不同模块的<code>mutation</code>，这就是命名空间的副作用，具体内部是如何处理<code>namespace</code>之前也讲到了，<a href=\"https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getNamespace (path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"keyword\">this</span>.root</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.reduce(<span class=\"function\">(<span class=\"params\">namespace, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span> = <span class=\"built_in\">module</span>.getChild(key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> namespace + (<span class=\"built_in\">module</span>.namespaced ? key + <span class=\"string\">'/'</span> : <span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;, <span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过模块的<code>key</code>来拼接，如之前代码设置的<code>namespace</code>，<code>namespace</code>就是<code>test1/changeValue</code></p>\n<p>所以使用<code>namespace</code>一定要注意路径名问题，还是就是避免名称相同，除非你就想这么干</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>vuex</code>源码就先讲这么多，其实还有好几个点没讲，例如各种工具方法和<code>vue-devtools</code>的实现，总体多读几遍还是可以看明白的，这就是<code>debugger</code>的过程了</p>\n<p>原文地址 <a href=\"http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/\">http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/</a></p>"},{"title":"读zepto源码，封装自己的zepto库（一）","date":"2017-06-29T02:48:02.000Z","_content":"\n## 写在前面\n\n> 读zepto源码，封装自己的zepto库系列是自己在读zepto源码的一些理解，有错误的地方还望指出。如果觉得本系列对你有所帮助，还请持续关注wclimb，谢谢。\n\n## zepto的整体架构\n\n首先来看看整体代码结构\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\ttest:function(){\n\t\t\talert(1)\n\t\t}\n\t}\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n\n```\n\n首先我们设置了一个闭包，避免产生全局变量\n<!-- more -->\n```js\n(function(){\n\t...\n})()\n\n```\n\n我们定义一个对象wclimb和$，以便后面使用\n\n```js\nvar wclimb = {},$\n\n```\n\n$函数返回了wclimb.init(selector),我们知道使用zepto的时候，一般是$('p')，而selector就是p元素，当然不止这一种情况如$(function(){}),所以对选择器后面我们要做判断\n```js\n$ = function(selector){\n\treturn wclimb.init(selector)\n}\n\n```\n\n而wclimb.init首先定义了一个dom，通过选择器选取的元素赋值给dom，最后返回wclimb.init，传入dom和选择元素selector\n\n```js\nwclimb.init = function(selector){\n\tvar dom;\n\tdom = document.querySelector(selector);\n\treturn wclimb.Z(dom,selector)\n}\n\n```\n\n我们可以看到之前我们定义了对象wclimb，而后我们就往里面添加了一些方法，就像：\n\n```js\nwclimb = {\n\tinit：function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelector(selector);\n\t\treturn wclimb.Z(dom,selector)\n\t},\n\tZ: function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n}\n\n```\n通过wclimb.Z，如果有看过zepto源码的同学应该对此有了解.每次用$调用的时候,将直接返回一个Z的实例.达到无new调用的效果,$('p')返回一个实例，然后$('p').test()调用他的原形方法，这里的方法是test\n\n```js\nwclimb.Z = function(dom,selector){\n\treturn new Z(dom,selector)\n}\n\nfunction Z(dom,selector) {\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tthis[i] = dom[i]\n\t}\n\tthis.selector = selector;\n\tthis.length = dom.length\n}\n```\n\n由于我们是return new Z(dom,selector),那自然,我们需要手动的把wclimb.Z的prototype指向Z的prototype\n\n```js\nwclimb.Z.prototype = Z.prototype{}\n\n我们可以在里面添加方法了，如addClass eq等，我们试试加一个test\n\nwclimb.Z.prototype = Z.prototype{\n\ttest: function(){\n\t\tconsole.log('test')\n\t}\n}\n```\nZ函数是这样的，因为我们选择器选择的元素是一个数组（其实不是）我们把this指向选择的元素，然后添加两个元素selector和length，分别代表选择的元素名和元素的长度\n\n```js\nfunction Z(dom,selector) {\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tthis[i] = dom[i]\n\t}\n\tthis.selector = selector;\n\tthis.length = dom.length\n}\n\n\n```\n\n最后我们在window上对外暴露一个接口,我们就可以用 $('p') 或者wclimb('p') 即可调用.\n\n```js\nwindow.$ = window.wclimb = $\n```\n\n现在可以试试能不能运行\n\n```js\nhtml：<p>test</p>\n\njs：$('p')  调用方法试试 $('p').test()\n```\n\n我们的zepto已经完成了，是不是很简单？骗你的，还差得远呢，后面会慢慢完善。待续。。。\n如果你觉得该文章帮助到了你，不妨star一下https://github.com/wclimb/wclimb.github.io ，感谢\n","source":"_posts/读zepto源码，封装自己的zepto库（一）.md","raw":"---\ntitle: 读zepto源码，封装自己的zepto库（一）\ndate: 2017-06-29 10:48:02\ntags:\n- zepto\n- javascript\n- 原创\n---\n\n## 写在前面\n\n> 读zepto源码，封装自己的zepto库系列是自己在读zepto源码的一些理解，有错误的地方还望指出。如果觉得本系列对你有所帮助，还请持续关注wclimb，谢谢。\n\n## zepto的整体架构\n\n首先来看看整体代码结构\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\ttest:function(){\n\t\t\talert(1)\n\t\t}\n\t}\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n\n```\n\n首先我们设置了一个闭包，避免产生全局变量\n<!-- more -->\n```js\n(function(){\n\t...\n})()\n\n```\n\n我们定义一个对象wclimb和$，以便后面使用\n\n```js\nvar wclimb = {},$\n\n```\n\n$函数返回了wclimb.init(selector),我们知道使用zepto的时候，一般是$('p')，而selector就是p元素，当然不止这一种情况如$(function(){}),所以对选择器后面我们要做判断\n```js\n$ = function(selector){\n\treturn wclimb.init(selector)\n}\n\n```\n\n而wclimb.init首先定义了一个dom，通过选择器选取的元素赋值给dom，最后返回wclimb.init，传入dom和选择元素selector\n\n```js\nwclimb.init = function(selector){\n\tvar dom;\n\tdom = document.querySelector(selector);\n\treturn wclimb.Z(dom,selector)\n}\n\n```\n\n我们可以看到之前我们定义了对象wclimb，而后我们就往里面添加了一些方法，就像：\n\n```js\nwclimb = {\n\tinit：function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelector(selector);\n\t\treturn wclimb.Z(dom,selector)\n\t},\n\tZ: function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n}\n\n```\n通过wclimb.Z，如果有看过zepto源码的同学应该对此有了解.每次用$调用的时候,将直接返回一个Z的实例.达到无new调用的效果,$('p')返回一个实例，然后$('p').test()调用他的原形方法，这里的方法是test\n\n```js\nwclimb.Z = function(dom,selector){\n\treturn new Z(dom,selector)\n}\n\nfunction Z(dom,selector) {\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tthis[i] = dom[i]\n\t}\n\tthis.selector = selector;\n\tthis.length = dom.length\n}\n```\n\n由于我们是return new Z(dom,selector),那自然,我们需要手动的把wclimb.Z的prototype指向Z的prototype\n\n```js\nwclimb.Z.prototype = Z.prototype{}\n\n我们可以在里面添加方法了，如addClass eq等，我们试试加一个test\n\nwclimb.Z.prototype = Z.prototype{\n\ttest: function(){\n\t\tconsole.log('test')\n\t}\n}\n```\nZ函数是这样的，因为我们选择器选择的元素是一个数组（其实不是）我们把this指向选择的元素，然后添加两个元素selector和length，分别代表选择的元素名和元素的长度\n\n```js\nfunction Z(dom,selector) {\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tthis[i] = dom[i]\n\t}\n\tthis.selector = selector;\n\tthis.length = dom.length\n}\n\n\n```\n\n最后我们在window上对外暴露一个接口,我们就可以用 $('p') 或者wclimb('p') 即可调用.\n\n```js\nwindow.$ = window.wclimb = $\n```\n\n现在可以试试能不能运行\n\n```js\nhtml：<p>test</p>\n\njs：$('p')  调用方法试试 $('p').test()\n```\n\n我们的zepto已经完成了，是不是很简单？骗你的，还差得远呢，后面会慢慢完善。待续。。。\n如果你觉得该文章帮助到了你，不妨star一下https://github.com/wclimb/wclimb.github.io ，感谢\n","slug":"读zepto源码，封装自己的zepto库（一）","published":1,"updated":"2019-06-06T01:06:26.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9n001n59x32h4wieox","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><blockquote>\n<p>读zepto源码，封装自己的zepto库系列是自己在读zepto源码的一些理解，有错误的地方还望指出。如果觉得本系列对你有所帮助，还请持续关注wclimb，谢谢。</p>\n</blockquote>\n<h2 id=\"zepto的整体架构\"><a href=\"#zepto的整体架构\" class=\"headerlink\" title=\"zepto的整体架构\"></a>zepto的整体架构</h2><p>首先来看看整体代码结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\ttest:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>首先我们设置了一个闭包，避免产生全局变量<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>我们定义一个对象wclimb和$，以便后面使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br></pre></td></tr></table></figure>\n<p>$函数返回了wclimb.init(selector),我们知道使用zepto的时候，一般是$(‘p’)，而selector就是p元素，当然不止这一种情况如$(function(){}),所以对选择器后面我们要做判断<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而wclimb.init首先定义了一个dom，通过选择器选取的元素赋值给dom，最后返回wclimb.init，传入dom和选择元素selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\tdom = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到之前我们定义了对象wclimb，而后我们就往里面添加了一些方法，就像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb = &#123;</span><br><span class=\"line\">\tinit：<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tZ: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过wclimb.Z，如果有看过zepto源码的同学应该对此有了解.每次用$调用的时候,将直接返回一个Z的实例.达到无new调用的效果,$(‘p’)返回一个实例，然后$(‘p’).test()调用他的原形方法，这里的方法是test</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于我们是return new Z(dom,selector),那自然,我们需要手动的把wclimb.Z的prototype指向Z的prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z.prototype = Z.prototype&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以在里面添加方法了，如addClass eq等，我们试试加一个test</span><br><span class=\"line\"></span><br><span class=\"line\">wclimb.Z.prototype = Z.prototype&#123;</span><br><span class=\"line\">\ttest: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Z函数是这样的，因为我们选择器选择的元素是一个数组（其实不是）我们把this指向选择的元素，然后添加两个元素selector和length，分别代表选择的元素名和元素的长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后我们在window上对外暴露一个接口,我们就可以用 $(‘p’) 或者wclimb(‘p’) 即可调用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br></pre></td></tr></table></figure>\n<p>现在可以试试能不能运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html：&lt;p&gt;test&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">js：$('p')  调用方法试试 $('p').test()</span></span><br></pre></td></tr></table></figure>\n<p>我们的zepto已经完成了，是不是很简单？骗你的，还差得远呢，后面会慢慢完善。待续。。。<br>如果你觉得该文章帮助到了你，不妨star一下<a href=\"https://github.com/wclimb/wclimb.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wclimb.github.io</a> ，感谢</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><blockquote>\n<p>读zepto源码，封装自己的zepto库系列是自己在读zepto源码的一些理解，有错误的地方还望指出。如果觉得本系列对你有所帮助，还请持续关注wclimb，谢谢。</p>\n</blockquote>\n<h2 id=\"zepto的整体架构\"><a href=\"#zepto的整体架构\" class=\"headerlink\" title=\"zepto的整体架构\"></a>zepto的整体架构</h2><p>首先来看看整体代码结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\ttest:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>首先我们设置了一个闭包，避免产生全局变量<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p>我们定义一个对象wclimb和$，以便后面使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br></pre></td></tr></table></figure>\n<p>$函数返回了wclimb.init(selector),我们知道使用zepto的时候，一般是$(‘p’)，而selector就是p元素，当然不止这一种情况如$(function(){}),所以对选择器后面我们要做判断<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而wclimb.init首先定义了一个dom，通过选择器选取的元素赋值给dom，最后返回wclimb.init，传入dom和选择元素selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\tdom = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到之前我们定义了对象wclimb，而后我们就往里面添加了一些方法，就像：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb = &#123;</span><br><span class=\"line\">\tinit：<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tZ: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过wclimb.Z，如果有看过zepto源码的同学应该对此有了解.每次用$调用的时候,将直接返回一个Z的实例.达到无new调用的效果,$(‘p’)返回一个实例，然后$(‘p’).test()调用他的原形方法，这里的方法是test</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于我们是return new Z(dom,selector),那自然,我们需要手动的把wclimb.Z的prototype指向Z的prototype</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z.prototype = Z.prototype&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以在里面添加方法了，如addClass eq等，我们试试加一个test</span><br><span class=\"line\"></span><br><span class=\"line\">wclimb.Z.prototype = Z.prototype&#123;</span><br><span class=\"line\">\ttest: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Z函数是这样的，因为我们选择器选择的元素是一个数组（其实不是）我们把this指向选择的元素，然后添加两个元素selector和length，分别代表选择的元素名和元素的长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后我们在window上对外暴露一个接口,我们就可以用 $(‘p’) 或者wclimb(‘p’) 即可调用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br></pre></td></tr></table></figure>\n<p>现在可以试试能不能运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html：&lt;p&gt;test&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">js：$('p')  调用方法试试 $('p').test()</span></span><br></pre></td></tr></table></figure>\n<p>我们的zepto已经完成了，是不是很简单？骗你的，还差得远呢，后面会慢慢完善。待续。。。<br>如果你觉得该文章帮助到了你，不妨star一下<a href=\"https://github.com/wclimb/wclimb.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/wclimb.github.io</a> ，感谢</p>"},{"title":"webpack系列之编写一个loader","date":"2019-07-05T01:24:45.000Z","_content":"\n## 写在前面\n\n`webpack`的`loader`的应用是非常广泛的，完全离不开它，我们开发的过程往往都是使用别人编写好的`loader`来处理文件，今天我们就来编写一个`loader`。\n\n## 基础\n\n首先我们看看`loader`是怎么使用在`webpack`上的\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: 'css-loader',\n      },\n    ],\n  },\n}\n```\n使用起来很简单，如果你需要处理`css`文件，那么安装好`css-loader`包，然后正则匹配到所有`.css`的文件，使用`css-loader`进行文件得处理\n\n<!-- more -->\n\n## 编写\n\n编写之前我们先给定个需求吧，设想我们能不能像vue那样编写，处理`style/script/template`，这样，我们先只处理`style`的内容，把他提取处理。\n\n### 安装\n\n```\n> npm init -y\n> cnpm i webpack webpack-cli webpack-dev-server clean-webpack-plugin html-webpack-plugin -D\n```\n\n### 配置\n\n先来编写一个配置文件\n\n新建文件 `webpack.config.js`\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: path.resolve(__dirname, 'loader/loader.js'),\n      },\n    ],\n  },\n};\n```\n\n项目下新建`src`文件夹，`src`项目新建`main.js`、`a.test`文件\n\n`main.js`\n```js\nimport './a.test';\nconsole.log('loader test');\n```\n`a.test`\n```css\n<style>\nbody{\n  background: #ccc\n}\n</style>\n```\n我们重点是`a.test`文件，等会我会用`loader`处理他，让他显示到页面中\n\n-----------分割线-----------\n\n现在我们在项目下新建`loader`文件夹，文件夹下面新建`loader.js`，这就是我们编写的`loader`\n\n`loader/loader.js`\n```js\nmodule.exports = function(sSource) {\n  let sStyleString = sSource\n    .match(/<style>([\\s\\S]*)<\\/style>/)[1]\n    .replace(/\\n/g, '');\n  return `\n      let head = document.querySelector('head');\n      let style = document.createElement('style');\n      style.type = 'text/css';\n      let cssNode = document.createTextNode('${sStyleString}');\n      style.appendChild(cssNode);\n      head.appendChild(style);`;\n};\n```\n\n没错，就这么多，`loader`接收一个参数，也就是`sSource`，内容就是`.test`后缀下的文件内容，我们只需要获取内容，然后做我们想做的一切事情，比如，我提取了文件里`css`的部分，像`.vue`那样，然后去写一段`js`，把这段`css`通过`<style></style>`的方式放到页面上去\n\n现在你运行一下这个项目，然后查看浏览器，浏览器的背景是否变了颜色？\n\n## api\n\n`loader`的上下文通过`this`访问，举几个例子\n\n### this.query\n\n1. 如果这个 `loader` 配置了 `options` 对象的话，`this.query` 就指向这个 `option` 对象\n2. 如果 `loader` 中没有 `options`，而是以 `query` 字符串作为参数调用时，`this.query` 就是一个以 `?` 开头的字符串\n\n### this.context\n\n模块所在的目录\n\n### this.emitFile\n\n```js\nemitFile(name: string, content: Buffer|string, sourceMap: {...})\n```\n可以通过用它来生成一个文件\n\n## 总结\n\n写一个`loader`很简单，只需要你有对文件内容处理的能力，还是很容易上手的，关键不在`loader`，而在于你的需求复杂程度\n\n本文地址 [webpack系列之编写一个loader](http://www.wclimb.site/2019/07/05/webpack系列之编写一个loader/)\n","source":"_posts/webpack系列之编写一个loader.md","raw":"---\ntitle: webpack系列之编写一个loader\ndate: 2019-07-05 09:24:45\ntags:\n- javascript\n- 原创\n- webpack\ncategories: [javascript,webpack]\n---\n\n## 写在前面\n\n`webpack`的`loader`的应用是非常广泛的，完全离不开它，我们开发的过程往往都是使用别人编写好的`loader`来处理文件，今天我们就来编写一个`loader`。\n\n## 基础\n\n首先我们看看`loader`是怎么使用在`webpack`上的\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: 'css-loader',\n      },\n    ],\n  },\n}\n```\n使用起来很简单，如果你需要处理`css`文件，那么安装好`css-loader`包，然后正则匹配到所有`.css`的文件，使用`css-loader`进行文件得处理\n\n<!-- more -->\n\n## 编写\n\n编写之前我们先给定个需求吧，设想我们能不能像vue那样编写，处理`style/script/template`，这样，我们先只处理`style`的内容，把他提取处理。\n\n### 安装\n\n```\n> npm init -y\n> cnpm i webpack webpack-cli webpack-dev-server clean-webpack-plugin html-webpack-plugin -D\n```\n\n### 配置\n\n先来编写一个配置文件\n\n新建文件 `webpack.config.js`\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: path.resolve(__dirname, 'loader/loader.js'),\n      },\n    ],\n  },\n};\n```\n\n项目下新建`src`文件夹，`src`项目新建`main.js`、`a.test`文件\n\n`main.js`\n```js\nimport './a.test';\nconsole.log('loader test');\n```\n`a.test`\n```css\n<style>\nbody{\n  background: #ccc\n}\n</style>\n```\n我们重点是`a.test`文件，等会我会用`loader`处理他，让他显示到页面中\n\n-----------分割线-----------\n\n现在我们在项目下新建`loader`文件夹，文件夹下面新建`loader.js`，这就是我们编写的`loader`\n\n`loader/loader.js`\n```js\nmodule.exports = function(sSource) {\n  let sStyleString = sSource\n    .match(/<style>([\\s\\S]*)<\\/style>/)[1]\n    .replace(/\\n/g, '');\n  return `\n      let head = document.querySelector('head');\n      let style = document.createElement('style');\n      style.type = 'text/css';\n      let cssNode = document.createTextNode('${sStyleString}');\n      style.appendChild(cssNode);\n      head.appendChild(style);`;\n};\n```\n\n没错，就这么多，`loader`接收一个参数，也就是`sSource`，内容就是`.test`后缀下的文件内容，我们只需要获取内容，然后做我们想做的一切事情，比如，我提取了文件里`css`的部分，像`.vue`那样，然后去写一段`js`，把这段`css`通过`<style></style>`的方式放到页面上去\n\n现在你运行一下这个项目，然后查看浏览器，浏览器的背景是否变了颜色？\n\n## api\n\n`loader`的上下文通过`this`访问，举几个例子\n\n### this.query\n\n1. 如果这个 `loader` 配置了 `options` 对象的话，`this.query` 就指向这个 `option` 对象\n2. 如果 `loader` 中没有 `options`，而是以 `query` 字符串作为参数调用时，`this.query` 就是一个以 `?` 开头的字符串\n\n### this.context\n\n模块所在的目录\n\n### this.emitFile\n\n```js\nemitFile(name: string, content: Buffer|string, sourceMap: {...})\n```\n可以通过用它来生成一个文件\n\n## 总结\n\n写一个`loader`很简单，只需要你有对文件内容处理的能力，还是很容易上手的，关键不在`loader`，而在于你的需求复杂程度\n\n本文地址 [webpack系列之编写一个loader](http://www.wclimb.site/2019/07/05/webpack系列之编写一个loader/)\n","slug":"webpack系列之编写一个loader","published":1,"updated":"2019-07-08T01:29:59.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9p001p59x31whbob0f","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p><code>webpack</code>的<code>loader</code>的应用是非常广泛的，完全离不开它，我们开发的过程往往都是使用别人编写好的<code>loader</code>来处理文件，今天我们就来编写一个<code>loader</code>。</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>首先我们看看<code>loader</code>是怎么使用在<code>webpack</code>上的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起来很简单，如果你需要处理<code>css</code>文件，那么安装好<code>css-loader</code>包，然后正则匹配到所有<code>.css</code>的文件，使用<code>css-loader</code>进行文件得处理</p>\n<a id=\"more\"></a>\n<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p>编写之前我们先给定个需求吧，设想我们能不能像vue那样编写，处理<code>style/script/template</code>，这样，我们先只处理<code>style</code>的内容，把他提取处理。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm i webpack webpack-cli webpack-dev-server clean-webpack-plugin html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>先来编写一个配置文件</p>\n<p>新建文件 <code>webpack.config.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        use: path.resolve(__dirname, <span class=\"string\">'loader/loader.js'</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>项目下新建<code>src</code>文件夹，<code>src</code>项目新建<code>main.js</code>、<code>a.test</code>文件</p>\n<p><code>main.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./a.test'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'loader test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p><code>a.test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们重点是<code>a.test</code>文件，等会我会用<code>loader</code>处理他，让他显示到页面中</p>\n<p>———–分割线———–</p>\n<p>现在我们在项目下新建<code>loader</code>文件夹，文件夹下面新建<code>loader.js</code>，这就是我们编写的<code>loader</code></p>\n<p><code>loader/loader.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sSource</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sStyleString = sSource</span><br><span class=\"line\">    .match(<span class=\"regexp\">/&lt;style&gt;([\\s\\S]*)&lt;\\/style&gt;/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/\\n/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      let head = document.querySelector('head');</span></span><br><span class=\"line\"><span class=\"string\">      let style = document.createElement('style');</span></span><br><span class=\"line\"><span class=\"string\">      style.type = 'text/css';</span></span><br><span class=\"line\"><span class=\"string\">      let cssNode = document.createTextNode('<span class=\"subst\">$&#123;sStyleString&#125;</span>');</span></span><br><span class=\"line\"><span class=\"string\">      style.appendChild(cssNode);</span></span><br><span class=\"line\"><span class=\"string\">      head.appendChild(style);`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>没错，就这么多，<code>loader</code>接收一个参数，也就是<code>sSource</code>，内容就是<code>.test</code>后缀下的文件内容，我们只需要获取内容，然后做我们想做的一切事情，比如，我提取了文件里<code>css</code>的部分，像<code>.vue</code>那样，然后去写一段<code>js</code>，把这段<code>css</code>通过<code>&lt;style&gt;&lt;/style&gt;</code>的方式放到页面上去</p>\n<p>现在你运行一下这个项目，然后查看浏览器，浏览器的背景是否变了颜色？</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><p><code>loader</code>的上下文通过<code>this</code>访问，举几个例子</p>\n<h3 id=\"this-query\"><a href=\"#this-query\" class=\"headerlink\" title=\"this.query\"></a>this.query</h3><ol>\n<li>如果这个 <code>loader</code> 配置了 <code>options</code> 对象的话，<code>this.query</code> 就指向这个 <code>option</code> 对象</li>\n<li>如果 <code>loader</code> 中没有 <code>options</code>，而是以 <code>query</code> 字符串作为参数调用时，<code>this.query</code> 就是一个以 <code>?</code> 开头的字符串</li>\n</ol>\n<h3 id=\"this-context\"><a href=\"#this-context\" class=\"headerlink\" title=\"this.context\"></a>this.context</h3><p>模块所在的目录</p>\n<h3 id=\"this-emitFile\"><a href=\"#this-emitFile\" class=\"headerlink\" title=\"this.emitFile\"></a>this.emitFile</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emitFile(name: string, <span class=\"attr\">content</span>: Buffer|string, <span class=\"attr\">sourceMap</span>: &#123;...&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以通过用它来生成一个文件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>写一个<code>loader</code>很简单，只需要你有对文件内容处理的能力，还是很容易上手的，关键不在<code>loader</code>，而在于你的需求复杂程度</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/07/05/webpack系列之编写一个loader/\">webpack系列之编写一个loader</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p><code>webpack</code>的<code>loader</code>的应用是非常广泛的，完全离不开它，我们开发的过程往往都是使用别人编写好的<code>loader</code>来处理文件，今天我们就来编写一个<code>loader</code>。</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>首先我们看看<code>loader</code>是怎么使用在<code>webpack</code>上的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起来很简单，如果你需要处理<code>css</code>文件，那么安装好<code>css-loader</code>包，然后正则匹配到所有<code>.css</code>的文件，使用<code>css-loader</code>进行文件得处理</p>","more":"<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p>编写之前我们先给定个需求吧，设想我们能不能像vue那样编写，处理<code>style/script/template</code>，这样，我们先只处理<code>style</code>的内容，把他提取处理。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm i webpack webpack-cli webpack-dev-server clean-webpack-plugin html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>先来编写一个配置文件</p>\n<p>新建文件 <code>webpack.config.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">        use: path.resolve(__dirname, <span class=\"string\">'loader/loader.js'</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>项目下新建<code>src</code>文件夹，<code>src</code>项目新建<code>main.js</code>、<code>a.test</code>文件</p>\n<p><code>main.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./a.test'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'loader test'</span>);</span><br></pre></td></tr></table></figure></p>\n<p><code>a.test</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们重点是<code>a.test</code>文件，等会我会用<code>loader</code>处理他，让他显示到页面中</p>\n<p>———–分割线———–</p>\n<p>现在我们在项目下新建<code>loader</code>文件夹，文件夹下面新建<code>loader.js</code>，这就是我们编写的<code>loader</code></p>\n<p><code>loader/loader.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sSource</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sStyleString = sSource</span><br><span class=\"line\">    .match(<span class=\"regexp\">/&lt;style&gt;([\\s\\S]*)&lt;\\/style&gt;/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/\\n/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      let head = document.querySelector('head');</span></span><br><span class=\"line\"><span class=\"string\">      let style = document.createElement('style');</span></span><br><span class=\"line\"><span class=\"string\">      style.type = 'text/css';</span></span><br><span class=\"line\"><span class=\"string\">      let cssNode = document.createTextNode('<span class=\"subst\">$&#123;sStyleString&#125;</span>');</span></span><br><span class=\"line\"><span class=\"string\">      style.appendChild(cssNode);</span></span><br><span class=\"line\"><span class=\"string\">      head.appendChild(style);`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>没错，就这么多，<code>loader</code>接收一个参数，也就是<code>sSource</code>，内容就是<code>.test</code>后缀下的文件内容，我们只需要获取内容，然后做我们想做的一切事情，比如，我提取了文件里<code>css</code>的部分，像<code>.vue</code>那样，然后去写一段<code>js</code>，把这段<code>css</code>通过<code>&lt;style&gt;&lt;/style&gt;</code>的方式放到页面上去</p>\n<p>现在你运行一下这个项目，然后查看浏览器，浏览器的背景是否变了颜色？</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><p><code>loader</code>的上下文通过<code>this</code>访问，举几个例子</p>\n<h3 id=\"this-query\"><a href=\"#this-query\" class=\"headerlink\" title=\"this.query\"></a>this.query</h3><ol>\n<li>如果这个 <code>loader</code> 配置了 <code>options</code> 对象的话，<code>this.query</code> 就指向这个 <code>option</code> 对象</li>\n<li>如果 <code>loader</code> 中没有 <code>options</code>，而是以 <code>query</code> 字符串作为参数调用时，<code>this.query</code> 就是一个以 <code>?</code> 开头的字符串</li>\n</ol>\n<h3 id=\"this-context\"><a href=\"#this-context\" class=\"headerlink\" title=\"this.context\"></a>this.context</h3><p>模块所在的目录</p>\n<h3 id=\"this-emitFile\"><a href=\"#this-emitFile\" class=\"headerlink\" title=\"this.emitFile\"></a>this.emitFile</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emitFile(name: string, <span class=\"attr\">content</span>: Buffer|string, <span class=\"attr\">sourceMap</span>: &#123;...&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以通过用它来生成一个文件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>写一个<code>loader</code>很简单，只需要你有对文件内容处理的能力，还是很容易上手的，关键不在<code>loader</code>，而在于你的需求复杂程度</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/07/05/webpack系列之编写一个loader/\">webpack系列之编写一个loader</a></p>"},{"title":"读zepto源码，封装自己的zepto库（二）","date":"2017-07-17T14:01:36.000Z","_content":"\n距离上一篇zepto源码分析已经过去大半个月，想想自己都过意不去，不过之前分享了一篇node博客教程，还算干了点正事。接下来我们继续封装自己的库吧\n\n\n## 上节代码概览\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\ttest:function(){\n\t\t\talert(1)\n\t\t}\n\t}\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n\n```\n\n## each方法\n<!-- more -->\n在`wclimb.Z.prototype=Z.prototype=`里面添加方法each\n\n```js\nwclimb.Z.prototype  =  Z.prototype  =  {\n\teach:function(callback){\n\t\t[].every.call(this, function(el, idx){\n        return callback.call(el, idx, el) !== false\n      })\n      return this;\n\t}\n}\n```\n通过数组的`every`方法进行遍历，然后看看每次`callback`是不是都不是`false`，如果是则结束遍历\n\n最后通过 `return this` 来达到链式调用的效果\n\n## addClass方法\n\n继续在里面添加addClass方法\n\n```js\naddClass:function(name){\n\tif (!name) return this\n      return this.each(function(el,idx){\n        if (!('className' in this)) return\n        classList = [];\n\n        var cls = className(this) \n        // newName = funcArg(this, name, idx, cls)\n        name.split(/\\s+/g).forEach(function(klass){\n\n          // if (!$(this).hasClass(klass)) \n          \tclassList.push(klass)\n          \n        }, this)\n      \n        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n     })\n}\n```\n* 我们先判断`name`存在与否，没有就直接`return this`，支持链式调用\n* 新建一个数组，存放我们要添加的`class`，因为可能要同时添加多个\n* 通过调用`className`方法来获取之前的`class`，并保存起来。`clasName`方法在下面\n* 我们添加`class`一般是这样`addClass('a b c')`，所以我们通过正则表达式把他们用空格分开`/\\s+/g`,用`+`的原因是，可能会有多个空格的存在，接着对他们进行循环\n* 通过hasClass判断之前是否已经存在需要添加的class，如果有就push到`classList`数组里面。我们先注释掉hasClass这段代码，因为其中用到了$(this) ,querySelector是不支持的哟，所以后面我们得作判断，判断$()这里面放的是元素、函数、类数组等等。\n* 最后通过函数`className`方法把他们用空格连接起来\n\n\n发现里面有一个没有声明的`className`方法\n所以我们在`wclimb.Z.prototype=Z.prototype=`上面声明该函数\n```js\n//获取或者设置class\nfunction className(node, value){\n\tvar klass = node.className || ''\t\n\nif (value === undefined) return klass\n\tnode.className = value\n}\n```\n该方法主要是获取class和设置class的作用\n\n## hasClass方法\n```js\nhasClass : function(cls) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    for (var i = 0; i < this.length; i++) {\n        if (this[i].className.match(reg)) return true;\n            return false;\n    }\n    return this;\n}\n```\n通过正则匹配，如果存在则返回`true`，否则返回`false`，最后`return this`支持链式调用\n\n\n现在来试试效果吧\n```js\nhtml:\n\t<p class=\"a\"></p>\njs:\n\t$('p').addClass('test other') // <p class=\"a test other\"></p>\n\tconsole.log($('p').hasClass('a')) // true\n```\n## 代码\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\n\t function className(node, value){//获取或者设置class\n\t    var klass = node.className || ''\t \n\n\t    if (value === undefined) return klass\n\t    node.className = value\n\n\t  }\n\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\teach:function(callback){\n\t\t\t[].every.call(this, function(el, idx){\n\t        return callback.call(el, idx, el) !== false\n\t      })\n\t      return this;\n\t\t},\n\t\taddClass:function(name){\n\t\t\tif (!name) return this\n\t      \treturn this.each(function(el,idx){\n\t\t        if (!('className' in this)) return\n\t\t        classList = [];\n\n\t\t        var cls = className(this) \n\t\t       \n\t\t        name.split(/\\s+/g).forEach(function(klass){\n\n\t\t          // if (!$(this).hasClass(klass))\n\t\t           classList.push(klass)\n\n\t\t        }, this)\n\t\t       \n\t\t        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n\n\t\t    })\n\t\t},\n\t\thasClass : function(cls) {\n\t\t    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\t\t    for (var i = 0; i < this.length; i++) {\n\t\t        if (this[i].className.match(reg)) return true;\n\t\t            return false;\n\t\t    }\n\t\t    return this;\n\t\t}\n\t}\n\t\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n```","source":"_posts/读zepto源码，封装自己的zepto库（二）.md","raw":"---\ntitle: 读zepto源码，封装自己的zepto库（二）\ndate: 2017-07-17 22:01:36\ntags:\n- zepto\n- javascript\n- 原创\n---\n\n距离上一篇zepto源码分析已经过去大半个月，想想自己都过意不去，不过之前分享了一篇node博客教程，还算干了点正事。接下来我们继续封装自己的库吧\n\n\n## 上节代码概览\n\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\ttest:function(){\n\t\t\talert(1)\n\t\t}\n\t}\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n\n```\n\n## each方法\n<!-- more -->\n在`wclimb.Z.prototype=Z.prototype=`里面添加方法each\n\n```js\nwclimb.Z.prototype  =  Z.prototype  =  {\n\teach:function(callback){\n\t\t[].every.call(this, function(el, idx){\n        return callback.call(el, idx, el) !== false\n      })\n      return this;\n\t}\n}\n```\n通过数组的`every`方法进行遍历，然后看看每次`callback`是不是都不是`false`，如果是则结束遍历\n\n最后通过 `return this` 来达到链式调用的效果\n\n## addClass方法\n\n继续在里面添加addClass方法\n\n```js\naddClass:function(name){\n\tif (!name) return this\n      return this.each(function(el,idx){\n        if (!('className' in this)) return\n        classList = [];\n\n        var cls = className(this) \n        // newName = funcArg(this, name, idx, cls)\n        name.split(/\\s+/g).forEach(function(klass){\n\n          // if (!$(this).hasClass(klass)) \n          \tclassList.push(klass)\n          \n        }, this)\n      \n        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n     })\n}\n```\n* 我们先判断`name`存在与否，没有就直接`return this`，支持链式调用\n* 新建一个数组，存放我们要添加的`class`，因为可能要同时添加多个\n* 通过调用`className`方法来获取之前的`class`，并保存起来。`clasName`方法在下面\n* 我们添加`class`一般是这样`addClass('a b c')`，所以我们通过正则表达式把他们用空格分开`/\\s+/g`,用`+`的原因是，可能会有多个空格的存在，接着对他们进行循环\n* 通过hasClass判断之前是否已经存在需要添加的class，如果有就push到`classList`数组里面。我们先注释掉hasClass这段代码，因为其中用到了$(this) ,querySelector是不支持的哟，所以后面我们得作判断，判断$()这里面放的是元素、函数、类数组等等。\n* 最后通过函数`className`方法把他们用空格连接起来\n\n\n发现里面有一个没有声明的`className`方法\n所以我们在`wclimb.Z.prototype=Z.prototype=`上面声明该函数\n```js\n//获取或者设置class\nfunction className(node, value){\n\tvar klass = node.className || ''\t\n\nif (value === undefined) return klass\n\tnode.className = value\n}\n```\n该方法主要是获取class和设置class的作用\n\n## hasClass方法\n```js\nhasClass : function(cls) {\n    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n    for (var i = 0; i < this.length; i++) {\n        if (this[i].className.match(reg)) return true;\n            return false;\n    }\n    return this;\n}\n```\n通过正则匹配，如果存在则返回`true`，否则返回`false`，最后`return this`支持链式调用\n\n\n现在来试试效果吧\n```js\nhtml:\n\t<p class=\"a\"></p>\njs:\n\t$('p').addClass('test other') // <p class=\"a test other\"></p>\n\tconsole.log($('p').hasClass('a')) // true\n```\n## 代码\n```js\n(function(){\n\n\tvar wclimb = {},$\n\n\t$ = function(selector){\n\t\treturn wclimb.init(selector)\n\t}\n\twclimb.init = function(selector){\n\t\tvar dom;\n\t\tdom = document.querySelectorAll(selector);\n\n\t\treturn wclimb.Z(dom,selector)\n\n\t}\n\twclimb.Z = function(dom,selector){\n\t\treturn new Z(dom,selector)\n\t}\n\n\t function className(node, value){//获取或者设置class\n\t    var klass = node.className || ''\t \n\n\t    if (value === undefined) return klass\n\t    node.className = value\n\n\t  }\n\n\twclimb.Z.prototype  =  Z.prototype  =  {\n\t\teach:function(callback){\n\t\t\t[].every.call(this, function(el, idx){\n\t        return callback.call(el, idx, el) !== false\n\t      })\n\t      return this;\n\t\t},\n\t\taddClass:function(name){\n\t\t\tif (!name) return this\n\t      \treturn this.each(function(el,idx){\n\t\t        if (!('className' in this)) return\n\t\t        classList = [];\n\n\t\t        var cls = className(this) \n\t\t       \n\t\t        name.split(/\\s+/g).forEach(function(klass){\n\n\t\t          // if (!$(this).hasClass(klass))\n\t\t           classList.push(klass)\n\n\t\t        }, this)\n\t\t       \n\t\t        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n\n\t\t    })\n\t\t},\n\t\thasClass : function(cls) {\n\t\t    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\t\t    for (var i = 0; i < this.length; i++) {\n\t\t        if (this[i].className.match(reg)) return true;\n\t\t            return false;\n\t\t    }\n\t\t    return this;\n\t\t}\n\t}\n\t\n\tfunction Z(dom,selector) {\n\t\tfor (var i  =  0; i < dom.length; i++) {\n\t\t\tthis[i] = dom[i]\n\t\t}\n\t\tthis.selector = selector;\n\t\tthis.length = dom.length\n\t}\n\n\twindow.$ = window.wclimb = $\n\n})()\n```","slug":"读zepto源码，封装自己的zepto库（二）","published":1,"updated":"2019-06-06T01:06:26.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9q001s59x3e2kf8aw1","content":"<p>距离上一篇zepto源码分析已经过去大半个月，想想自己都过意不去，不过之前分享了一篇node博客教程，还算干了点正事。接下来我们继续封装自己的库吧</p>\n<h2 id=\"上节代码概览\"><a href=\"#上节代码概览\" class=\"headerlink\" title=\"上节代码概览\"></a>上节代码概览</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\ttest:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"each方法\"></a>each方法</h2><a id=\"more\"></a>\n<p>在<code>wclimb.Z.prototype=Z.prototype=</code>里面添加方法each</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过数组的<code>every</code>方法进行遍历，然后看看每次<code>callback</code>是不是都不是<code>false</code>，如果是则结束遍历</p>\n<p>最后通过 <code>return this</code> 来达到链式调用的效果</p>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><p>继续在里面添加addClass方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">        <span class=\"comment\">// newName = funcArg(this, name, idx, cls)</span></span><br><span class=\"line\">        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// if (!$(this).hasClass(klass)) </span></span><br><span class=\"line\">          \tclassList.push(klass)</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们先判断<code>name</code>存在与否，没有就直接<code>return this</code>，支持链式调用</li>\n<li>新建一个数组，存放我们要添加的<code>class</code>，因为可能要同时添加多个</li>\n<li>通过调用<code>className</code>方法来获取之前的<code>class</code>，并保存起来。<code>clasName</code>方法在下面</li>\n<li>我们添加<code>class</code>一般是这样<code>addClass(&#39;a b c&#39;)</code>，所以我们通过正则表达式把他们用空格分开<code>/\\s+/g</code>,用<code>+</code>的原因是，可能会有多个空格的存在，接着对他们进行循环</li>\n<li>通过hasClass判断之前是否已经存在需要添加的class，如果有就push到<code>classList</code>数组里面。我们先注释掉hasClass这段代码，因为其中用到了$(this) ,querySelector是不支持的哟，所以后面我们得作判断，判断$()这里面放的是元素、函数、类数组等等。</li>\n<li>最后通过函数<code>className</code>方法把他们用空格连接起来</li>\n</ul>\n<p>发现里面有一个没有声明的<code>className</code>方法<br>所以我们在<code>wclimb.Z.prototype=Z.prototype=</code>上面声明该函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取或者设置class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\tnode.className = value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法主要是获取class和设置class的作用</p>\n<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过正则匹配，如果存在则返回<code>true</code>，否则返回<code>false</code>，最后<code>return this</code>支持链式调用</p>\n<p>现在来试试效果吧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html:</span><br><span class=\"line\">\t&lt;p <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"a\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">js:</span><br><span class=\"line\">\t$(<span class=\"string\">'p'</span>).addClass(<span class=\"string\">'test other'</span>) <span class=\"comment\">// &lt;p class=\"a test other\"&gt;&lt;/p&gt;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'p'</span>).hasClass(<span class=\"string\">'a'</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;<span class=\"comment\">//获取或者设置class</span></span><br><span class=\"line\">\t    <span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t </span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\t    node.className = value</span><br><span class=\"line\"></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">\t      &#125;)</span><br><span class=\"line\">\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\taddClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">\t      \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t\t       </span><br><span class=\"line\">\t\t        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t          <span class=\"comment\">// if (!$(this).hasClass(klass))</span></span><br><span class=\"line\">\t\t           classList.push(klass)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t       </span><br><span class=\"line\">\t\t        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t    &#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">\t\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>距离上一篇zepto源码分析已经过去大半个月，想想自己都过意不去，不过之前分享了一篇node博客教程，还算干了点正事。接下来我们继续封装自己的库吧</p>\n<h2 id=\"上节代码概览\"><a href=\"#上节代码概览\" class=\"headerlink\" title=\"上节代码概览\"></a>上节代码概览</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\ttest:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"each方法\"></a>each方法</h2>","more":"<p>在<code>wclimb.Z.prototype=Z.prototype=</code>里面添加方法each</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过数组的<code>every</code>方法进行遍历，然后看看每次<code>callback</code>是不是都不是<code>false</code>，如果是则结束遍历</p>\n<p>最后通过 <code>return this</code> 来达到链式调用的效果</p>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><p>继续在里面添加addClass方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">        <span class=\"comment\">// newName = funcArg(this, name, idx, cls)</span></span><br><span class=\"line\">        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// if (!$(this).hasClass(klass)) </span></span><br><span class=\"line\">          \tclassList.push(klass)</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们先判断<code>name</code>存在与否，没有就直接<code>return this</code>，支持链式调用</li>\n<li>新建一个数组，存放我们要添加的<code>class</code>，因为可能要同时添加多个</li>\n<li>通过调用<code>className</code>方法来获取之前的<code>class</code>，并保存起来。<code>clasName</code>方法在下面</li>\n<li>我们添加<code>class</code>一般是这样<code>addClass(&#39;a b c&#39;)</code>，所以我们通过正则表达式把他们用空格分开<code>/\\s+/g</code>,用<code>+</code>的原因是，可能会有多个空格的存在，接着对他们进行循环</li>\n<li>通过hasClass判断之前是否已经存在需要添加的class，如果有就push到<code>classList</code>数组里面。我们先注释掉hasClass这段代码，因为其中用到了$(this) ,querySelector是不支持的哟，所以后面我们得作判断，判断$()这里面放的是元素、函数、类数组等等。</li>\n<li>最后通过函数<code>className</code>方法把他们用空格连接起来</li>\n</ul>\n<p>发现里面有一个没有声明的<code>className</code>方法<br>所以我们在<code>wclimb.Z.prototype=Z.prototype=</code>上面声明该函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取或者设置class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\tnode.className = value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法主要是获取class和设置class的作用</p>\n<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过正则匹配，如果存在则返回<code>true</code>，否则返回<code>false</code>，最后<code>return this</code>支持链式调用</p>\n<p>现在来试试效果吧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html:</span><br><span class=\"line\">\t&lt;p <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"a\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">js:</span><br><span class=\"line\">\t$(<span class=\"string\">'p'</span>).addClass(<span class=\"string\">'test other'</span>) <span class=\"comment\">// &lt;p class=\"a test other\"&gt;&lt;/p&gt;</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log($(<span class=\"string\">'p'</span>).hasClass(<span class=\"string\">'a'</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wclimb = &#123;&#125;,$</span><br><span class=\"line\"></span><br><span class=\"line\">\t$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.init(selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dom;</span><br><span class=\"line\">\t\tdom = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wclimb.Z(dom,selector)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twclimb.Z = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,selector</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Z(dom,selector)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">className</span>(<span class=\"params\">node, value</span>)</span>&#123;<span class=\"comment\">//获取或者设置class</span></span><br><span class=\"line\">\t    <span class=\"keyword\">var</span> klass = node.className || <span class=\"string\">''</span>\t </span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> klass</span><br><span class=\"line\">\t    node.className = value</span><br><span class=\"line\"></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twclimb.Z.prototype  =  Z.prototype  =  &#123;</span><br><span class=\"line\">\t\teach:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t[].every.call(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>)</span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> callback.call(el, idx, el) !== <span class=\"literal\">false</span></span><br><span class=\"line\">\t      &#125;)</span><br><span class=\"line\">\t      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\taddClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">\t      \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,idx</span>)</span>&#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (!(<span class=\"string\">'className'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t        classList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        <span class=\"keyword\">var</span> cls = className(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t\t       </span><br><span class=\"line\">\t\t        name.split(<span class=\"regexp\">/\\s+/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">klass</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t          <span class=\"comment\">// if (!$(this).hasClass(klass))</span></span><br><span class=\"line\">\t\t           classList.push(klass)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t        &#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t       </span><br><span class=\"line\">\t\t        classList.length &amp;&amp; className(<span class=\"keyword\">this</span>, cls + (cls ? <span class=\"string\">\" \"</span> : <span class=\"string\">\"\"</span>) + classList.join(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t    &#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\thasClass : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cls</span>) </span>&#123;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(\\\\s|^)'</span> + cls + <span class=\"string\">'(\\\\s|$)'</span>);</span><br><span class=\"line\">\t\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i].className.match(reg)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span>(<span class=\"params\">dom,selector</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i  =  <span class=\"number\">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>[i] = dom[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.selector = selector;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.length = dom.length</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.$ = <span class=\"built_in\">window</span>.wclimb = $</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>"},{"title":"webpack系列之输出文件分析","date":"2019-06-19T01:34:10.000Z","_content":"\n## 写在前面\n\n上一篇文章我们讲了如何使用 `webpack`，执行打包会在 `dist` 生成一堆文件，那么 `webpack` 输出的文件里面到底长啥样呢？用过的人100%看过，大部分的还是压缩混淆后的代码，一般我们不会去关心它，只管当前持续运行正常就行了。今天我们来看看 `webpack` 输出的文件\n\n## 配置\n\n### 安装\n\n开发环境 `webpack: 4.34.0`\n\n```\n> npm init -y\n> cnpm i webpack webpack-cli -D\n```\n\n### 新建文件\n\n新建文件 `webpack.config.js`\n新建文件夹 `src`\n`webpack.config.js`\n```js\nconst path = require('path');\nmodule.exports = {\n  devtool: 'inline-source-map',\n  mode: 'development',\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n};\n```\n<!-- more -->\n`src` 文件夹下，新增三个文件 `main.js`（入口文件） `a.js` `b.js`\n`main.js`\n```js\nimport { A1, A2 } from './a';\nimport B from './b';\nconsole.log(A1, A2);\nB();\n```\na.js\n```js\nexport const A1 = 'a1';\nexport const A2 = 'a2';\n```\nb.js\n```js\nexport default function() {\n  console.log('b');\n}\n```\n\n### 打包\n\n```ksh\nnpx webpack --config webpack.config.js \n```\n然后就会在 `dist` 下生成一个 `bundle.js` 文件，接下来开始分析文件\n\n## 文件分析\n\n首先先来看看大致的结果\n```js\n(function(modules) {\n  function __webpack_require__(moduleId) {\n    ...\n  }\n  ...\n  return __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n})({\n  \"./src/a.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n  \"./src/b.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n})\n```\n从上面我们可以看到一个立即执行的函数，传递了一个对象，也就是 `modules` 的值，最终执行了 `__webpack_require__` 函数，执行的这个方法其实是我们在 `webpack` 里面设置的 `entry: ./src/main.js`，对象里还有`key`，`./src/a.js` 、`./src/b.js`，也就是我们的 `a.js` 和 `b.js`\n\n我们知道最开始执行了 `__webpack_require__(__webpack_require__.s = \"./src/main.js\")` 方法，也就是 `__webpack_require__(\"./src/main.js\")`，那么这个 `__webpack_require__` 方法又做了什么的\n\n原始的 `__webpack_require__` 方法\n```js\n// The module cache\nvar installedModules = {};\nfunction __webpack_require__(moduleId) {\n  // Check if module is in cache\n  if(installedModules[moduleId]) {\n    return installedModules[moduleId].exports;\n  }\n  // Create a new module (and put it into the cache)\n  var module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // Execute the module function\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  // Flag the module as loaded\n  module.l = true;\n  // Return the exports of the module\n  return module.exports;\n}\n```\n现在我在这上面写上注释\n```js\n// 模块缓存\nvar installedModules = {};\nfunction __webpack_require__(moduleId) {\n  // 首先全局有一个模块对象，最先判断是否存在这个模块，是否做过相应操作，如果有则直接返回当前模块的一个对象，这里的exports其实就是一个对象\n  if(installedModules[moduleId]) {\n    return installedModules[moduleId].exports;\n  }\n  // 这里就直接创建了一个模块，并且缓存在全局的模块中，这里重点关注这个exports，\n  // i 指的是模块的名称，比如 './src/main.js'\n  // l 意思是当前模块是否加载\n  // exports 就是返回出去的对象内容\n  var module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // 到这里就开始通过key去执行 modules（就是刚开始立即执行函数传过来的对象）对象的方法\n  // 然后使用call来指向 对象的方法 的this，并且把 module, module.exports, __webpack_require__ 三个值传过去，\n  // 这里先做预告，module这个参数传过去其实是没有用到的，主要使用 module.exports 对象, 以及__webpack_require__方法\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  // 上面说到有一个参数 l，到这里当前模块已经加载\n  module.l = true;\n  // 最后把module.exports这个模块返回出去\n  return module.exports;\n}\n```\n\n接下来我们看看主入口 `./src/main.js` 这个 `key` 的值的内容\n\n`./src/main.js`，原内容是这样的，接下来来解释一下\n```js\n{\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    __webpack_require__.r(__webpack_exports__);\n    /* harmony import */ var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\");\n    /* harmony import */ var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n\n    console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"], _a__WEBPACK_IMPORTED_MODULE_0__[\"A2\"]);\n    Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  })\n}\n```\n\n```js\n{\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    // 上面我们说到 __webpack_require__ 方法内部会执行 modules[moduleId].call，并传递了三个参数，那么他执行的方法就是这个内部方法\n\n    // 这段代码可以先忽略，在当前项目没有作用\n    __webpack_require__.r(__webpack_exports__);\n\n    // 我们看到下面有两段__webpack_require__函数代码的执行，你可以回顾一下main.js的内容，我们是不是做了 import { A1, A2 } from './a';并且 console.log(A1, A2);\n    /* harmony import */ var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\");\n    /* harmony import */ var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n    console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"], _a__WEBPACK_IMPORTED_MODULE_0__[\"A2\"]);\n\n    // 这段代码其实是 import B from './b'; B();代码的执行\n    Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  })\n}\n```\n \n好了，现在来分析一下 `__webpack_require__(\"./src/a.js\")` 做了哪些操作，我们先来看看 模块` ./src/a.js` 的内容\n`./src/a.js`\n```js\n{\n  \"./src/a.js\": (function(module, __webpack_exports__, __webpack_require__) {\n      __webpack_require__.r(__webpack_exports__);\n      /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A1\", function() { return A1; });\n      /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A2\", function() { return A2; });\n      const A1 = 'a1';\n      const A2 = 'a2';\n }),\n}\n```\n\n代码内容很简单，首先 `__webpack_require__(\"./src/a.js\")` 执行之后，会创建一个模块，然后去执行模块 `./src/a.js` 内部得方法，也是是上面这段，执行完成之后最终会把 `module.exports` 返回处理，\n那么 `module.exports` 这个是什么内容呢？\n看看 __webpack_require__ 内部\n```js\nvar module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // Execute the module function\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  return module.exports\n```\n其实就是我们创建模块时的 `exports`，然后执行到了模块 `./src/a.js` 内部得方法，它内部方法关键的地方在于又调用了 `__webpack_require__.d` 方法\n\n`__webpack_require__.d`\n```js\n__webpack_require__.d = function(exports, name, getter) {\n  if(!__webpack_require__.o(exports, name)) {\n    Object.defineProperty(exports, name, { enumerable: true, get: getter });\n  }\n};\n```\n执行 `__webpack_require__.d(__webpack_exports__, \"A1\", function() { return A1; })`; 可以看出来他给 `module.exports` 定义了一个 `key` 值 `\"key\"`，然后取值 `get` 的时候返回的是 A1(也就是a1)\n\n所以最终 `return module.exports` 的值为 `{A1: 'a1'}`，\n\n我们回到 `./src/main.js` 模块，所以这段代码：`var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\")`;\n\n `_a__WEBPACK_IMPORTED_MODULE_0__` 其实就是等于 `{A1: 'a1'}` `console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"])`，取值为 `a1`，`A2` 同理\n\n![bundle-a-js](/img/webpack-bundle-a-js.jpg)\n\n 接下来我们看看模块 `./src/b.js`，在主模块它做了什么呢？看看 `./src/main.js`\n ```js\n ...\n var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n ```\n 看上面模块 `./src/b.js` 在主模块的执行第一段代码和之前介绍的一样，第二段代码直接执行了一个方法，这里我们可以猜测出 `_b__WEBPACK_IMPORTED_MODULE_1__` 其实就是一个对象，访问了它的 `key: default`\n然后它的key值其实是一个函数，最后执行了这个函数\n\n同理我们可以看看模块 `./src/b.js` 内部的方法，以及我们在 `src` 文件夹下的 `b.js` 是怎么写的\n模块 `./src/b.js`\n```js\n{\n  \"./src/b.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    __webpack_require__.r(__webpack_exports__);\n    /* harmony default export */ __webpack_exports__[\"default\"] = (function() {\n      console.log('b');\n  });\n}\n```\n\n`b.js`\n```js\nexport default function() {\n  console.log('b');\n}\n```\n\n从我们源代码看出，我们是直接导出了一个方法，内部执行了打印字符串`b`，然后再来看看 `webapck` 的源码部分，`__webpack_require__.r(__webpack_exports__)`; 这段可以忽略，解释一下，其实这段代码在对象里定义了一个 `__esModule: true`，接着看下面一段，我们从之前讲的知道知道 `__webpack_exports__` 其实就是一个单纯的空对象（其实不是，执行了 `__webpack_require__.r(__webpack_exports__` )就变成了 `{__esModule: true}`)，然后它又在对象里增加了一个 `default` 属性，然后把一个方法赋值给它(其实就是我们打包之前写的一个方法)，最终在主入口里执行的模块 `var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\")`；其实就等于 `{\"default\": function{}}`，然后下一步执行访问对象 `default` 的值去执行函数\n\n![bundle-b-js](/img/webpack-bundle-b-js.jpg)\n\n## 思考\n\n可能现在你可能会思考🤔，通过上面的比较可以得出一个结论\n\n通过 `export` 出来，如果 `import {a,b,c} from '..'`，打包出来的代码执行简单操作之后（执行 `__webpack_require__` 函数）首先会是一个对象，对象会是 `{a: ..., b: ..., c: ...}`\n\n同过 `export default` 出来，如果 `import a from '..'`，打包处理的代码执行简单操作之后（执行 `__webpack_require__` 函数）首先会是一个对象，然后会往对象里添加一个default的key，类似 `{default: ...}`\n\n## 总结\n\n整个过程还是挺绕的，你可以自己去 `debugger` 看看他的执行过程，应该就明白得差不多了，今天就讲了这些吧\n\n本文地址 [webpack系列之输出文件分析](http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/)","source":"_posts/webpack系列之输出文件分析.md","raw":"---\ntitle: webpack系列之输出文件分析\ndate: 2019-06-19 09:34:10\ntags:\n- javascript\n- 原创\n- webpack\ncategories: [javascript,webpack]\n---\n\n## 写在前面\n\n上一篇文章我们讲了如何使用 `webpack`，执行打包会在 `dist` 生成一堆文件，那么 `webpack` 输出的文件里面到底长啥样呢？用过的人100%看过，大部分的还是压缩混淆后的代码，一般我们不会去关心它，只管当前持续运行正常就行了。今天我们来看看 `webpack` 输出的文件\n\n## 配置\n\n### 安装\n\n开发环境 `webpack: 4.34.0`\n\n```\n> npm init -y\n> cnpm i webpack webpack-cli -D\n```\n\n### 新建文件\n\n新建文件 `webpack.config.js`\n新建文件夹 `src`\n`webpack.config.js`\n```js\nconst path = require('path');\nmodule.exports = {\n  devtool: 'inline-source-map',\n  mode: 'development',\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n};\n```\n<!-- more -->\n`src` 文件夹下，新增三个文件 `main.js`（入口文件） `a.js` `b.js`\n`main.js`\n```js\nimport { A1, A2 } from './a';\nimport B from './b';\nconsole.log(A1, A2);\nB();\n```\na.js\n```js\nexport const A1 = 'a1';\nexport const A2 = 'a2';\n```\nb.js\n```js\nexport default function() {\n  console.log('b');\n}\n```\n\n### 打包\n\n```ksh\nnpx webpack --config webpack.config.js \n```\n然后就会在 `dist` 下生成一个 `bundle.js` 文件，接下来开始分析文件\n\n## 文件分析\n\n首先先来看看大致的结果\n```js\n(function(modules) {\n  function __webpack_require__(moduleId) {\n    ...\n  }\n  ...\n  return __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n})({\n  \"./src/a.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n  \"./src/b.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {}\n})\n```\n从上面我们可以看到一个立即执行的函数，传递了一个对象，也就是 `modules` 的值，最终执行了 `__webpack_require__` 函数，执行的这个方法其实是我们在 `webpack` 里面设置的 `entry: ./src/main.js`，对象里还有`key`，`./src/a.js` 、`./src/b.js`，也就是我们的 `a.js` 和 `b.js`\n\n我们知道最开始执行了 `__webpack_require__(__webpack_require__.s = \"./src/main.js\")` 方法，也就是 `__webpack_require__(\"./src/main.js\")`，那么这个 `__webpack_require__` 方法又做了什么的\n\n原始的 `__webpack_require__` 方法\n```js\n// The module cache\nvar installedModules = {};\nfunction __webpack_require__(moduleId) {\n  // Check if module is in cache\n  if(installedModules[moduleId]) {\n    return installedModules[moduleId].exports;\n  }\n  // Create a new module (and put it into the cache)\n  var module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // Execute the module function\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  // Flag the module as loaded\n  module.l = true;\n  // Return the exports of the module\n  return module.exports;\n}\n```\n现在我在这上面写上注释\n```js\n// 模块缓存\nvar installedModules = {};\nfunction __webpack_require__(moduleId) {\n  // 首先全局有一个模块对象，最先判断是否存在这个模块，是否做过相应操作，如果有则直接返回当前模块的一个对象，这里的exports其实就是一个对象\n  if(installedModules[moduleId]) {\n    return installedModules[moduleId].exports;\n  }\n  // 这里就直接创建了一个模块，并且缓存在全局的模块中，这里重点关注这个exports，\n  // i 指的是模块的名称，比如 './src/main.js'\n  // l 意思是当前模块是否加载\n  // exports 就是返回出去的对象内容\n  var module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // 到这里就开始通过key去执行 modules（就是刚开始立即执行函数传过来的对象）对象的方法\n  // 然后使用call来指向 对象的方法 的this，并且把 module, module.exports, __webpack_require__ 三个值传过去，\n  // 这里先做预告，module这个参数传过去其实是没有用到的，主要使用 module.exports 对象, 以及__webpack_require__方法\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  // 上面说到有一个参数 l，到这里当前模块已经加载\n  module.l = true;\n  // 最后把module.exports这个模块返回出去\n  return module.exports;\n}\n```\n\n接下来我们看看主入口 `./src/main.js` 这个 `key` 的值的内容\n\n`./src/main.js`，原内容是这样的，接下来来解释一下\n```js\n{\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    __webpack_require__.r(__webpack_exports__);\n    /* harmony import */ var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\");\n    /* harmony import */ var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n\n    console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"], _a__WEBPACK_IMPORTED_MODULE_0__[\"A2\"]);\n    Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  })\n}\n```\n\n```js\n{\n  \"./src/main.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    // 上面我们说到 __webpack_require__ 方法内部会执行 modules[moduleId].call，并传递了三个参数，那么他执行的方法就是这个内部方法\n\n    // 这段代码可以先忽略，在当前项目没有作用\n    __webpack_require__.r(__webpack_exports__);\n\n    // 我们看到下面有两段__webpack_require__函数代码的执行，你可以回顾一下main.js的内容，我们是不是做了 import { A1, A2 } from './a';并且 console.log(A1, A2);\n    /* harmony import */ var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\");\n    /* harmony import */ var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n    console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"], _a__WEBPACK_IMPORTED_MODULE_0__[\"A2\"]);\n\n    // 这段代码其实是 import B from './b'; B();代码的执行\n    Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  })\n}\n```\n \n好了，现在来分析一下 `__webpack_require__(\"./src/a.js\")` 做了哪些操作，我们先来看看 模块` ./src/a.js` 的内容\n`./src/a.js`\n```js\n{\n  \"./src/a.js\": (function(module, __webpack_exports__, __webpack_require__) {\n      __webpack_require__.r(__webpack_exports__);\n      /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A1\", function() { return A1; });\n      /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A2\", function() { return A2; });\n      const A1 = 'a1';\n      const A2 = 'a2';\n }),\n}\n```\n\n代码内容很简单，首先 `__webpack_require__(\"./src/a.js\")` 执行之后，会创建一个模块，然后去执行模块 `./src/a.js` 内部得方法，也是是上面这段，执行完成之后最终会把 `module.exports` 返回处理，\n那么 `module.exports` 这个是什么内容呢？\n看看 __webpack_require__ 内部\n```js\nvar module = installedModules[moduleId] = {\n    i: moduleId,\n    l: false,\n    exports: {}\n  };\n  // Execute the module function\n  modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n  return module.exports\n```\n其实就是我们创建模块时的 `exports`，然后执行到了模块 `./src/a.js` 内部得方法，它内部方法关键的地方在于又调用了 `__webpack_require__.d` 方法\n\n`__webpack_require__.d`\n```js\n__webpack_require__.d = function(exports, name, getter) {\n  if(!__webpack_require__.o(exports, name)) {\n    Object.defineProperty(exports, name, { enumerable: true, get: getter });\n  }\n};\n```\n执行 `__webpack_require__.d(__webpack_exports__, \"A1\", function() { return A1; })`; 可以看出来他给 `module.exports` 定义了一个 `key` 值 `\"key\"`，然后取值 `get` 的时候返回的是 A1(也就是a1)\n\n所以最终 `return module.exports` 的值为 `{A1: 'a1'}`，\n\n我们回到 `./src/main.js` 模块，所以这段代码：`var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ \"./src/a.js\")`;\n\n `_a__WEBPACK_IMPORTED_MODULE_0__` 其实就是等于 `{A1: 'a1'}` `console.log(_a__WEBPACK_IMPORTED_MODULE_0__[\"A1\"])`，取值为 `a1`，`A2` 同理\n\n![bundle-a-js](/img/webpack-bundle-a-js.jpg)\n\n 接下来我们看看模块 `./src/b.js`，在主模块它做了什么呢？看看 `./src/main.js`\n ```js\n ...\n var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\");\n Object(_b__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n ```\n 看上面模块 `./src/b.js` 在主模块的执行第一段代码和之前介绍的一样，第二段代码直接执行了一个方法，这里我们可以猜测出 `_b__WEBPACK_IMPORTED_MODULE_1__` 其实就是一个对象，访问了它的 `key: default`\n然后它的key值其实是一个函数，最后执行了这个函数\n\n同理我们可以看看模块 `./src/b.js` 内部的方法，以及我们在 `src` 文件夹下的 `b.js` 是怎么写的\n模块 `./src/b.js`\n```js\n{\n  \"./src/b.js\": (function(module, __webpack_exports__, __webpack_require__) {\n    __webpack_require__.r(__webpack_exports__);\n    /* harmony default export */ __webpack_exports__[\"default\"] = (function() {\n      console.log('b');\n  });\n}\n```\n\n`b.js`\n```js\nexport default function() {\n  console.log('b');\n}\n```\n\n从我们源代码看出，我们是直接导出了一个方法，内部执行了打印字符串`b`，然后再来看看 `webapck` 的源码部分，`__webpack_require__.r(__webpack_exports__)`; 这段可以忽略，解释一下，其实这段代码在对象里定义了一个 `__esModule: true`，接着看下面一段，我们从之前讲的知道知道 `__webpack_exports__` 其实就是一个单纯的空对象（其实不是，执行了 `__webpack_require__.r(__webpack_exports__` )就变成了 `{__esModule: true}`)，然后它又在对象里增加了一个 `default` 属性，然后把一个方法赋值给它(其实就是我们打包之前写的一个方法)，最终在主入口里执行的模块 `var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ \"./src/b.js\")`；其实就等于 `{\"default\": function{}}`，然后下一步执行访问对象 `default` 的值去执行函数\n\n![bundle-b-js](/img/webpack-bundle-b-js.jpg)\n\n## 思考\n\n可能现在你可能会思考🤔，通过上面的比较可以得出一个结论\n\n通过 `export` 出来，如果 `import {a,b,c} from '..'`，打包出来的代码执行简单操作之后（执行 `__webpack_require__` 函数）首先会是一个对象，对象会是 `{a: ..., b: ..., c: ...}`\n\n同过 `export default` 出来，如果 `import a from '..'`，打包处理的代码执行简单操作之后（执行 `__webpack_require__` 函数）首先会是一个对象，然后会往对象里添加一个default的key，类似 `{default: ...}`\n\n## 总结\n\n整个过程还是挺绕的，你可以自己去 `debugger` 看看他的执行过程，应该就明白得差不多了，今天就讲了这些吧\n\n本文地址 [webpack系列之输出文件分析](http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/)","slug":"webpack系列之输出文件分析","published":1,"updated":"2019-07-27T09:58:56.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9s001u59x3mzhsrbpa","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>上一篇文章我们讲了如何使用 <code>webpack</code>，执行打包会在 <code>dist</code> 生成一堆文件，那么 <code>webpack</code> 输出的文件里面到底长啥样呢？用过的人100%看过，大部分的还是压缩混淆后的代码，一般我们不会去关心它，只管当前持续运行正常就行了。今天我们来看看 <code>webpack</code> 输出的文件</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>开发环境 <code>webpack: 4.34.0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h3><p>新建文件 <code>webpack.config.js</code><br>新建文件夹 <code>src</code><br><code>webpack.config.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>src</code> 文件夹下，新增三个文件 <code>main.js</code>（入口文件） <code>a.js</code> <code>b.js</code><br><code>main.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; A1, A2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> B <span class=\"keyword\">from</span> <span class=\"string\">'./b'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A1, A2);</span><br><span class=\"line\">B();</span><br></pre></td></tr></table></figure></p>\n<p>a.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A1 = <span class=\"string\">'a1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A2 = <span class=\"string\">'a2'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>b.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure>\n<p>然后就会在 <code>dist</code> 下生成一个 <code>bundle.js</code> 文件，接下来开始分析文件</p>\n<h2 id=\"文件分析\"><a href=\"#文件分析\" class=\"headerlink\" title=\"文件分析\"></a>文件分析</h2><p>首先先来看看大致的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"string\">\"./src/main.js\"</span>);</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/a.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"string\">\"./src/b.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>从上面我们可以看到一个立即执行的函数，传递了一个对象，也就是 <code>modules</code> 的值，最终执行了 <code>__webpack_require__</code> 函数，执行的这个方法其实是我们在 <code>webpack</code> 里面设置的 <code>entry: ./src/main.js</code>，对象里还有<code>key</code>，<code>./src/a.js</code> 、<code>./src/b.js</code>，也就是我们的 <code>a.js</code> 和 <code>b.js</code></p>\n<p>我们知道最开始执行了 <code>__webpack_require__(__webpack_require__.s = &quot;./src/main.js&quot;)</code> 方法，也就是 <code>__webpack_require__(&quot;./src/main.js&quot;)</code>，那么这个 <code>__webpack_require__</code> 方法又做了什么的</p>\n<p>原始的 <code>__webpack_require__</code> 方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"comment\">// Flag the module as loaded</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我在这上面写上注释<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先全局有一个模块对象，最先判断是否存在这个模块，是否做过相应操作，如果有则直接返回当前模块的一个对象，这里的exports其实就是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里就直接创建了一个模块，并且缓存在全局的模块中，这里重点关注这个exports，</span></span><br><span class=\"line\">  <span class=\"comment\">// i 指的是模块的名称，比如 './src/main.js'</span></span><br><span class=\"line\">  <span class=\"comment\">// l 意思是当前模块是否加载</span></span><br><span class=\"line\">  <span class=\"comment\">// exports 就是返回出去的对象内容</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 到这里就开始通过key去执行 modules（就是刚开始立即执行函数传过来的对象）对象的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后使用call来指向 对象的方法 的this，并且把 module, module.exports, __webpack_require__ 三个值传过去，</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里先做预告，module这个参数传过去其实是没有用到的，主要使用 module.exports 对象, 以及__webpack_require__方法</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"comment\">// 上面说到有一个参数 l，到这里当前模块已经加载</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 最后把module.exports这个模块返回出去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们看看主入口 <code>./src/main.js</code> 这个 <code>key</code> 的值的内容</p>\n<p><code>./src/main.js</code>，原内容是这样的，接下来来解释一下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class=\"comment\">/*! ./a */</span> <span class=\"string\">\"./src/a.js\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A1\"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A2\"</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上面我们说到 __webpack_require__ 方法内部会执行 modules[moduleId].call，并传递了三个参数，那么他执行的方法就是这个内部方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这段代码可以先忽略，在当前项目没有作用</span></span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们看到下面有两段__webpack_require__函数代码的执行，你可以回顾一下main.js的内容，我们是不是做了 import &#123; A1, A2 &#125; from './a';并且 console.log(A1, A2);</span></span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class=\"comment\">/*! ./a */</span> <span class=\"string\">\"./src/a.js\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A1\"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A2\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这段代码其实是 import B from './b'; B();代码的执行</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，现在来分析一下 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 做了哪些操作，我们先来看看 模块<code>./src/a.js</code> 的内容<br><code>./src/a.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/a.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">      __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">      <span class=\"comment\">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class=\"string\">\"A1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> A1; &#125;);</span><br><span class=\"line\">      <span class=\"comment\">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class=\"string\">\"A2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> A2; &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> A1 = <span class=\"string\">'a1'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> A2 = <span class=\"string\">'a2'</span>;</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码内容很简单，首先 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 执行之后，会创建一个模块，然后去执行模块 <code>./src/a.js</code> 内部得方法，也是是上面这段，执行完成之后最终会把 <code>module.exports</code> 返回处理，<br>那么 <code>module.exports</code> 这个是什么内容呢？<br>看看 <strong>webpack_require</strong> 内部<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure></p>\n<p>其实就是我们创建模块时的 <code>exports</code>，然后执行到了模块 <code>./src/a.js</code> 内部得方法，它内部方法关键的地方在于又调用了 <code>__webpack_require__.d</code> 方法</p>\n<p><code>__webpack_require__.d</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_require__.d = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports, name, getter</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!__webpack_require__.o(exports, name)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(exports, name, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">get</span>: getter &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>__webpack_require__.d(__webpack_exports__, &quot;A1&quot;, function() { return A1; })</code>; 可以看出来他给 <code>module.exports</code> 定义了一个 <code>key</code> 值 <code>&quot;key&quot;</code>，然后取值 <code>get</code> 的时候返回的是 A1(也就是a1)</p>\n<p>所以最终 <code>return module.exports</code> 的值为 <code>{A1: &#39;a1&#39;}</code>，</p>\n<p>我们回到 <code>./src/main.js</code> 模块，所以这段代码：<code>var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ &quot;./src/a.js&quot;)</code>;</p>\n<p> <code>_a__WEBPACK_IMPORTED_MODULE_0__</code> 其实就是等于 <code>{A1: &#39;a1&#39;}</code> <code>console.log(_a__WEBPACK_IMPORTED_MODULE_0__[&quot;A1&quot;])</code>，取值为 <code>a1</code>，<code>A2</code> 同理</p>\n<p><img src=\"/img/webpack-bundle-a-js.jpg\" alt=\"bundle-a-js\"></p>\n<p> 接下来我们看看模块 <code>./src/b.js</code>，在主模块它做了什么呢？看看 <code>./src/main.js</code><br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br></pre></td></tr></table></figure></p>\n<p> 看上面模块 <code>./src/b.js</code> 在主模块的执行第一段代码和之前介绍的一样，第二段代码直接执行了一个方法，这里我们可以猜测出 <code>_b__WEBPACK_IMPORTED_MODULE_1__</code> 其实就是一个对象，访问了它的 <code>key: default</code><br>然后它的key值其实是一个函数，最后执行了这个函数</p>\n<p>同理我们可以看看模块 <code>./src/b.js</code> 内部的方法，以及我们在 <code>src</code> 文件夹下的 <code>b.js</code> 是怎么写的<br>模块 <code>./src/b.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/b.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony default export */</span> __webpack_exports__[<span class=\"string\">\"default\"</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>b.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从我们源代码看出，我们是直接导出了一个方法，内部执行了打印字符串<code>b</code>，然后再来看看 <code>webapck</code> 的源码部分，<code>__webpack_require__.r(__webpack_exports__)</code>; 这段可以忽略，解释一下，其实这段代码在对象里定义了一个 <code>__esModule: true</code>，接着看下面一段，我们从之前讲的知道知道 <code>__webpack_exports__</code> 其实就是一个单纯的空对象（其实不是，执行了 <code>__webpack_require__.r(__webpack_exports__</code> )就变成了 <code>{__esModule: true}</code>)，然后它又在对象里增加了一个 <code>default</code> 属性，然后把一个方法赋值给它(其实就是我们打包之前写的一个方法)，最终在主入口里执行的模块 <code>var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ &quot;./src/b.js&quot;)</code>；其实就等于 <code>{&quot;default&quot;: function{}}</code>，然后下一步执行访问对象 <code>default</code> 的值去执行函数</p>\n<p><img src=\"/img/webpack-bundle-b-js.jpg\" alt=\"bundle-b-js\"></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>可能现在你可能会思考🤔，通过上面的比较可以得出一个结论</p>\n<p>通过 <code>export</code> 出来，如果 <code>import {a,b,c} from &#39;..&#39;</code>，打包出来的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，对象会是 <code>{a: ..., b: ..., c: ...}</code></p>\n<p>同过 <code>export default</code> 出来，如果 <code>import a from &#39;..&#39;</code>，打包处理的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，然后会往对象里添加一个default的key，类似 <code>{default: ...}</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整个过程还是挺绕的，你可以自己去 <code>debugger</code> 看看他的执行过程，应该就明白得差不多了，今天就讲了这些吧</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/\">webpack系列之输出文件分析</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>上一篇文章我们讲了如何使用 <code>webpack</code>，执行打包会在 <code>dist</code> 生成一堆文件，那么 <code>webpack</code> 输出的文件里面到底长啥样呢？用过的人100%看过，大部分的还是压缩混淆后的代码，一般我们不会去关心它，只管当前持续运行正常就行了。今天我们来看看 <code>webpack</code> 输出的文件</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>开发环境 <code>webpack: 4.34.0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm init -y</span><br><span class=\"line\">&gt; cnpm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h3><p>新建文件 <code>webpack.config.js</code><br>新建文件夹 <code>src</code><br><code>webpack.config.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>","more":"<p><code>src</code> 文件夹下，新增三个文件 <code>main.js</code>（入口文件） <code>a.js</code> <code>b.js</code><br><code>main.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; A1, A2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> B <span class=\"keyword\">from</span> <span class=\"string\">'./b'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A1, A2);</span><br><span class=\"line\">B();</span><br></pre></td></tr></table></figure></p>\n<p>a.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A1 = <span class=\"string\">'a1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A2 = <span class=\"string\">'a2'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>b.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure>\n<p>然后就会在 <code>dist</code> 下生成一个 <code>bundle.js</code> 文件，接下来开始分析文件</p>\n<h2 id=\"文件分析\"><a href=\"#文件分析\" class=\"headerlink\" title=\"文件分析\"></a>文件分析</h2><p>首先先来看看大致的结果<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"string\">\"./src/main.js\"</span>);</span><br><span class=\"line\">&#125;)(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/a.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"string\">\"./src/b.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>从上面我们可以看到一个立即执行的函数，传递了一个对象，也就是 <code>modules</code> 的值，最终执行了 <code>__webpack_require__</code> 函数，执行的这个方法其实是我们在 <code>webpack</code> 里面设置的 <code>entry: ./src/main.js</code>，对象里还有<code>key</code>，<code>./src/a.js</code> 、<code>./src/b.js</code>，也就是我们的 <code>a.js</code> 和 <code>b.js</code></p>\n<p>我们知道最开始执行了 <code>__webpack_require__(__webpack_require__.s = &quot;./src/main.js&quot;)</code> 方法，也就是 <code>__webpack_require__(&quot;./src/main.js&quot;)</code>，那么这个 <code>__webpack_require__</code> 方法又做了什么的</p>\n<p>原始的 <code>__webpack_require__</code> 方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"comment\">// Flag the module as loaded</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我在这上面写上注释<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先全局有一个模块对象，最先判断是否存在这个模块，是否做过相应操作，如果有则直接返回当前模块的一个对象，这里的exports其实就是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里就直接创建了一个模块，并且缓存在全局的模块中，这里重点关注这个exports，</span></span><br><span class=\"line\">  <span class=\"comment\">// i 指的是模块的名称，比如 './src/main.js'</span></span><br><span class=\"line\">  <span class=\"comment\">// l 意思是当前模块是否加载</span></span><br><span class=\"line\">  <span class=\"comment\">// exports 就是返回出去的对象内容</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 到这里就开始通过key去执行 modules（就是刚开始立即执行函数传过来的对象）对象的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后使用call来指向 对象的方法 的this，并且把 module, module.exports, __webpack_require__ 三个值传过去，</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里先做预告，module这个参数传过去其实是没有用到的，主要使用 module.exports 对象, 以及__webpack_require__方法</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"comment\">// 上面说到有一个参数 l，到这里当前模块已经加载</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 最后把module.exports这个模块返回出去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们看看主入口 <code>./src/main.js</code> 这个 <code>key</code> 的值的内容</p>\n<p><code>./src/main.js</code>，原内容是这样的，接下来来解释一下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class=\"comment\">/*! ./a */</span> <span class=\"string\">\"./src/a.js\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A1\"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A2\"</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/main.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上面我们说到 __webpack_require__ 方法内部会执行 modules[moduleId].call，并传递了三个参数，那么他执行的方法就是这个内部方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这段代码可以先忽略，在当前项目没有作用</span></span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们看到下面有两段__webpack_require__函数代码的执行，你可以回顾一下main.js的内容，我们是不是做了 import &#123; A1, A2 &#125; from './a';并且 console.log(A1, A2);</span></span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class=\"comment\">/*! ./a */</span> <span class=\"string\">\"./src/a.js\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A1\"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">\"A2\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这段代码其实是 import B from './b'; B();代码的执行</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，现在来分析一下 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 做了哪些操作，我们先来看看 模块<code>./src/a.js</code> 的内容<br><code>./src/a.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/a.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">      __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">      <span class=\"comment\">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class=\"string\">\"A1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> A1; &#125;);</span><br><span class=\"line\">      <span class=\"comment\">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class=\"string\">\"A2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> A2; &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> A1 = <span class=\"string\">'a1'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> A2 = <span class=\"string\">'a2'</span>;</span><br><span class=\"line\"> &#125;),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码内容很简单，首先 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 执行之后，会创建一个模块，然后去执行模块 <code>./src/a.js</code> 内部得方法，也是是上面这段，执行完成之后最终会把 <code>module.exports</code> 返回处理，<br>那么 <code>module.exports</code> 这个是什么内容呢？<br>看看 <strong>webpack_require</strong> 内部<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">    i: moduleId,</span><br><span class=\"line\">    l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">  modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure></p>\n<p>其实就是我们创建模块时的 <code>exports</code>，然后执行到了模块 <code>./src/a.js</code> 内部得方法，它内部方法关键的地方在于又调用了 <code>__webpack_require__.d</code> 方法</p>\n<p><code>__webpack_require__.d</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_require__.d = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports, name, getter</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!__webpack_require__.o(exports, name)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(exports, name, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">get</span>: getter &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>__webpack_require__.d(__webpack_exports__, &quot;A1&quot;, function() { return A1; })</code>; 可以看出来他给 <code>module.exports</code> 定义了一个 <code>key</code> 值 <code>&quot;key&quot;</code>，然后取值 <code>get</code> 的时候返回的是 A1(也就是a1)</p>\n<p>所以最终 <code>return module.exports</code> 的值为 <code>{A1: &#39;a1&#39;}</code>，</p>\n<p>我们回到 <code>./src/main.js</code> 模块，所以这段代码：<code>var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ &quot;./src/a.js&quot;)</code>;</p>\n<p> <code>_a__WEBPACK_IMPORTED_MODULE_0__</code> 其实就是等于 <code>{A1: &#39;a1&#39;}</code> <code>console.log(_a__WEBPACK_IMPORTED_MODULE_0__[&quot;A1&quot;])</code>，取值为 <code>a1</code>，<code>A2</code> 同理</p>\n<p><img src=\"/img/webpack-bundle-a-js.jpg\" alt=\"bundle-a-js\"></p>\n<p> 接下来我们看看模块 <code>./src/b.js</code>，在主模块它做了什么呢？看看 <code>./src/main.js</code><br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class=\"comment\">/*! ./b */</span> <span class=\"string\">\"./src/b.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class=\"string\">\"default\"</span>])();</span><br></pre></td></tr></table></figure></p>\n<p> 看上面模块 <code>./src/b.js</code> 在主模块的执行第一段代码和之前介绍的一样，第二段代码直接执行了一个方法，这里我们可以猜测出 <code>_b__WEBPACK_IMPORTED_MODULE_1__</code> 其实就是一个对象，访问了它的 <code>key: default</code><br>然后它的key值其实是一个函数，最后执行了这个函数</p>\n<p>同理我们可以看看模块 <code>./src/b.js</code> 内部的方法，以及我们在 <code>src</code> 文件夹下的 <code>b.js</code> 是怎么写的<br>模块 <code>./src/b.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"./src/b.js\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    __webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">    <span class=\"comment\">/* harmony default export */</span> __webpack_exports__[<span class=\"string\">\"default\"</span>] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>b.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从我们源代码看出，我们是直接导出了一个方法，内部执行了打印字符串<code>b</code>，然后再来看看 <code>webapck</code> 的源码部分，<code>__webpack_require__.r(__webpack_exports__)</code>; 这段可以忽略，解释一下，其实这段代码在对象里定义了一个 <code>__esModule: true</code>，接着看下面一段，我们从之前讲的知道知道 <code>__webpack_exports__</code> 其实就是一个单纯的空对象（其实不是，执行了 <code>__webpack_require__.r(__webpack_exports__</code> )就变成了 <code>{__esModule: true}</code>)，然后它又在对象里增加了一个 <code>default</code> 属性，然后把一个方法赋值给它(其实就是我们打包之前写的一个方法)，最终在主入口里执行的模块 <code>var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ &quot;./src/b.js&quot;)</code>；其实就等于 <code>{&quot;default&quot;: function{}}</code>，然后下一步执行访问对象 <code>default</code> 的值去执行函数</p>\n<p><img src=\"/img/webpack-bundle-b-js.jpg\" alt=\"bundle-b-js\"></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>可能现在你可能会思考🤔，通过上面的比较可以得出一个结论</p>\n<p>通过 <code>export</code> 出来，如果 <code>import {a,b,c} from &#39;..&#39;</code>，打包出来的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，对象会是 <code>{a: ..., b: ..., c: ...}</code></p>\n<p>同过 <code>export default</code> 出来，如果 <code>import a from &#39;..&#39;</code>，打包处理的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，然后会往对象里添加一个default的key，类似 <code>{default: ...}</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整个过程还是挺绕的，你可以自己去 <code>debugger</code> 看看他的执行过程，应该就明白得差不多了，今天就讲了这些吧</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/\">webpack系列之输出文件分析</a></p>"},{"title":"webpack系列之编写一个plugin","date":"2019-06-21T01:17:19.000Z","_content":"\n## 写在前面\n\n使用`webpack`或者自己配置研究过`webpack`的人都知道`plugin`，也就是`webpack`的插件，对于大多数人来说，经常使用的插件诸如：`clean-webpack-plugin`、`html-webpack-plugin`等等，在很多情况下，我们只会去用它，知道他是干什么的，但是其内部做的操作缺知之甚少，今天我们就来写一个`plugin`\n\n## 基础\n\n首先我们看看插件是怎么使用在`webpack`上的\n\n```js\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: '...',\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './index.html',\n    }),\n  ]  \n}\n```\n<!-- more -->\n我们经常使用的插件是长这样的，每个插件都是一个构造函数，通过`new`一个它的实例来使用。知道了插件是一个构造函数，那么我们可以推断出下面的结构\n```js\nclass TestPlguin(){\n  ...\n}\n```\nwebpack 插件由以下组成：\n  - 一个 JavaScript 命名函数。\n  - 在插件函数的 prototype 上定义一个 apply 方法。\n  - 指定一个绑定到 webpack 自身的事件钩子。\n  - 处理 webpack 内部实例的特定数据。\n  - 功能完成后调用 webpack 提供的回调。\n\n```js\nclass TestPlguin() {\n  constructor(){\n    \n  }\n  apply(compiler){\n    compiler.plugin('webpacksEventHook', function(compilation /* 处理 webpack 内部实例的特定数据。*/, callback) {\n      console.log(\"This is an example plugin!!!\");\n\n      // 功能完成后调用 webpack 提供的回调。\n      callback();\n    });\n  }\n}\n```\n上面是官网上的示例，插件一定会有`apply`方法，传递一个`compiler`参数，通过 `CLI` 或 `Node API` 传递的所有选项，创建出一个 `compilation` 实例。\n\n在插件开发中最重要的两个资源就是 `compiler` 和 `compilation` 对象。理解它们的角色是扩展 `webpack` 引擎重要的第一步。\n\n- `compiler` 对象代表了完整的 `webpack` 环境配置。这个对象在启动 `webpack` 时被一次性建立，并配置好所有可操作的设置，包括 `options`，`loader` 和 `plugin`。当在 `webpack` 环境中应用一个插件时，插件将收到此 `compiler` 对象的引用。可以使用它来访问 `webpack` 的主环境。\n- `compilation` 对象代表了一次资源版本构建。当运行 `webpack` 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 `compilation`，从而生成一组新的编译资源。一个 `compilation` 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。`compilation` 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。\n\n`Compiler` 和 `Compilation` 的区别在于：`Compiler` 代表了整个 `Webpack` 从启动到关闭的生命周期，而 `Compilation` 只是代表了一次新的编译\n\n## 钩子\n\n`Compiler`和`Compilation`都有生命周期\n\n### Compiler\n\n举几个例子\n\n1. `entryOption`：在 `entry` 配置项处理过之后，执行插件\n2. `emit`：生成资源到 `output` 目录之前。\n3. `failed`：编译(compilation)失败\n\n```js\nclass TestPlguin() {\n  ...\n  apply(compiler){\n    compiler.hooks.emit.tap('MyPlugin', params => {\n      console.log('我会在生成资源到 output 目录之前执行')\n    })\n  }\n}\n```\n上面的例子意思是，当`webpack`执行到最终要输出文件得时候，我在这个操作之前去打印一段话，通常是我们输出文件到`dist`文件夹之前那一步\n如果你实现写好了这些钩子，那么`webpack`在编译的流程里都会执行上面几个钩子。想了解更多访问 https://www.webpackjs.com/api/compiler-hooks/\n\n### Compilation\n\n`Compilation` 模块会被 `Compiler` 用来创建新的编译（或新的构建）。`compilation`实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)\n \n简单的理解就是，当编译期间文件发生各种变化的时候，我们可以通过 `Compilation` 钩子里的生命周期函数去拦截，然后做你想做的事情\n\n举几个例子\n\n1. `buildModule`：在模块构建开始之前触发。\n2. `optimize`：优化阶段开始时触发。\n3. `beforeChunkAssets`：在创建 chunk 资源(asset)之前\n4. `additionalAssets`：为编译(compilation)创建附加资源(asset)\n\n```js\nclass TestPlguin() {\n  ...\n  apply(compiler){\n    compiler.hooks.emit.tap('MyPlugin', compilation => {\n      console.log('我会在生成资源到 output 目录之前执行')\n      // 以下开始调用compilation钩子，当模块处在优化阶段开始时会执行以下回调\n      compilation.plugin(\"optimize\", function() {\n        console.log(\"我在优化阶段开始时触发了\");\n      });\n    })\n  }\n}\n```\n\n想了解更多访问 https://www.webpackjs.com/api/compilation-hooks/\n\n\n## 编写插件\n\n我们现在假定有一个这么个需求：我需要在打包的时候把一个外部的`js`文件导入到项目中，并且在`index.html`引入，你可能会问了，那你直接在主入口引入不就行了吗？确实，感觉做这件事情很没有意义，但是我就要这个需求，原因在于我在使用`DllPlugin`的时候，提前生成好了一堆文件，这些文件是不会在正常打包的过程引入的，所以我需要在最后打包生成文件之前把他们导入到`dist`文件夹下，并且引入他们。\n\n那么我们现在开始编写，先写个简单的，一个文件的导入，抛砖引玉。\n\n首先我们思考一下🤔，这个插件得有配置呀，和`html-webpack-plugin`一样可以传参数\n\n```js\nmodule.exports = {\n  plugin: [\n    new TestPlugin({\n      filename: 'test.js',\n      template: path.resolve(__dirname, './otherFile/test.js'),\n    }),\n  ]\n}\n```\n\n我们在项目里新建文件夹`plugin`，文件夹下新建`TestPlugin.js`。然后在项目里再新建文件夹`otherFile`，文件夹下新建`test.js`，这里文件内容随便\n\n上面我们说了需要传递参数，所以有了下面这段`js`，`options`是我们传递的对象，`apply`就不多说了，每个插件都有这个方法，然后我们把这个插件暴露出来\n`TestPlugin.js`\n```js\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    \n  }\n}\nmodule.exports = TestPlugin;\n```\n\n接下来我们开始写内部方法\n\n我们又要思考一下，我需要在打包完成之前做这个操作，那么`compiler`钩子的生命周期函数是哪个呢？没错，是emit，之前讲过，于是乎有了下面这段js\n`TestPlugin.js`\n```js\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n上面代码，我们注册了一个`emit`，`webpack`在执行打包的最后，会触发这个内部得方法\n\n接下来就是对文件得处理了，需要用到`compilation`\n\n我们思考一下，怎么处理文件？我们需要用到`compilation`下的`asset`，来处理资源文件。\n我们先把文件导入到`dist`文件夹下，于是乎有了下面这段js\n`TestPlugin.js`\n```js\nconst fs = require('fs');\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n\n      let template = fs.readFileSync(this.options.template, 'UTF-8');\n      compilation.assets[this.options.filename || 'test.js'] = {\n        source: function() {\n          return template;\n        },\n        size: function() {\n          return template.length;\n        },\n      };\n\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n上面代码，我们读取了插件实例传递过来的参数`filename`，调用`compilation`钩子下的`assets`，这个`assets`是一个键值对的形式，`key`是资源文件得名称，`value`是资源文件的内容，也是一个对象。执行`compilation.assets`，如果键值是一个已经存在的文件，`webpack`不会帮你重新创建，你可以去尝试修改一个文件\n\n好了，文件导入了，但是我们还需要在`index.html`去引入这个文件，思考一下，这个`index.html`是已经存在的，我们同样可以使用`compilation.assets`去修改它的文件内容，所以有了下面这段`js`\n\n`TestPlugin.js`\n```js\nconst fs = require('fs');\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n\n      let template = fs.readFileSync(this.options.template, 'UTF-8');\n      compilation.assets[this.options.filename || 'test.js'] = {\n        source: function() {\n          return template;\n        },\n        size: function() {\n          return template.length;\n        },\n      };\n      // 这里是新加的\n      let source = compilation.assets['index.html'].source();\n      source = source.replace(\n        /<\\/(.*?)>(.*?)<\\/body>$/m,\n        `</$1><script src=\"${this.options.filename ||\n          'test.js'}\"></script></body>`,\n      );\n\n      compilation.assets['index.html'] = {\n        source: function() {\n          return source;\n        },\n        size: function() {\n          return source.length;\n        },\n      };\n\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n我们通过修改文件的`source`，把一段`script`插入到`body`之前来修改文件\n\n插件写好了，我们在`webpack`去引入吧\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst TestPlugin = require('./plugin/TestPlugin');\nmodule.exports = {\n  mode: 'production',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n    new TestPlugin({\n      filename: 'test.js',\n      template: path.resolve(__dirname, './otherFile/test.js'),\n    }),\n  ],\n};\n```\n\n打包运行一下，看看效果吧\n\n插件代码仓库：https://github.com/wclimb/webpack-plugin\n\n## 总结\n\n今天我们学习了一如何编写一个插件，当然只是简单的操作了，可以思考一下，要实现`clean-webpack-plugin`或者`html-webpack-plugin`插件，我们该怎么做？\n\n本文地址 [webpack系列之编写一个plugin](http://www.wclimb.site/2019/06/21/webpack系列之编写一个plugin/)\n","source":"_posts/webpack系列之编写一个plugin.md","raw":"---\ntitle: webpack系列之编写一个plugin\ndate: 2019-06-21 09:17:19\ntags:\n- javascript\n- 原创\n- webpack\ncategories: [javascript,webpack]\n---\n\n## 写在前面\n\n使用`webpack`或者自己配置研究过`webpack`的人都知道`plugin`，也就是`webpack`的插件，对于大多数人来说，经常使用的插件诸如：`clean-webpack-plugin`、`html-webpack-plugin`等等，在很多情况下，我们只会去用它，知道他是干什么的，但是其内部做的操作缺知之甚少，今天我们就来写一个`plugin`\n\n## 基础\n\n首先我们看看插件是怎么使用在`webpack`上的\n\n```js\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: '...',\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: './index.html',\n    }),\n  ]  \n}\n```\n<!-- more -->\n我们经常使用的插件是长这样的，每个插件都是一个构造函数，通过`new`一个它的实例来使用。知道了插件是一个构造函数，那么我们可以推断出下面的结构\n```js\nclass TestPlguin(){\n  ...\n}\n```\nwebpack 插件由以下组成：\n  - 一个 JavaScript 命名函数。\n  - 在插件函数的 prototype 上定义一个 apply 方法。\n  - 指定一个绑定到 webpack 自身的事件钩子。\n  - 处理 webpack 内部实例的特定数据。\n  - 功能完成后调用 webpack 提供的回调。\n\n```js\nclass TestPlguin() {\n  constructor(){\n    \n  }\n  apply(compiler){\n    compiler.plugin('webpacksEventHook', function(compilation /* 处理 webpack 内部实例的特定数据。*/, callback) {\n      console.log(\"This is an example plugin!!!\");\n\n      // 功能完成后调用 webpack 提供的回调。\n      callback();\n    });\n  }\n}\n```\n上面是官网上的示例，插件一定会有`apply`方法，传递一个`compiler`参数，通过 `CLI` 或 `Node API` 传递的所有选项，创建出一个 `compilation` 实例。\n\n在插件开发中最重要的两个资源就是 `compiler` 和 `compilation` 对象。理解它们的角色是扩展 `webpack` 引擎重要的第一步。\n\n- `compiler` 对象代表了完整的 `webpack` 环境配置。这个对象在启动 `webpack` 时被一次性建立，并配置好所有可操作的设置，包括 `options`，`loader` 和 `plugin`。当在 `webpack` 环境中应用一个插件时，插件将收到此 `compiler` 对象的引用。可以使用它来访问 `webpack` 的主环境。\n- `compilation` 对象代表了一次资源版本构建。当运行 `webpack` 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 `compilation`，从而生成一组新的编译资源。一个 `compilation` 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。`compilation` 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。\n\n`Compiler` 和 `Compilation` 的区别在于：`Compiler` 代表了整个 `Webpack` 从启动到关闭的生命周期，而 `Compilation` 只是代表了一次新的编译\n\n## 钩子\n\n`Compiler`和`Compilation`都有生命周期\n\n### Compiler\n\n举几个例子\n\n1. `entryOption`：在 `entry` 配置项处理过之后，执行插件\n2. `emit`：生成资源到 `output` 目录之前。\n3. `failed`：编译(compilation)失败\n\n```js\nclass TestPlguin() {\n  ...\n  apply(compiler){\n    compiler.hooks.emit.tap('MyPlugin', params => {\n      console.log('我会在生成资源到 output 目录之前执行')\n    })\n  }\n}\n```\n上面的例子意思是，当`webpack`执行到最终要输出文件得时候，我在这个操作之前去打印一段话，通常是我们输出文件到`dist`文件夹之前那一步\n如果你实现写好了这些钩子，那么`webpack`在编译的流程里都会执行上面几个钩子。想了解更多访问 https://www.webpackjs.com/api/compiler-hooks/\n\n### Compilation\n\n`Compilation` 模块会被 `Compiler` 用来创建新的编译（或新的构建）。`compilation`实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)\n \n简单的理解就是，当编译期间文件发生各种变化的时候，我们可以通过 `Compilation` 钩子里的生命周期函数去拦截，然后做你想做的事情\n\n举几个例子\n\n1. `buildModule`：在模块构建开始之前触发。\n2. `optimize`：优化阶段开始时触发。\n3. `beforeChunkAssets`：在创建 chunk 资源(asset)之前\n4. `additionalAssets`：为编译(compilation)创建附加资源(asset)\n\n```js\nclass TestPlguin() {\n  ...\n  apply(compiler){\n    compiler.hooks.emit.tap('MyPlugin', compilation => {\n      console.log('我会在生成资源到 output 目录之前执行')\n      // 以下开始调用compilation钩子，当模块处在优化阶段开始时会执行以下回调\n      compilation.plugin(\"optimize\", function() {\n        console.log(\"我在优化阶段开始时触发了\");\n      });\n    })\n  }\n}\n```\n\n想了解更多访问 https://www.webpackjs.com/api/compilation-hooks/\n\n\n## 编写插件\n\n我们现在假定有一个这么个需求：我需要在打包的时候把一个外部的`js`文件导入到项目中，并且在`index.html`引入，你可能会问了，那你直接在主入口引入不就行了吗？确实，感觉做这件事情很没有意义，但是我就要这个需求，原因在于我在使用`DllPlugin`的时候，提前生成好了一堆文件，这些文件是不会在正常打包的过程引入的，所以我需要在最后打包生成文件之前把他们导入到`dist`文件夹下，并且引入他们。\n\n那么我们现在开始编写，先写个简单的，一个文件的导入，抛砖引玉。\n\n首先我们思考一下🤔，这个插件得有配置呀，和`html-webpack-plugin`一样可以传参数\n\n```js\nmodule.exports = {\n  plugin: [\n    new TestPlugin({\n      filename: 'test.js',\n      template: path.resolve(__dirname, './otherFile/test.js'),\n    }),\n  ]\n}\n```\n\n我们在项目里新建文件夹`plugin`，文件夹下新建`TestPlugin.js`。然后在项目里再新建文件夹`otherFile`，文件夹下新建`test.js`，这里文件内容随便\n\n上面我们说了需要传递参数，所以有了下面这段`js`，`options`是我们传递的对象，`apply`就不多说了，每个插件都有这个方法，然后我们把这个插件暴露出来\n`TestPlugin.js`\n```js\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    \n  }\n}\nmodule.exports = TestPlugin;\n```\n\n接下来我们开始写内部方法\n\n我们又要思考一下，我需要在打包完成之前做这个操作，那么`compiler`钩子的生命周期函数是哪个呢？没错，是emit，之前讲过，于是乎有了下面这段js\n`TestPlugin.js`\n```js\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n上面代码，我们注册了一个`emit`，`webpack`在执行打包的最后，会触发这个内部得方法\n\n接下来就是对文件得处理了，需要用到`compilation`\n\n我们思考一下，怎么处理文件？我们需要用到`compilation`下的`asset`，来处理资源文件。\n我们先把文件导入到`dist`文件夹下，于是乎有了下面这段js\n`TestPlugin.js`\n```js\nconst fs = require('fs');\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n\n      let template = fs.readFileSync(this.options.template, 'UTF-8');\n      compilation.assets[this.options.filename || 'test.js'] = {\n        source: function() {\n          return template;\n        },\n        size: function() {\n          return template.length;\n        },\n      };\n\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n上面代码，我们读取了插件实例传递过来的参数`filename`，调用`compilation`钩子下的`assets`，这个`assets`是一个键值对的形式，`key`是资源文件得名称，`value`是资源文件的内容，也是一个对象。执行`compilation.assets`，如果键值是一个已经存在的文件，`webpack`不会帮你重新创建，你可以去尝试修改一个文件\n\n好了，文件导入了，但是我们还需要在`index.html`去引入这个文件，思考一下，这个`index.html`是已经存在的，我们同样可以使用`compilation.assets`去修改它的文件内容，所以有了下面这段`js`\n\n`TestPlugin.js`\n```js\nconst fs = require('fs');\nclass TestPlugin {\n  constructor(options = {}) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('TestPlugin', (compilation, callback) => {\n\n      let template = fs.readFileSync(this.options.template, 'UTF-8');\n      compilation.assets[this.options.filename || 'test.js'] = {\n        source: function() {\n          return template;\n        },\n        size: function() {\n          return template.length;\n        },\n      };\n      // 这里是新加的\n      let source = compilation.assets['index.html'].source();\n      source = source.replace(\n        /<\\/(.*?)>(.*?)<\\/body>$/m,\n        `</$1><script src=\"${this.options.filename ||\n          'test.js'}\"></script></body>`,\n      );\n\n      compilation.assets['index.html'] = {\n        source: function() {\n          return source;\n        },\n        size: function() {\n          return source.length;\n        },\n      };\n\n      callback();\n    });\n  }\n}\nmodule.exports = TestPlugin;\n```\n我们通过修改文件的`source`，把一段`script`插入到`body`之前来修改文件\n\n插件写好了，我们在`webpack`去引入吧\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst TestPlugin = require('./plugin/TestPlugin');\nmodule.exports = {\n  mode: 'production',\n  entry: {\n    app: './src/index.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist/'),\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({ template: 'index.html' }),\n    new TestPlugin({\n      filename: 'test.js',\n      template: path.resolve(__dirname, './otherFile/test.js'),\n    }),\n  ],\n};\n```\n\n打包运行一下，看看效果吧\n\n插件代码仓库：https://github.com/wclimb/webpack-plugin\n\n## 总结\n\n今天我们学习了一如何编写一个插件，当然只是简单的操作了，可以思考一下，要实现`clean-webpack-plugin`或者`html-webpack-plugin`插件，我们该怎么做？\n\n本文地址 [webpack系列之编写一个plugin](http://www.wclimb.site/2019/06/21/webpack系列之编写一个plugin/)\n","slug":"webpack系列之编写一个plugin","published":1,"updated":"2019-07-08T01:29:20.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck411ns9t001z59x3gdn1bja6","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>使用<code>webpack</code>或者自己配置研究过<code>webpack</code>的人都知道<code>plugin</code>，也就是<code>webpack</code>的插件，对于大多数人来说，经常使用的插件诸如：<code>clean-webpack-plugin</code>、<code>html-webpack-plugin</code>等等，在很多情况下，我们只会去用它，知道他是干什么的，但是其内部做的操作缺知之甚少，今天我们就来写一个<code>plugin</code></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>首先我们看看插件是怎么使用在<code>webpack</code>上的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./index.html'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>我们经常使用的插件是长这样的，每个插件都是一个构造函数，通过<code>new</code>一个它的实例来使用。知道了插件是一个构造函数，那么我们可以推断出下面的结构<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>()</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>webpack 插件由以下组成：</p>\n<ul>\n<li>一个 JavaScript 命名函数。</li>\n<li>在插件函数的 prototype 上定义一个 apply 方法。</li>\n<li>指定一个绑定到 webpack 自身的事件钩子。</li>\n<li>处理 webpack 内部实例的特定数据。</li>\n<li>功能完成后调用 webpack 提供的回调。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* 处理 webpack 内部实例的特定数据。*/</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 功能完成后调用 webpack 提供的回调。</span></span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是官网上的示例，插件一定会有<code>apply</code>方法，传递一个<code>compiler</code>参数，通过 <code>CLI</code> 或 <code>Node API</code> 传递的所有选项，创建出一个 <code>compilation</code> 实例。</p>\n<p>在插件开发中最重要的两个资源就是 <code>compiler</code> 和 <code>compilation</code> 对象。理解它们的角色是扩展 <code>webpack</code> 引擎重要的第一步。</p>\n<ul>\n<li><code>compiler</code> 对象代表了完整的 <code>webpack</code> 环境配置。这个对象在启动 <code>webpack</code> 时被一次性建立，并配置好所有可操作的设置，包括 <code>options</code>，<code>loader</code> 和 <code>plugin</code>。当在 <code>webpack</code> 环境中应用一个插件时，插件将收到此 <code>compiler</code> 对象的引用。可以使用它来访问 <code>webpack</code> 的主环境。</li>\n<li><code>compilation</code> 对象代表了一次资源版本构建。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code>，从而生成一组新的编译资源。一个 <code>compilation</code> 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。<code>compilation</code> 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。</li>\n</ul>\n<p><code>Compiler</code> 和 <code>Compilation</code> 的区别在于：<code>Compiler</code> 代表了整个 <code>Webpack</code> 从启动到关闭的生命周期，而 <code>Compilation</code> 只是代表了一次新的编译</p>\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><p><code>Compiler</code>和<code>Compilation</code>都有生命周期</p>\n<h3 id=\"Compiler\"><a href=\"#Compiler\" class=\"headerlink\" title=\"Compiler\"></a>Compiler</h3><p>举几个例子</p>\n<ol>\n<li><code>entryOption</code>：在 <code>entry</code> 配置项处理过之后，执行插件</li>\n<li><code>emit</code>：生成资源到 <code>output</code> 目录之前。</li>\n<li><code>failed</code>：编译(compilation)失败</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.hooks.emit.tap(<span class=\"string\">'MyPlugin'</span>, params =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我会在生成资源到 output 目录之前执行'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子意思是，当<code>webpack</code>执行到最终要输出文件得时候，我在这个操作之前去打印一段话，通常是我们输出文件到<code>dist</code>文件夹之前那一步<br>如果你实现写好了这些钩子，那么<code>webpack</code>在编译的流程里都会执行上面几个钩子。想了解更多访问 <a href=\"https://www.webpackjs.com/api/compiler-hooks/\" target=\"_blank\" rel=\"noopener\">https://www.webpackjs.com/api/compiler-hooks/</a></p>\n<h3 id=\"Compilation\"><a href=\"#Compilation\" class=\"headerlink\" title=\"Compilation\"></a>Compilation</h3><p><code>Compilation</code> 模块会被 <code>Compiler</code> 用来创建新的编译（或新的构建）。<code>compilation</code>实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)</p>\n<p>简单的理解就是，当编译期间文件发生各种变化的时候，我们可以通过 <code>Compilation</code> 钩子里的生命周期函数去拦截，然后做你想做的事情</p>\n<p>举几个例子</p>\n<ol>\n<li><code>buildModule</code>：在模块构建开始之前触发。</li>\n<li><code>optimize</code>：优化阶段开始时触发。</li>\n<li><code>beforeChunkAssets</code>：在创建 chunk 资源(asset)之前</li>\n<li><code>additionalAssets</code>：为编译(compilation)创建附加资源(asset)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.hooks.emit.tap(<span class=\"string\">'MyPlugin'</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我会在生成资源到 output 目录之前执行'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 以下开始调用compilation钩子，当模块处在优化阶段开始时会执行以下回调</span></span><br><span class=\"line\">      compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我在优化阶段开始时触发了\"</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想了解更多访问 <a href=\"https://www.webpackjs.com/api/compilation-hooks/\" target=\"_blank\" rel=\"noopener\">https://www.webpackjs.com/api/compilation-hooks/</a></p>\n<h2 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h2><p>我们现在假定有一个这么个需求：我需要在打包的时候把一个外部的<code>js</code>文件导入到项目中，并且在<code>index.html</code>引入，你可能会问了，那你直接在主入口引入不就行了吗？确实，感觉做这件事情很没有意义，但是我就要这个需求，原因在于我在使用<code>DllPlugin</code>的时候，提前生成好了一堆文件，这些文件是不会在正常打包的过程引入的，所以我需要在最后打包生成文件之前把他们导入到<code>dist</code>文件夹下，并且引入他们。</p>\n<p>那么我们现在开始编写，先写个简单的，一个文件的导入，抛砖引玉。</p>\n<p>首先我们思考一下🤔，这个插件得有配置呀，和<code>html-webpack-plugin</code>一样可以传参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TestPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'test.js'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'./otherFile/test.js'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在项目里新建文件夹<code>plugin</code>，文件夹下新建<code>TestPlugin.js</code>。然后在项目里再新建文件夹<code>otherFile</code>，文件夹下新建<code>test.js</code>，这里文件内容随便</p>\n<p>上面我们说了需要传递参数，所以有了下面这段<code>js</code>，<code>options</code>是我们传递的对象，<code>apply</code>就不多说了，每个插件都有这个方法，然后我们把这个插件暴露出来<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们开始写内部方法</p>\n<p>我们又要思考一下，我需要在打包完成之前做这个操作，那么<code>compiler</code>钩子的生命周期函数是哪个呢？没错，是emit，之前讲过，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码，我们注册了一个<code>emit</code>，<code>webpack</code>在执行打包的最后，会触发这个内部得方法</p>\n<p>接下来就是对文件得处理了，需要用到<code>compilation</code></p>\n<p>我们思考一下，怎么处理文件？我们需要用到<code>compilation</code>下的<code>asset</code>，来处理资源文件。<br>我们先把文件导入到<code>dist</code>文件夹下，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = fs.readFileSync(<span class=\"keyword\">this</span>.options.template, <span class=\"string\">'UTF-8'</span>);</span><br><span class=\"line\">      compilation.assets[<span class=\"keyword\">this</span>.options.filename || <span class=\"string\">'test.js'</span>] = &#123;</span><br><span class=\"line\">        source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码，我们读取了插件实例传递过来的参数<code>filename</code>，调用<code>compilation</code>钩子下的<code>assets</code>，这个<code>assets</code>是一个键值对的形式，<code>key</code>是资源文件得名称，<code>value</code>是资源文件的内容，也是一个对象。执行<code>compilation.assets</code>，如果键值是一个已经存在的文件，<code>webpack</code>不会帮你重新创建，你可以去尝试修改一个文件</p>\n<p>好了，文件导入了，但是我们还需要在<code>index.html</code>去引入这个文件，思考一下，这个<code>index.html</code>是已经存在的，我们同样可以使用<code>compilation.assets</code>去修改它的文件内容，所以有了下面这段<code>js</code></p>\n<p><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = fs.readFileSync(<span class=\"keyword\">this</span>.options.template, <span class=\"string\">'UTF-8'</span>);</span><br><span class=\"line\">      compilation.assets[<span class=\"keyword\">this</span>.options.filename || <span class=\"string\">'test.js'</span>] = &#123;</span><br><span class=\"line\">        source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 这里是新加的</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = compilation.assets[<span class=\"string\">'index.html'</span>].source();</span><br><span class=\"line\">      source = source.replace(</span><br><span class=\"line\">        /<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">\\</span>/(<span class=\"attr\">.</span>*?)&gt;</span>(.*?)<span class=\"tag\">&lt;<span class=\"name\">\\</span>/<span class=\"attr\">body</span>&gt;</span>$/m,</span></span><br><span class=\"line\">        `&lt;/$1&gt;&lt;script src=\"$&#123;this.options.filename ||</span><br><span class=\"line\"><span class=\"xml\">          'test.js'&#125;\"&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><span class=\"string\">`,</span></span><br><span class=\"line\"><span class=\"string\">      );</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      compilation.assets['index.html'] = &#123;</span></span><br><span class=\"line\"><span class=\"string\">        source: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return source;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        size: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return source.length;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      callback();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">module.exports = TestPlugin;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们通过修改文件的<code>source</code>，把一段<code>script</code>插入到<code>body</code>之前来修改文件</p>\n<p>插件写好了，我们在<code>webpack</code>去引入吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'./plugin/TestPlugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TestPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'test.js'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'./otherFile/test.js'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>打包运行一下，看看效果吧</p>\n<p>插件代码仓库：<a href=\"https://github.com/wclimb/webpack-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/webpack-plugin</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天我们学习了一如何编写一个插件，当然只是简单的操作了，可以思考一下，要实现<code>clean-webpack-plugin</code>或者<code>html-webpack-plugin</code>插件，我们该怎么做？</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/21/webpack系列之编写一个plugin/\">webpack系列之编写一个plugin</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>使用<code>webpack</code>或者自己配置研究过<code>webpack</code>的人都知道<code>plugin</code>，也就是<code>webpack</code>的插件，对于大多数人来说，经常使用的插件诸如：<code>clean-webpack-plugin</code>、<code>html-webpack-plugin</code>等等，在很多情况下，我们只会去用它，知道他是干什么的，但是其内部做的操作缺知之甚少，今天我们就来写一个<code>plugin</code></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>首先我们看看插件是怎么使用在<code>webpack</code>上的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./index.html'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>我们经常使用的插件是长这样的，每个插件都是一个构造函数，通过<code>new</code>一个它的实例来使用。知道了插件是一个构造函数，那么我们可以推断出下面的结构<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>()</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>webpack 插件由以下组成：</p>\n<ul>\n<li>一个 JavaScript 命名函数。</li>\n<li>在插件函数的 prototype 上定义一个 apply 方法。</li>\n<li>指定一个绑定到 webpack 自身的事件钩子。</li>\n<li>处理 webpack 内部实例的特定数据。</li>\n<li>功能完成后调用 webpack 提供的回调。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'webpacksEventHook'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation <span class=\"regexp\">/* 处理 webpack 内部实例的特定数据。*/</span>, callback</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an example plugin!!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 功能完成后调用 webpack 提供的回调。</span></span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是官网上的示例，插件一定会有<code>apply</code>方法，传递一个<code>compiler</code>参数，通过 <code>CLI</code> 或 <code>Node API</code> 传递的所有选项，创建出一个 <code>compilation</code> 实例。</p>\n<p>在插件开发中最重要的两个资源就是 <code>compiler</code> 和 <code>compilation</code> 对象。理解它们的角色是扩展 <code>webpack</code> 引擎重要的第一步。</p>\n<ul>\n<li><code>compiler</code> 对象代表了完整的 <code>webpack</code> 环境配置。这个对象在启动 <code>webpack</code> 时被一次性建立，并配置好所有可操作的设置，包括 <code>options</code>，<code>loader</code> 和 <code>plugin</code>。当在 <code>webpack</code> 环境中应用一个插件时，插件将收到此 <code>compiler</code> 对象的引用。可以使用它来访问 <code>webpack</code> 的主环境。</li>\n<li><code>compilation</code> 对象代表了一次资源版本构建。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code>，从而生成一组新的编译资源。一个 <code>compilation</code> 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。<code>compilation</code> 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。</li>\n</ul>\n<p><code>Compiler</code> 和 <code>Compilation</code> 的区别在于：<code>Compiler</code> 代表了整个 <code>Webpack</code> 从启动到关闭的生命周期，而 <code>Compilation</code> 只是代表了一次新的编译</p>\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><p><code>Compiler</code>和<code>Compilation</code>都有生命周期</p>\n<h3 id=\"Compiler\"><a href=\"#Compiler\" class=\"headerlink\" title=\"Compiler\"></a>Compiler</h3><p>举几个例子</p>\n<ol>\n<li><code>entryOption</code>：在 <code>entry</code> 配置项处理过之后，执行插件</li>\n<li><code>emit</code>：生成资源到 <code>output</code> 目录之前。</li>\n<li><code>failed</code>：编译(compilation)失败</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.hooks.emit.tap(<span class=\"string\">'MyPlugin'</span>, params =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我会在生成资源到 output 目录之前执行'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子意思是，当<code>webpack</code>执行到最终要输出文件得时候，我在这个操作之前去打印一段话，通常是我们输出文件到<code>dist</code>文件夹之前那一步<br>如果你实现写好了这些钩子，那么<code>webpack</code>在编译的流程里都会执行上面几个钩子。想了解更多访问 <a href=\"https://www.webpackjs.com/api/compiler-hooks/\" target=\"_blank\" rel=\"noopener\">https://www.webpackjs.com/api/compiler-hooks/</a></p>\n<h3 id=\"Compilation\"><a href=\"#Compilation\" class=\"headerlink\" title=\"Compilation\"></a>Compilation</h3><p><code>Compilation</code> 模块会被 <code>Compiler</code> 用来创建新的编译（或新的构建）。<code>compilation</code>实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)</p>\n<p>简单的理解就是，当编译期间文件发生各种变化的时候，我们可以通过 <code>Compilation</code> 钩子里的生命周期函数去拦截，然后做你想做的事情</p>\n<p>举几个例子</p>\n<ol>\n<li><code>buildModule</code>：在模块构建开始之前触发。</li>\n<li><code>optimize</code>：优化阶段开始时触发。</li>\n<li><code>beforeChunkAssets</code>：在创建 chunk 资源(asset)之前</li>\n<li><code>additionalAssets</code>：为编译(compilation)创建附加资源(asset)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlguin</span>() </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.hooks.emit.tap(<span class=\"string\">'MyPlugin'</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我会在生成资源到 output 目录之前执行'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 以下开始调用compilation钩子，当模块处在优化阶段开始时会执行以下回调</span></span><br><span class=\"line\">      compilation.plugin(<span class=\"string\">\"optimize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我在优化阶段开始时触发了\"</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>想了解更多访问 <a href=\"https://www.webpackjs.com/api/compilation-hooks/\" target=\"_blank\" rel=\"noopener\">https://www.webpackjs.com/api/compilation-hooks/</a></p>\n<h2 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h2><p>我们现在假定有一个这么个需求：我需要在打包的时候把一个外部的<code>js</code>文件导入到项目中，并且在<code>index.html</code>引入，你可能会问了，那你直接在主入口引入不就行了吗？确实，感觉做这件事情很没有意义，但是我就要这个需求，原因在于我在使用<code>DllPlugin</code>的时候，提前生成好了一堆文件，这些文件是不会在正常打包的过程引入的，所以我需要在最后打包生成文件之前把他们导入到<code>dist</code>文件夹下，并且引入他们。</p>\n<p>那么我们现在开始编写，先写个简单的，一个文件的导入，抛砖引玉。</p>\n<p>首先我们思考一下🤔，这个插件得有配置呀，和<code>html-webpack-plugin</code>一样可以传参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TestPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'test.js'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'./otherFile/test.js'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在项目里新建文件夹<code>plugin</code>，文件夹下新建<code>TestPlugin.js</code>。然后在项目里再新建文件夹<code>otherFile</code>，文件夹下新建<code>test.js</code>，这里文件内容随便</p>\n<p>上面我们说了需要传递参数，所以有了下面这段<code>js</code>，<code>options</code>是我们传递的对象，<code>apply</code>就不多说了，每个插件都有这个方法，然后我们把这个插件暴露出来<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们开始写内部方法</p>\n<p>我们又要思考一下，我需要在打包完成之前做这个操作，那么<code>compiler</code>钩子的生命周期函数是哪个呢？没错，是emit，之前讲过，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码，我们注册了一个<code>emit</code>，<code>webpack</code>在执行打包的最后，会触发这个内部得方法</p>\n<p>接下来就是对文件得处理了，需要用到<code>compilation</code></p>\n<p>我们思考一下，怎么处理文件？我们需要用到<code>compilation</code>下的<code>asset</code>，来处理资源文件。<br>我们先把文件导入到<code>dist</code>文件夹下，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = fs.readFileSync(<span class=\"keyword\">this</span>.options.template, <span class=\"string\">'UTF-8'</span>);</span><br><span class=\"line\">      compilation.assets[<span class=\"keyword\">this</span>.options.filename || <span class=\"string\">'test.js'</span>] = &#123;</span><br><span class=\"line\">        source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      callback();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = TestPlugin;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码，我们读取了插件实例传递过来的参数<code>filename</code>，调用<code>compilation</code>钩子下的<code>assets</code>，这个<code>assets</code>是一个键值对的形式，<code>key</code>是资源文件得名称，<code>value</code>是资源文件的内容，也是一个对象。执行<code>compilation.assets</code>，如果键值是一个已经存在的文件，<code>webpack</code>不会帮你重新创建，你可以去尝试修改一个文件</p>\n<p>好了，文件导入了，但是我们还需要在<code>index.html</code>去引入这个文件，思考一下，这个<code>index.html</code>是已经存在的，我们同样可以使用<code>compilation.assets</code>去修改它的文件内容，所以有了下面这段<code>js</code></p>\n<p><code>TestPlugin.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(<span class=\"string\">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = fs.readFileSync(<span class=\"keyword\">this</span>.options.template, <span class=\"string\">'UTF-8'</span>);</span><br><span class=\"line\">      compilation.assets[<span class=\"keyword\">this</span>.options.filename || <span class=\"string\">'test.js'</span>] = &#123;</span><br><span class=\"line\">        source: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> template.length;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 这里是新加的</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = compilation.assets[<span class=\"string\">'index.html'</span>].source();</span><br><span class=\"line\">      source = source.replace(</span><br><span class=\"line\">        /<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">\\</span>/(<span class=\"attr\">.</span>*?)&gt;</span>(.*?)<span class=\"tag\">&lt;<span class=\"name\">\\</span>/<span class=\"attr\">body</span>&gt;</span>$/m,</span></span><br><span class=\"line\">        `&lt;/$1&gt;&lt;script src=\"$&#123;this.options.filename ||</span><br><span class=\"line\"><span class=\"xml\">          'test.js'&#125;\"&gt;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><span class=\"string\">`,</span></span><br><span class=\"line\"><span class=\"string\">      );</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      compilation.assets['index.html'] = &#123;</span></span><br><span class=\"line\"><span class=\"string\">        source: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return source;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        size: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return source.length;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      callback();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">module.exports = TestPlugin;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们通过修改文件的<code>source</code>，把一段<code>script</code>插入到<code>body</code>之前来修改文件</p>\n<p>插件写好了，我们在<code>webpack</code>去引入吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> TestPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'./plugin/TestPlugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">'index.html'</span> &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TestPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'test.js'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'./otherFile/test.js'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>打包运行一下，看看效果吧</p>\n<p>插件代码仓库：<a href=\"https://github.com/wclimb/webpack-plugin\" target=\"_blank\" rel=\"noopener\">https://github.com/wclimb/webpack-plugin</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>今天我们学习了一如何编写一个插件，当然只是简单的操作了，可以思考一下，要实现<code>clean-webpack-plugin</code>或者<code>html-webpack-plugin</code>插件，我们该怎么做？</p>\n<p>本文地址 <a href=\"http://www.wclimb.site/2019/06/21/webpack系列之编写一个plugin/\">webpack系列之编写一个plugin</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck411ns92000h59x3yitbmipw","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns98000o59x36v3j1g9f"},{"post_id":"ck411ns96000l59x33slcuu2e","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9b000v59x35tdfqrp6"},{"post_id":"ck411ns8v000959x3rkuky7ls","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9c000z59x32c63pa71"},{"post_id":"ck411ns8k000159x37pojwrce","category_id":"ck411ns8q000559x34jkx2onj","_id":"ck411ns9e001459x3djgvdkty"},{"post_id":"ck411ns8k000159x37pojwrce","category_id":"ck411ns99000q59x3krzo9r9a","_id":"ck411ns9g001759x3pt6r0chn"},{"post_id":"ck411ns8w000a59x3brzx1yee","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9h001a59x3sbklp8wq"},{"post_id":"ck411ns8z000d59x3x2ptaqb2","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9j001e59x3fw4p0dcv"},{"post_id":"ck411ns8o000359x3lxhodw7r","category_id":"ck411ns8x000b59x3lti9bdrg","_id":"ck411ns9n001l59x3p7xkhnkp"},{"post_id":"ck411ns8o000359x3lxhodw7r","category_id":"ck411ns9h001959x3kfvuoe6x","_id":"ck411ns9o001o59x3d2ny7lgz"},{"post_id":"ck411ns8s000759x3psi4cair","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9t001v59x3434cks8f"},{"post_id":"ck411ns8s000759x3psi4cair","category_id":"ck411ns9n001k59x32vt3xbux","_id":"ck411ns9u002059x3sq8qjv8k"},{"post_id":"ck411ns93000i59x3tmmhmyyw","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9v002259x39901yo1z"},{"post_id":"ck411ns93000i59x3tmmhmyyw","category_id":"ck411ns9q001q59x3j81t2pfi","_id":"ck411ns9v002659x3vehna91t"},{"post_id":"ck411ns9a000u59x37myjodgt","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9w002959x3t75fyafu"},{"post_id":"ck411ns9a000u59x37myjodgt","category_id":"ck411ns9t001w59x3zaueg2hu","_id":"ck411ns9x002d59x37a7m4zif"},{"post_id":"ck411ns9b000y59x3r8yeoqnq","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411ns9x002g59x3j2o3a8hl"},{"post_id":"ck411ns9b000y59x3r8yeoqnq","category_id":"ck411ns9v002459x35roahnbw","_id":"ck411ns9y002j59x33w9zeqe2"},{"post_id":"ck411ns9h001b59x3qosgv6h4","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa1002y59x3pbtr5tb7"},{"post_id":"ck411ns9h001b59x3qosgv6h4","category_id":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsa2003159x3ilpj4o1p"},{"post_id":"ck411ns9i001d59x31pxulkle","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa2003659x36reoc1h4"},{"post_id":"ck411ns9i001d59x31pxulkle","category_id":"ck411nsa0002u59x36pzc7zsj","_id":"ck411nsa3003759x3irty3gc0"},{"post_id":"ck411ns90000e59x3i3b6uiom","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa4003e59x37w92j6ne"},{"post_id":"ck411ns90000e59x3i3b6uiom","category_id":"ck411nsa2003559x3oucvdp8o","_id":"ck411nsa5003g59x3kmjsdoom"},{"post_id":"ck411ns9m001j59x3n8xno6mn","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsa5003j59x350hh5ou7"},{"post_id":"ck411ns9m001j59x3n8xno6mn","category_id":"ck411nsa2003559x3oucvdp8o","_id":"ck411nsa6003m59x3hnahmdwn"},{"post_id":"ck411ns9p001p59x31whbob0f","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsad003p59x3necdc39w"},{"post_id":"ck411ns9p001p59x31whbob0f","category_id":"ck411nsa0002u59x36pzc7zsj","_id":"ck411nsae003s59x387oxuhwr"},{"post_id":"ck411ns9s001u59x3mzhsrbpa","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsae003u59x3dicvvaak"},{"post_id":"ck411ns9s001u59x3mzhsrbpa","category_id":"ck411nsa0002u59x36pzc7zsj","_id":"ck411nsaf003w59x3nkrwsykn"},{"post_id":"ck411ns9t001z59x3gdn1bja6","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsaf003y59x3xfgm9b1a"},{"post_id":"ck411ns9t001z59x3gdn1bja6","category_id":"ck411nsa0002u59x36pzc7zsj","_id":"ck411nsag004259x3ro8qj0yh"},{"post_id":"ck411ns9d001159x3e052s367","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsag004459x376amkp9x"},{"post_id":"ck411ns9d001159x3e052s367","category_id":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsag004759x3xkbh3d01"},{"post_id":"ck411ns9d001159x3e052s367","category_id":"ck411nsae003t59x3opt7on8e","_id":"ck411nsah004859x3j7h24km3"},{"post_id":"ck411ns9j001f59x3xapspihs","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsai004i59x33h5weoew"},{"post_id":"ck411ns9j001f59x3xapspihs","category_id":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsaj004l59x3mfa6yw29"},{"post_id":"ck411ns9j001f59x3xapspihs","category_id":"ck411nsah004a59x3a9ugl8q3","_id":"ck411nsak004o59x3552pv1zj"},{"post_id":"ck411ns9e001559x3uggmud64","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsak004p59x3lmbvqsja"},{"post_id":"ck411ns9e001559x3uggmud64","category_id":"ck411ns9w002b59x3i8qg3g9g","_id":"ck411nsak004q59x3efvqggqn"},{"post_id":"ck411ns9e001559x3uggmud64","category_id":"ck411nsaf004059x3nzlrlyds","_id":"ck411nsak004s59x39f510ua6"},{"post_id":"ck411ns9e001559x3uggmud64","category_id":"ck411nsai004e59x3f09uosdw","_id":"ck411nsal004t59x3nsm4xua4"},{"post_id":"ck411ns9g001859x3q8q685ug","category_id":"ck411ns92000f59x3bkwxzhqy","_id":"ck411nsal004v59x311nv4ujd"},{"post_id":"ck411ns9g001859x3q8q685ug","category_id":"ck411ns9z002m59x373zoq52i","_id":"ck411nsal004w59x3xm5hervj"},{"post_id":"ck411ns9g001859x3q8q685ug","category_id":"ck411nsag004559x33i7zgorb","_id":"ck411nsam004z59x3p7qbhq6p"},{"post_id":"ck411ns9g001859x3q8q685ug","category_id":"ck411nsaj004j59x3ldwvkjwe","_id":"ck411nsam005159x3comiw3ml"}],"PostTag":[{"post_id":"ck411ns8k000159x37pojwrce","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns97000m59x32fvupykr"},{"post_id":"ck411ns8k000159x37pojwrce","tag_id":"ck411ns8y000c59x3wyr5mg3o","_id":"ck411ns98000p59x34uy3opir"},{"post_id":"ck411ns8k000159x37pojwrce","tag_id":"ck411ns92000g59x3uybkbkxk","_id":"ck411ns9a000t59x3x1j8ojqy"},{"post_id":"ck411ns8o000359x3lxhodw7r","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns9d001059x3griqxchs"},{"post_id":"ck411ns8o000359x3lxhodw7r","tag_id":"ck411ns99000r59x3lw3veyer","_id":"ck411ns9e001259x3dkzomyo4"},{"post_id":"ck411ns8s000759x3psi4cair","tag_id":"ck411ns9b000x59x396h82kjx","_id":"ck411ns9r001t59x3ojn5or4m"},{"post_id":"ck411ns8s000759x3psi4cair","tag_id":"ck411ns9f001659x3l9q8thng","_id":"ck411ns9t001x59x3dnhm746m"},{"post_id":"ck411ns8s000759x3psi4cair","tag_id":"ck411ns9i001c59x3tp11wjga","_id":"ck411ns9u002159x32kea7iw1"},{"post_id":"ck411ns8s000759x3psi4cair","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411ns9v002359x3ld9ap5lu"},{"post_id":"ck411ns8s000759x3psi4cair","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns9v002759x3dtg3y8cz"},{"post_id":"ck411ns8v000959x3rkuky7ls","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411ns9w002859x3rmb4bg49"},{"post_id":"ck411ns8v000959x3rkuky7ls","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns9w002c59x33mf7bybh"},{"post_id":"ck411ns8w000a59x3brzx1yee","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411ns9x002e59x3kom6jeab"},{"post_id":"ck411ns8w000a59x3brzx1yee","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns9y002i59x333bz68a1"},{"post_id":"ck411ns8z000d59x3x2ptaqb2","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411ns9y002k59x3onx4ujv3"},{"post_id":"ck411ns8z000d59x3x2ptaqb2","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411ns9z002n59x35027nans"},{"post_id":"ck411ns90000e59x3i3b6uiom","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411ns9z002o59x3rxwhl4uj"},{"post_id":"ck411ns90000e59x3i3b6uiom","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsa0002r59x3lq8f170d"},{"post_id":"ck411ns92000h59x3yitbmipw","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsa0002s59x3yh8z4lko"},{"post_id":"ck411ns92000h59x3yitbmipw","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsa1002v59x324f4kn7y"},{"post_id":"ck411ns93000i59x3tmmhmyyw","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsa1002w59x30tt1upcu"},{"post_id":"ck411ns93000i59x3tmmhmyyw","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsa1002z59x3ifykfhz6"},{"post_id":"ck411ns96000l59x33slcuu2e","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsa2003259x33ad6drgi"},{"post_id":"ck411ns96000l59x33slcuu2e","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsa2003459x319y507zb"},{"post_id":"ck411ns97000n59x3bdc29jf5","tag_id":"ck411nsa0002t59x3h954tacr","_id":"ck411nsa3003a59x306r9e0sl"},{"post_id":"ck411ns97000n59x3bdc29jf5","tag_id":"ck411nsa1002x59x3l9h4p4pr","_id":"ck411nsa3003b59x3m274dx5p"},{"post_id":"ck411ns97000n59x3bdc29jf5","tag_id":"ck411nsa2003359x3r5mupban","_id":"ck411nsa4003f59x3syxwklt1"},{"post_id":"ck411ns9a000u59x37myjodgt","tag_id":"ck411nsa3003859x3yvc21pfc","_id":"ck411nsa5003h59x33d6vsf5h"},{"post_id":"ck411ns9a000u59x37myjodgt","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsa6003l59x3pyry0o78"},{"post_id":"ck411ns9b000y59x3r8yeoqnq","tag_id":"ck411nsa4003c59x35by5e6x4","_id":"ck411nsa6003n59x3o7l25w7k"},{"post_id":"ck411ns9b000y59x3r8yeoqnq","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsae003r59x3daz880z7"},{"post_id":"ck411ns9d001159x3e052s367","tag_id":"ck411nsa5003k59x3sx6tnrk9","_id":"ck411nsaf003x59x3geeldg8b"},{"post_id":"ck411ns9d001159x3e052s367","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsaf003z59x3p736nigt"},{"post_id":"ck411ns9d001159x3e052s367","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsag004359x3xseu8n7e"},{"post_id":"ck411ns9e001559x3uggmud64","tag_id":"ck411nsa5003k59x3sx6tnrk9","_id":"ck411nsah004b59x3jildxysc"},{"post_id":"ck411ns9e001559x3uggmud64","tag_id":"ck411nsaf004159x35wsmeisi","_id":"ck411nsah004c59x34z22mzj8"},{"post_id":"ck411ns9e001559x3uggmud64","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsai004f59x3o6zkwrps"},{"post_id":"ck411ns9e001559x3uggmud64","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsai004g59x3nhaaro6b"},{"post_id":"ck411ns9g001859x3q8q685ug","tag_id":"ck411nsah004959x3kcyee4mo","_id":"ck411nsaj004k59x3vucnaakq"},{"post_id":"ck411ns9g001859x3q8q685ug","tag_id":"ck411nsa5003k59x3sx6tnrk9","_id":"ck411nsaj004m59x3j5vqsubg"},{"post_id":"ck411ns9h001b59x3qosgv6h4","tag_id":"ck411nsa5003k59x3sx6tnrk9","_id":"ck411nsam004y59x3mae3smgr"},{"post_id":"ck411ns9h001b59x3qosgv6h4","tag_id":"ck411nsak004n59x3f23axgrz","_id":"ck411nsam005059x3i9veu0dx"},{"post_id":"ck411ns9h001b59x3qosgv6h4","tag_id":"ck411ns9i001c59x3tp11wjga","_id":"ck411nsam005359x386b0v5dq"},{"post_id":"ck411ns9h001b59x3qosgv6h4","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsam005459x3b4qq05o6"},{"post_id":"ck411ns9h001b59x3qosgv6h4","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsan005659x36wremte3"},{"post_id":"ck411ns9i001d59x31pxulkle","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsan005759x3py1p8nr7"},{"post_id":"ck411ns9i001d59x31pxulkle","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsan005959x3poi9tyuy"},{"post_id":"ck411ns9i001d59x31pxulkle","tag_id":"ck411nsam005259x32hez30qy","_id":"ck411nsan005a59x3t6me67et"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411nsam005559x3j5gbk8b2","_id":"ck411nsao005e59x3geaffowc"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411nsa5003k59x3sx6tnrk9","_id":"ck411nsap005f59x3a9kl29a7"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411nsak004n59x3f23axgrz","_id":"ck411nsap005h59x3ajul4j4n"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411ns9i001c59x3tp11wjga","_id":"ck411nsap005i59x3fzg9ta8d"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsaq005k59x3vyojgqhq"},{"post_id":"ck411ns9j001f59x3xapspihs","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsaq005l59x3yp5ncoyq"},{"post_id":"ck411ns9l001i59x319pdid0t","tag_id":"ck411nsao005d59x39c529hsm","_id":"ck411nsaq005n59x3j4lkoclg"},{"post_id":"ck411ns9l001i59x319pdid0t","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsar005o59x3oddi7l36"},{"post_id":"ck411ns9l001i59x319pdid0t","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsar005q59x3qmfo26dy"},{"post_id":"ck411ns9m001j59x3n8xno6mn","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsar005r59x36yz85nr9"},{"post_id":"ck411ns9m001j59x3n8xno6mn","tag_id":"ck411nsap005g59x3q02825jf","_id":"ck411nsas005t59x3su1x0v80"},{"post_id":"ck411ns9m001j59x3n8xno6mn","tag_id":"ck411nsap005j59x3xrwm0g8q","_id":"ck411nsas005u59x36pirux2r"},{"post_id":"ck411ns9m001j59x3n8xno6mn","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsas005w59x3uiyyiaqc"},{"post_id":"ck411ns9n001n59x32h4wieox","tag_id":"ck411nsao005d59x39c529hsm","_id":"ck411nsas005x59x3961g2p62"},{"post_id":"ck411ns9n001n59x32h4wieox","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsat005z59x3od372z0e"},{"post_id":"ck411ns9n001n59x32h4wieox","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsat006059x3kmnekdxq"},{"post_id":"ck411ns9p001p59x31whbob0f","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsat006159x36s3yrn1w"},{"post_id":"ck411ns9p001p59x31whbob0f","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsau006259x348rpc9dk"},{"post_id":"ck411ns9p001p59x31whbob0f","tag_id":"ck411nsam005259x32hez30qy","_id":"ck411nsau006359x3zkyaag54"},{"post_id":"ck411ns9q001s59x3e2kf8aw1","tag_id":"ck411nsao005d59x39c529hsm","_id":"ck411nsau006459x3tugkfvsf"},{"post_id":"ck411ns9q001s59x3e2kf8aw1","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsau006559x31wp55a96"},{"post_id":"ck411ns9q001s59x3e2kf8aw1","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsau006659x3t55aviak"},{"post_id":"ck411ns9s001u59x3mzhsrbpa","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsau006759x3ji6p3n9l"},{"post_id":"ck411ns9s001u59x3mzhsrbpa","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsau006859x3910qa8c7"},{"post_id":"ck411ns9s001u59x3mzhsrbpa","tag_id":"ck411nsam005259x32hez30qy","_id":"ck411nsau006959x3ciw15vff"},{"post_id":"ck411ns9t001z59x3gdn1bja6","tag_id":"ck411ns9l001h59x3x6n3nf9t","_id":"ck411nsav006a59x3tczdzyal"},{"post_id":"ck411ns9t001z59x3gdn1bja6","tag_id":"ck411ns8s000659x38f7trl4c","_id":"ck411nsav006b59x3ysbbitlx"},{"post_id":"ck411ns9t001z59x3gdn1bja6","tag_id":"ck411nsam005259x32hez30qy","_id":"ck411nsav006c59x32k2zoc9f"}],"Tag":[{"name":"原创","_id":"ck411ns8s000659x38f7trl4c"},{"name":"教程","_id":"ck411ns8y000c59x3wyr5mg3o"},{"name":"Docker","_id":"ck411ns92000g59x3uybkbkxk"},{"name":"gitlab","_id":"ck411ns99000r59x3lw3veyer"},{"name":"HTTP","_id":"ck411ns9b000x59x396h82kjx"},{"name":"缓存","_id":"ck411ns9f001659x3l9q8thng"},{"name":"Mysql","_id":"ck411ns9i001c59x3tp11wjga"},{"name":"javascript","_id":"ck411ns9l001h59x3x6n3nf9t"},{"name":"数据库","_id":"ck411nsa0002t59x3h954tacr"},{"name":"mysql","_id":"ck411nsa1002x59x3l9h4p4pr"},{"name":"转载","_id":"ck411nsa2003359x3r5mupban"},{"name":"canvas","_id":"ck411nsa3003859x3yvc21pfc"},{"name":"gulp","_id":"ck411nsa4003c59x35by5e6x4"},{"name":"Node","_id":"ck411nsa5003k59x3sx6tnrk9"},{"name":"Egg","_id":"ck411nsaf004159x35wsmeisi"},{"name":"redis","_id":"ck411nsah004959x3kcyee4mo"},{"name":"Koa","_id":"ck411nsak004n59x3f23axgrz"},{"name":"webpack","_id":"ck411nsam005259x32hez30qy"},{"name":"Vue","_id":"ck411nsam005559x3j5gbk8b2"},{"name":"zepto","_id":"ck411nsao005d59x39c529hsm"},{"name":"vue","_id":"ck411nsap005g59x3q02825jf"},{"name":"源码","_id":"ck411nsap005j59x3xrwm0g8q"}]}}